
Ohmmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00003788  0000381c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000b0  008000b0  0000386c  2**0
                  ALLOC
  3 .stab         000026e8  00000000  00000000  0000386c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000edc  00000000  00000000  00005f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000711f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a265  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b62a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000beb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <main>
      8a:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 19 	jmp	0x320c	; 0x320c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 19 	jmp	0x320c	; 0x320c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e9       	ldi	r22, 0x91	; 145
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
#include "ADC_private.h"

static void (*ADC_PtrFunc)(u16) = NULL;
static u8 ADC_u8BusyFlag = ADC_u8_NOT_BUSY;

void ADC_voidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*   Select Vref = 2.56v       */
	//	SET_BIT(ADC_u8_ADMUX_REG,7);
	//	SET_BIT(ADC_u8_ADMUX_REG,6);

	/*   Select Vref = 5v       */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24

	/*    Select Right Adjustment   */
	CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24

	/*    Select Conversion Mode    */
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

	/*    Select Prescaler  = 64    */
	SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24

	/*        ADC Enable            */
	SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSync>:

u8 ADC_u8GetDigitalValueSync(u8 Copy_u8ChannelNum,u16* Copy_Pu16ReturnedDigitalValue){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNum < 32) && (Copy_Pu16ReturnedDigitalValue != NULL)){
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSync+0x2e>
     d48:	5b c0       	rjmp	.+182    	; 0xe00 <ADC_u8GetDigitalValueSync+0xe4>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSync+0x38>
     d52:	56 c0       	rjmp	.+172    	; 0xe00 <ADC_u8GetDigitalValueSync+0xe4>
		/*  Clear Channel Region              */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 7e       	andi	r24, 0xE0	; 224
     d60:	8c 93       	st	X, r24
		/*  Select Channel Number             */
		ADC_u8_ADMUX_REG |=  Copy_u8ChannelNum;
     d62:	a7 e2       	ldi	r26, 0x27	; 39
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e2       	ldi	r30, 0x27	; 39
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	90 81       	ld	r25, Z
     d6c:	8e 81       	ldd	r24, Y+6	; 0x06
     d6e:	89 2b       	or	r24, r25
     d70:	8c 93       	st	X, r24
		/*  Start Conversion                  */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d72:	a6 e2       	ldi	r26, 0x26	; 38
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e6 e2       	ldi	r30, 0x26	; 38
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	8c 93       	st	X, r24
     d80:	0b c0       	rjmp	.+22     	; 0xd98 <ADC_u8GetDigitalValueSync+0x7c>
		/*  Wait For The Flag                 */

		while((Local_u32TimeOutCounter < 1000000UL) && (!GET_BIT(ADC_u8_ADCSRA_REG,4))){         //counter estimatation
			Local_u32TimeOutCounter++;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	ab 81       	ldd	r26, Y+3	; 0x03
     d88:	bc 81       	ldd	r27, Y+4	; 0x04
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	ab 83       	std	Y+3, r26	; 0x03
     d96:	bc 83       	std	Y+4, r27	; 0x04
		ADC_u8_ADMUX_REG |=  Copy_u8ChannelNum;
		/*  Start Conversion                  */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/*  Wait For The Flag                 */

		while((Local_u32TimeOutCounter < 1000000UL) && (!GET_BIT(ADC_u8_ADCSRA_REG,4))){         //counter estimatation
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	ab 81       	ldd	r26, Y+3	; 0x03
     d9e:	bc 81       	ldd	r27, Y+4	; 0x04
     da0:	80 34       	cpi	r24, 0x40	; 64
     da2:	22 e4       	ldi	r18, 0x42	; 66
     da4:	92 07       	cpc	r25, r18
     da6:	2f e0       	ldi	r18, 0x0F	; 15
     da8:	a2 07       	cpc	r26, r18
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	b2 07       	cpc	r27, r18
     dae:	58 f4       	brcc	.+22     	; 0xdc6 <ADC_u8GetDigitalValueSync+0xaa>
     db0:	e6 e2       	ldi	r30, 0x26	; 38
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	82 95       	swap	r24
     db8:	8f 70       	andi	r24, 0x0F	; 15
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	81 70       	andi	r24, 0x01	; 1
     dc0:	90 70       	andi	r25, 0x00	; 0
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	f1 f2       	breq	.-68     	; 0xd82 <ADC_u8GetDigitalValueSync+0x66>
			Local_u32TimeOutCounter++;
		}
		/*  Check Flag */
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)){
     dc6:	e6 e2       	ldi	r30, 0x26	; 38
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	82 95       	swap	r24
     dce:	8f 70       	andi	r24, 0x0F	; 15
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	81 70       	andi	r24, 0x01	; 1
     dd6:	90 70       	andi	r25, 0x00	; 0
     dd8:	88 23       	and	r24, r24
     dda:	81 f0       	breq	.+32     	; 0xdfc <ADC_u8GetDigitalValueSync+0xe0>
			/*  Clear Flag                        */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     ddc:	a6 e2       	ldi	r26, 0x26	; 38
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e6 e2       	ldi	r30, 0x26	; 38
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	8c 93       	st	X, r24

			/*  Read Digital Value                */
			*Copy_Pu16ReturnedDigitalValue = ADC_u16_ADCDATA_REG;
     dea:	e4 e2       	ldi	r30, 0x24	; 36
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	ef 81       	ldd	r30, Y+7	; 0x07
     df4:	f8 85       	ldd	r31, Y+8	; 0x08
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <ADC_u8GetDigitalValueSync+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
     dfc:	1d 82       	std	Y+5, r1	; 0x05
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <ADC_u8GetDigitalValueSync+0xe6>
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     e00:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e04:	28 96       	adiw	r28, 0x08	; 8
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <ADC_u8GetDigitalValueAsync>:

u8 ADC_u8GetDigitalValueAsync(u8 Copy_u8ChannelNum,void(*Copy_PtrFunc)(u16)){
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <ADC_u8GetDigitalValueAsync+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <ADC_u8GetDigitalValueAsync+0x8>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	8a 83       	std	Y+2, r24	; 0x02
     e24:	7c 83       	std	Y+4, r23	; 0x04
     e26:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	89 83       	std	Y+1, r24	; 0x01
	/* Check Channel Number , Check Pointers */
	if((ADC_u8BusyFlag == ADC_u8_NOT_BUSY) && (Copy_u8ChannelNum < 32) && (Copy_PtrFunc != NULL)){
     e2c:	80 91 b2 00 	lds	r24, 0x00B2
     e30:	88 23       	and	r24, r24
     e32:	71 f5       	brne	.+92     	; 0xe90 <ADC_u8GetDigitalValueAsync+0x7a>
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	80 32       	cpi	r24, 0x20	; 32
     e38:	58 f5       	brcc	.+86     	; 0xe90 <ADC_u8GetDigitalValueAsync+0x7a>
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	39 f1       	breq	.+78     	; 0xe90 <ADC_u8GetDigitalValueAsync+0x7a>
		/* Set Busy Flag into Busy Flag  */
		ADC_u8BusyFlag = ADC_u8_BUSY;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 b2 00 	sts	0x00B2, r24
		/* Update Global Pointers With input addresses        */
		ADC_PtrFunc = Copy_PtrFunc;
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	90 93 b1 00 	sts	0x00B1, r25
     e50:	80 93 b0 00 	sts	0x00B0, r24
		/* Clear Channel Register                */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e54:	a7 e2       	ldi	r26, 0x27	; 39
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e2       	ldi	r30, 0x27	; 39
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 7e       	andi	r24, 0xE0	; 224
     e60:	8c 93       	st	X, r24
		/* Select ADC Channel                    */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNum;
     e62:	a7 e2       	ldi	r26, 0x27	; 39
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e2       	ldi	r30, 0x27	; 39
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	90 81       	ld	r25, Z
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	89 2b       	or	r24, r25
     e70:	8c 93       	st	X, r24
		/* ADC Interrupt Enable                  */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e72:	a6 e2       	ldi	r26, 0x26	; 38
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e6 e2       	ldi	r30, 0x26	; 38
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	88 60       	ori	r24, 0x08	; 8
     e7e:	8c 93       	st	X, r24
		/* ADC Start Conversion                  */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e80:	a6 e2       	ldi	r26, 0x26	; 38
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e6 e2       	ldi	r30, 0x26	; 38
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 64       	ori	r24, 0x40	; 64
     e8c:	8c 93       	st	X, r24
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <ADC_u8GetDigitalValueAsync+0x7c>
		//Call ISR When Conversion is Complete
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     e90:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
}
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <__vector_16>:


void __vector_16(void) __attribute__((signal));
void __vector_16(void){
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	if((ADC_PtrFunc != NULL)){
     ecc:	80 91 b0 00 	lds	r24, 0x00B0
     ed0:	90 91 b1 00 	lds	r25, 0x00B1
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	99 f0       	breq	.+38     	; 0xefe <__vector_16+0x5c>
		/* Call Notification Function        */
		ADC_PtrFunc(ADC_u16_ADCDATA_REG);
     ed8:	20 91 b0 00 	lds	r18, 0x00B0
     edc:	30 91 b1 00 	lds	r19, 0x00B1
     ee0:	e4 e2       	ldi	r30, 0x24	; 36
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
     ee8:	f9 01       	movw	r30, r18
     eea:	09 95       	icall
		/* Disable Interrupt                 */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     eec:	a6 e2       	ldi	r26, 0x26	; 38
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e6 e2       	ldi	r30, 0x26	; 38
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	8c 93       	st	X, r24
		/* Set Busy Flag into Not Busy Flag  */
		ADC_u8BusyFlag = ADC_u8_NOT_BUSY;
     efa:	10 92 b2 00 	sts	0x00B2, r1
	}
}
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	ff 91       	pop	r31
     f04:	ef 91       	pop	r30
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	7f 91       	pop	r23
     f10:	6f 91       	pop	r22
     f12:	5f 91       	pop	r21
     f14:	4f 91       	pop	r20
     f16:	3f 91       	pop	r19
     f18:	2f 91       	pop	r18
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	/*INIT OF PINs Direction*/
DIO_u8_DDRA_REG =PRIVATE_u8_CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
     f2c:	ea e3       	ldi	r30, 0x3A	; 58
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	8f e3       	ldi	r24, 0x3F	; 63
     f32:	80 83       	st	Z, r24
		                         DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);

DIO_u8_DDRB_REG =PRIVATE_u8_CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
     f34:	e7 e3       	ldi	r30, 0x37	; 55
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	87 e0       	ldi	r24, 0x07	; 7
     f3a:	80 83       	st	Z, r24
		                         DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);

DIO_u8_DDRC_REG =PRIVATE_u8_CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
     f3c:	e4 e3       	ldi	r30, 0x34	; 52
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	10 82       	st	Z, r1
		                         DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);

DIO_u8_DDRD_REG =PRIVATE_u8_CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
     f42:	e1 e3       	ldi	r30, 0x31	; 49
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	8f e0       	ldi	r24, 0x0F	; 15
     f48:	80 83       	st	Z, r24
		                         DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);

        /*INIT OF PINs Values*/
DIO_u8_PORTA_REG =PRIVATE_u8_CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE,
     f4a:	eb e3       	ldi	r30, 0x3B	; 59
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	10 82       	st	Z, r1
		                          DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);

DIO_u8_PORTB_REG =PRIVATE_u8_CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE,
     f50:	e8 e3       	ldi	r30, 0x38	; 56
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	10 82       	st	Z, r1
		                          DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);

DIO_u8_PORTC_REG =PRIVATE_u8_CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE,
     f56:	e5 e3       	ldi	r30, 0x35	; 53
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	10 82       	st	Z, r1
		                          DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);

DIO_u8_PORTD_REG =PRIVATE_u8_CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE,
     f5c:	e2 e3       	ldi	r30, 0x32	; 50
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	10 82       	st	Z, r1
		                          DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);


}
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,u8 Copy_u8PinDirection) {
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	2e 97       	sbiw	r28, 0x0e	; 14
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	6b 83       	std	Y+3, r22	; 0x03
     f80:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	88 30       	cpi	r24, 0x08	; 8
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <DIO_u8SetPinDirection+0x26>
     f8c:	bc c1       	rjmp	.+888    	; 0x1306 <DIO_u8SetPinDirection+0x39e>
		switch (Copy_u8PortId) {
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3e 87       	std	Y+14, r19	; 0x0e
     f96:	2d 87       	std	Y+13, r18	; 0x0d
     f98:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_u8SetPinDirection+0x3c>
     fa2:	7d c0       	rjmp	.+250    	; 0x109e <DIO_u8SetPinDirection+0x136>
     fa4:	2d 85       	ldd	r18, Y+13	; 0x0d
     fa6:	3e 85       	ldd	r19, Y+14	; 0x0e
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	31 05       	cpc	r19, r1
     fac:	2c f4       	brge	.+10     	; 0xfb8 <DIO_u8SetPinDirection+0x50>
     fae:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	71 f0       	breq	.+28     	; 0xfd2 <DIO_u8SetPinDirection+0x6a>
     fb6:	a5 c1       	rjmp	.+842    	; 0x1302 <DIO_u8SetPinDirection+0x39a>
     fb8:	2d 85       	ldd	r18, Y+13	; 0x0d
     fba:	3e 85       	ldd	r19, Y+14	; 0x0e
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <DIO_u8SetPinDirection+0x5c>
     fc2:	d3 c0       	rjmp	.+422    	; 0x116a <DIO_u8SetPinDirection+0x202>
     fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	91 05       	cpc	r25, r1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <DIO_u8SetPinDirection+0x68>
     fce:	33 c1       	rjmp	.+614    	; 0x1236 <DIO_u8SetPinDirection+0x2ce>
     fd0:	98 c1       	rjmp	.+816    	; 0x1302 <DIO_u8SetPinDirection+0x39a>
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection) {
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	3c 87       	std	Y+12, r19	; 0x0c
     fda:	2b 87       	std	Y+11, r18	; 0x0b
     fdc:	8b 85       	ldd	r24, Y+11	; 0x0b
     fde:	9c 85       	ldd	r25, Y+12	; 0x0c
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	51 f0       	breq	.+20     	; 0xffa <DIO_u8SetPinDirection+0x92>
     fe6:	2b 85       	ldd	r18, Y+11	; 0x0b
     fe8:	3c 85       	ldd	r19, Y+12	; 0x0c
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	71 f1       	breq	.+92     	; 0x104c <DIO_u8SetPinDirection+0xe4>
     ff0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ff2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	a9 f0       	breq	.+42     	; 0x1022 <DIO_u8SetPinDirection+0xba>
     ff8:	50 c0       	rjmp	.+160    	; 0x109a <DIO_u8SetPinDirection+0x132>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     ffa:	aa e3       	ldi	r26, 0x3A	; 58
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ea e3       	ldi	r30, 0x3A	; 58
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_u8SetPinDirection+0xb0>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_u8SetPinDirection+0xac>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	73 c1       	rjmp	.+742    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
				break;
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1022:	aa e3       	ldi	r26, 0x3A	; 58
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ea e3       	ldi	r30, 0x3A	; 58
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_u8SetPinDirection+0xd8>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_u8SetPinDirection+0xd4>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	5e c1       	rjmp	.+700    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
				break;
			case DIO_u8_INPUT_UP:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    104c:	aa e3       	ldi	r26, 0x3A	; 58
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ea e3       	ldi	r30, 0x3A	; 58
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_u8SetPinDirection+0x100>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	2a 95       	dec	r18
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_u8SetPinDirection+0xfc>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_u8SetPinDirection+0x128>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_u8SetPinDirection+0x124>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	37 c1       	rjmp	.+622    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	35 c1       	rjmp	.+618    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
			}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection) {
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3a 87       	std	Y+10, r19	; 0x0a
    10a6:	29 87       	std	Y+9, r18	; 0x09
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	51 f0       	breq	.+20     	; 0x10c6 <DIO_u8SetPinDirection+0x15e>
    10b2:	29 85       	ldd	r18, Y+9	; 0x09
    10b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	71 f1       	breq	.+92     	; 0x1118 <DIO_u8SetPinDirection+0x1b0>
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	a9 f0       	breq	.+42     	; 0x10ee <DIO_u8SetPinDirection+0x186>
    10c4:	50 c0       	rjmp	.+160    	; 0x1166 <DIO_u8SetPinDirection+0x1fe>
				case DIO_u8_OUTPUT:
					SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    10c6:	a7 e3       	ldi	r26, 0x37	; 55
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e7 e3       	ldi	r30, 0x37	; 55
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_u8SetPinDirection+0x17c>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_u8SetPinDirection+0x178>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	0d c1       	rjmp	.+538    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
					break;
				case DIO_u8_INPUT_FLOATING:
					CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    10ee:	a7 e3       	ldi	r26, 0x37	; 55
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e3       	ldi	r30, 0x37	; 55
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_u8SetPinDirection+0x1a4>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_u8SetPinDirection+0x1a0>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	f8 c0       	rjmp	.+496    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
					break;
				case DIO_u8_INPUT_UP:
					CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1118:	a7 e3       	ldi	r26, 0x37	; 55
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e7 e3       	ldi	r30, 0x37	; 55
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_u8SetPinDirection+0x1cc>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	2a 95       	dec	r18
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_u8SetPinDirection+0x1c8>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
					SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    113e:	a8 e3       	ldi	r26, 0x38	; 56
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e8 e3       	ldi	r30, 0x38	; 56
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_u8SetPinDirection+0x1f4>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_u8SetPinDirection+0x1f0>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	d1 c0       	rjmp	.+418    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
					break;
				default:
					Local_u8ErrorState = STD_TYPES_NOK;
    1166:	19 82       	std	Y+1, r1	; 0x01
    1168:	cf c0       	rjmp	.+414    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
				}
				break;
				case DIO_u8_PORTC:
					switch (Copy_u8PinDirection) {
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	38 87       	std	Y+8, r19	; 0x08
    1172:	2f 83       	std	Y+7, r18	; 0x07
    1174:	8f 81       	ldd	r24, Y+7	; 0x07
    1176:	98 85       	ldd	r25, Y+8	; 0x08
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	51 f0       	breq	.+20     	; 0x1192 <DIO_u8SetPinDirection+0x22a>
    117e:	2f 81       	ldd	r18, Y+7	; 0x07
    1180:	38 85       	ldd	r19, Y+8	; 0x08
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	71 f1       	breq	.+92     	; 0x11e4 <DIO_u8SetPinDirection+0x27c>
    1188:	8f 81       	ldd	r24, Y+7	; 0x07
    118a:	98 85       	ldd	r25, Y+8	; 0x08
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	a9 f0       	breq	.+42     	; 0x11ba <DIO_u8SetPinDirection+0x252>
    1190:	50 c0       	rjmp	.+160    	; 0x1232 <DIO_u8SetPinDirection+0x2ca>
					case DIO_u8_OUTPUT:
						SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1192:	a4 e3       	ldi	r26, 0x34	; 52
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e4 e3       	ldi	r30, 0x34	; 52
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8SetPinDirection+0x248>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8SetPinDirection+0x244>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	a7 c0       	rjmp	.+334    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
						break;
					case DIO_u8_INPUT_FLOATING:
						CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    11ba:	a4 e3       	ldi	r26, 0x34	; 52
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e4 e3       	ldi	r30, 0x34	; 52
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8SetPinDirection+0x270>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8SetPinDirection+0x26c>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	92 c0       	rjmp	.+292    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
						break;
					case DIO_u8_INPUT_UP:
						CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    11e4:	a4 e3       	ldi	r26, 0x34	; 52
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_u8SetPinDirection+0x298>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	2a 95       	dec	r18
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_u8SetPinDirection+0x294>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
						SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    120a:	a5 e3       	ldi	r26, 0x35	; 53
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e3       	ldi	r30, 0x35	; 53
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_u8SetPinDirection+0x2c0>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_u8SetPinDirection+0x2bc>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	6b c0       	rjmp	.+214    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
						break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
    1232:	19 82       	std	Y+1, r1	; 0x01
    1234:	69 c0       	rjmp	.+210    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
					}
					break;
					case DIO_u8_PORTD:
						switch (Copy_u8PinDirection) {
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	2d 83       	std	Y+5, r18	; 0x05
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	51 f0       	breq	.+20     	; 0x125e <DIO_u8SetPinDirection+0x2f6>
    124a:	2d 81       	ldd	r18, Y+5	; 0x05
    124c:	3e 81       	ldd	r19, Y+6	; 0x06
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	71 f1       	breq	.+92     	; 0x12b0 <DIO_u8SetPinDirection+0x348>
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	9e 81       	ldd	r25, Y+6	; 0x06
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	a9 f0       	breq	.+42     	; 0x1286 <DIO_u8SetPinDirection+0x31e>
    125c:	50 c0       	rjmp	.+160    	; 0x12fe <DIO_u8SetPinDirection+0x396>
						case DIO_u8_OUTPUT:
							SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    125e:	a1 e3       	ldi	r26, 0x31	; 49
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_u8SetPinDirection+0x314>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_u8SetPinDirection+0x310>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	41 c0       	rjmp	.+130    	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
							break;
						case DIO_u8_INPUT_FLOATING:
							CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1286:	a1 e3       	ldi	r26, 0x31	; 49
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e1 e3       	ldi	r30, 0x31	; 49
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_u8SetPinDirection+0x33c>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_u8SetPinDirection+0x338>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	2c c0       	rjmp	.+88     	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
							break;
						case DIO_u8_INPUT_UP:
							CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    12b0:	a1 e3       	ldi	r26, 0x31	; 49
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e1 e3       	ldi	r30, 0x31	; 49
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_u8SetPinDirection+0x364>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	2a 95       	dec	r18
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_u8SetPinDirection+0x360>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
							SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_u8SetPinDirection+0x38c>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_u8SetPinDirection+0x388>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
							break;
						default:
							Local_u8ErrorState = STD_TYPES_NOK;
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
						}
						break;
						default:
							Local_u8ErrorState = STD_TYPES_NOK;
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <DIO_u8SetPinDirection+0x3a0>
		}

	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    1306:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1308:	89 81       	ldd	r24, Y+1	; 0x01
}
    130a:	2e 96       	adiw	r28, 0x0e	; 14
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	2e 97       	sbiw	r28, 0x0e	; 14
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	8a 83       	std	Y+2, r24	; 0x02
    1332:	6b 83       	std	Y+3, r22	; 0x03
    1334:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	08 f0       	brcs	.+2      	; 0x1342 <DIO_u8SetPinValue+0x26>
    1340:	0c c1       	rjmp	.+536    	; 0x155a <DIO_u8SetPinValue+0x23e>
		switch (Copy_u8PortId) {
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3e 87       	std	Y+14, r19	; 0x0e
    134a:	2d 87       	std	Y+13, r18	; 0x0d
    134c:	8d 85       	ldd	r24, Y+13	; 0x0d
    134e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <DIO_u8SetPinValue+0x3c>
    1356:	51 c0       	rjmp	.+162    	; 0x13fa <DIO_u8SetPinValue+0xde>
    1358:	2d 85       	ldd	r18, Y+13	; 0x0d
    135a:	3e 85       	ldd	r19, Y+14	; 0x0e
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	2c f4       	brge	.+10     	; 0x136c <DIO_u8SetPinValue+0x50>
    1362:	8d 85       	ldd	r24, Y+13	; 0x0d
    1364:	9e 85       	ldd	r25, Y+14	; 0x0e
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	71 f0       	breq	.+28     	; 0x1386 <DIO_u8SetPinValue+0x6a>
    136a:	f5 c0       	rjmp	.+490    	; 0x1556 <DIO_u8SetPinValue+0x23a>
    136c:	2d 85       	ldd	r18, Y+13	; 0x0d
    136e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <DIO_u8SetPinValue+0x5c>
    1376:	7b c0       	rjmp	.+246    	; 0x146e <DIO_u8SetPinValue+0x152>
    1378:	8d 85       	ldd	r24, Y+13	; 0x0d
    137a:	9e 85       	ldd	r25, Y+14	; 0x0e
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <DIO_u8SetPinValue+0x68>
    1382:	af c0       	rjmp	.+350    	; 0x14e2 <DIO_u8SetPinValue+0x1c6>
    1384:	e8 c0       	rjmp	.+464    	; 0x1556 <DIO_u8SetPinValue+0x23a>
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue) {
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3c 87       	std	Y+12, r19	; 0x0c
    138e:	2b 87       	std	Y+11, r18	; 0x0b
    1390:	8b 85       	ldd	r24, Y+11	; 0x0b
    1392:	9c 85       	ldd	r25, Y+12	; 0x0c
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	31 f0       	breq	.+12     	; 0x13a4 <DIO_u8SetPinValue+0x88>
    1398:	2b 85       	ldd	r18, Y+11	; 0x0b
    139a:	3c 85       	ldd	r19, Y+12	; 0x0c
    139c:	21 30       	cpi	r18, 0x01	; 1
    139e:	31 05       	cpc	r19, r1
    13a0:	b1 f0       	breq	.+44     	; 0x13ce <DIO_u8SetPinValue+0xb2>
    13a2:	29 c0       	rjmp	.+82     	; 0x13f6 <DIO_u8SetPinValue+0xda>
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    13a4:	ab e3       	ldi	r26, 0x3B	; 59
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e3       	ldi	r30, 0x3B	; 59
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_u8SetPinValue+0xa6>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_u8SetPinValue+0xa2>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	c7 c0       	rjmp	.+398    	; 0x155c <DIO_u8SetPinValue+0x240>
				break;
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_u8SetPinValue+0xd0>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_u8SetPinValue+0xcc>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	b3 c0       	rjmp	.+358    	; 0x155c <DIO_u8SetPinValue+0x240>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    13f6:	19 82       	std	Y+1, r1	; 0x01
    13f8:	b1 c0       	rjmp	.+354    	; 0x155c <DIO_u8SetPinValue+0x240>
			}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue) {
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3a 87       	std	Y+10, r19	; 0x0a
    1402:	29 87       	std	Y+9, r18	; 0x09
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	31 f0       	breq	.+12     	; 0x1418 <DIO_u8SetPinValue+0xfc>
    140c:	29 85       	ldd	r18, Y+9	; 0x09
    140e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	b1 f0       	breq	.+44     	; 0x1442 <DIO_u8SetPinValue+0x126>
    1416:	29 c0       	rjmp	.+82     	; 0x146a <DIO_u8SetPinValue+0x14e>
				case DIO_u8_LOW:
					CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_u8SetPinValue+0x11a>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_u8SetPinValue+0x116>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	8d c0       	rjmp	.+282    	; 0x155c <DIO_u8SetPinValue+0x240>
					break;
				case DIO_u8_HIGH:
					SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1442:	a8 e3       	ldi	r26, 0x38	; 56
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e8 e3       	ldi	r30, 0x38	; 56
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8SetPinValue+0x144>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8SetPinValue+0x140>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	79 c0       	rjmp	.+242    	; 0x155c <DIO_u8SetPinValue+0x240>
					break;
				default:
					Local_u8ErrorState = STD_TYPES_NOK;
    146a:	19 82       	std	Y+1, r1	; 0x01
    146c:	77 c0       	rjmp	.+238    	; 0x155c <DIO_u8SetPinValue+0x240>
				}
				break;

				case DIO_u8_PORTC:
					switch (Copy_u8PinValue) {
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	38 87       	std	Y+8, r19	; 0x08
    1476:	2f 83       	std	Y+7, r18	; 0x07
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	98 85       	ldd	r25, Y+8	; 0x08
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	31 f0       	breq	.+12     	; 0x148c <DIO_u8SetPinValue+0x170>
    1480:	2f 81       	ldd	r18, Y+7	; 0x07
    1482:	38 85       	ldd	r19, Y+8	; 0x08
    1484:	21 30       	cpi	r18, 0x01	; 1
    1486:	31 05       	cpc	r19, r1
    1488:	b1 f0       	breq	.+44     	; 0x14b6 <DIO_u8SetPinValue+0x19a>
    148a:	29 c0       	rjmp	.+82     	; 0x14de <DIO_u8SetPinValue+0x1c2>
					case DIO_u8_LOW:
						CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    148c:	a5 e3       	ldi	r26, 0x35	; 53
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e3       	ldi	r30, 0x35	; 53
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_u8SetPinValue+0x18e>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_u8SetPinValue+0x18a>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	53 c0       	rjmp	.+166    	; 0x155c <DIO_u8SetPinValue+0x240>
						break;
					case DIO_u8_HIGH:
						SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    14b6:	a5 e3       	ldi	r26, 0x35	; 53
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e3       	ldi	r30, 0x35	; 53
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8SetPinValue+0x1b8>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_u8SetPinValue+0x1b4>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	3f c0       	rjmp	.+126    	; 0x155c <DIO_u8SetPinValue+0x240>
						break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	3d c0       	rjmp	.+122    	; 0x155c <DIO_u8SetPinValue+0x240>
					}
					break;

					case DIO_u8_PORTD:
						switch (Copy_u8PinValue) {
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3e 83       	std	Y+6, r19	; 0x06
    14ea:	2d 83       	std	Y+5, r18	; 0x05
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	31 f0       	breq	.+12     	; 0x1500 <DIO_u8SetPinValue+0x1e4>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	21 30       	cpi	r18, 0x01	; 1
    14fa:	31 05       	cpc	r19, r1
    14fc:	b1 f0       	breq	.+44     	; 0x152a <DIO_u8SetPinValue+0x20e>
    14fe:	29 c0       	rjmp	.+82     	; 0x1552 <DIO_u8SetPinValue+0x236>
						case DIO_u8_LOW:
							CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1500:	a2 e3       	ldi	r26, 0x32	; 50
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e2 e3       	ldi	r30, 0x32	; 50
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_u8SetPinValue+0x202>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_u8SetPinValue+0x1fe>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	19 c0       	rjmp	.+50     	; 0x155c <DIO_u8SetPinValue+0x240>
							break;
						case DIO_u8_HIGH:
							SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    152a:	a2 e3       	ldi	r26, 0x32	; 50
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e2 e3       	ldi	r30, 0x32	; 50
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_u8SetPinValue+0x22c>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_u8SetPinValue+0x228>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	05 c0       	rjmp	.+10     	; 0x155c <DIO_u8SetPinValue+0x240>
							break;
						default:
							Local_u8ErrorState = STD_TYPES_NOK;
    1552:	19 82       	std	Y+1, r1	; 0x01
    1554:	03 c0       	rjmp	.+6      	; 0x155c <DIO_u8SetPinValue+0x240>
						}
						break;
						default:
							Local_u8ErrorState = STD_TYPES_NOK;
    1556:	19 82       	std	Y+1, r1	; 0x01
    1558:	01 c0       	rjmp	.+2      	; 0x155c <DIO_u8SetPinValue+0x240>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    155a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    155c:	89 81       	ldd	r24, Y+1	; 0x01
}
    155e:	2e 96       	adiw	r28, 0x0e	; 14
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId,u8 *Copy_Pu8ReturnedPinValue) {
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	27 97       	sbiw	r28, 0x07	; 7
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	8a 83       	std	Y+2, r24	; 0x02
    1586:	6b 83       	std	Y+3, r22	; 0x03
    1588:	5d 83       	std	Y+5, r21	; 0x05
    158a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_Pu8ReturnedPinValue!=NULL)) {
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 30       	cpi	r24, 0x08	; 8
    1594:	08 f0       	brcs	.+2      	; 0x1598 <DIO_u8GetPinValue+0x28>
    1596:	78 c0       	rjmp	.+240    	; 0x1688 <DIO_u8GetPinValue+0x118>
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	09 f4       	brne	.+2      	; 0x15a2 <DIO_u8GetPinValue+0x32>
    15a0:	73 c0       	rjmp	.+230    	; 0x1688 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8PortId){
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3f 83       	std	Y+7, r19	; 0x07
    15aa:	2e 83       	std	Y+6, r18	; 0x06
    15ac:	4e 81       	ldd	r20, Y+6	; 0x06
    15ae:	5f 81       	ldd	r21, Y+7	; 0x07
    15b0:	41 30       	cpi	r20, 0x01	; 1
    15b2:	51 05       	cpc	r21, r1
    15b4:	59 f1       	breq	.+86     	; 0x160c <DIO_u8GetPinValue+0x9c>
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06
    15b8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	91 05       	cpc	r25, r1
    15be:	34 f4       	brge	.+12     	; 0x15cc <DIO_u8GetPinValue+0x5c>
    15c0:	2e 81       	ldd	r18, Y+6	; 0x06
    15c2:	3f 81       	ldd	r19, Y+7	; 0x07
    15c4:	21 15       	cp	r18, r1
    15c6:	31 05       	cpc	r19, r1
    15c8:	69 f0       	breq	.+26     	; 0x15e4 <DIO_u8GetPinValue+0x74>
    15ca:	5c c0       	rjmp	.+184    	; 0x1684 <DIO_u8GetPinValue+0x114>
    15cc:	4e 81       	ldd	r20, Y+6	; 0x06
    15ce:	5f 81       	ldd	r21, Y+7	; 0x07
    15d0:	42 30       	cpi	r20, 0x02	; 2
    15d2:	51 05       	cpc	r21, r1
    15d4:	79 f1       	breq	.+94     	; 0x1634 <DIO_u8GetPinValue+0xc4>
    15d6:	8e 81       	ldd	r24, Y+6	; 0x06
    15d8:	9f 81       	ldd	r25, Y+7	; 0x07
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <DIO_u8GetPinValue+0x72>
    15e0:	3d c0       	rjmp	.+122    	; 0x165c <DIO_u8GetPinValue+0xec>
    15e2:	50 c0       	rjmp	.+160    	; 0x1684 <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTA:
			*Copy_Pu8ReturnedPinValue=GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a9 01       	movw	r20, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_u8GetPinValue+0x8c>
    15f8:	55 95       	asr	r21
    15fa:	47 95       	ror	r20
    15fc:	8a 95       	dec	r24
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_u8GetPinValue+0x88>
    1600:	ca 01       	movw	r24, r20
    1602:	81 70       	andi	r24, 0x01	; 1
    1604:	ec 81       	ldd	r30, Y+4	; 0x04
    1606:	fd 81       	ldd	r31, Y+5	; 0x05
    1608:	80 83       	st	Z, r24
    160a:	3f c0       	rjmp	.+126    	; 0x168a <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTB:
			*Copy_Pu8ReturnedPinValue=GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    160c:	e6 e3       	ldi	r30, 0x36	; 54
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_u8GetPinValue+0xb4>
    1620:	55 95       	asr	r21
    1622:	47 95       	ror	r20
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <DIO_u8GetPinValue+0xb0>
    1628:	ca 01       	movw	r24, r20
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	ec 81       	ldd	r30, Y+4	; 0x04
    162e:	fd 81       	ldd	r31, Y+5	; 0x05
    1630:	80 83       	st	Z, r24
    1632:	2b c0       	rjmp	.+86     	; 0x168a <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTC:
			*Copy_Pu8ReturnedPinValue=GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1634:	e3 e3       	ldi	r30, 0x33	; 51
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_u8GetPinValue+0xdc>
    1648:	55 95       	asr	r21
    164a:	47 95       	ror	r20
    164c:	8a 95       	dec	r24
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_u8GetPinValue+0xd8>
    1650:	ca 01       	movw	r24, r20
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	ec 81       	ldd	r30, Y+4	; 0x04
    1656:	fd 81       	ldd	r31, Y+5	; 0x05
    1658:	80 83       	st	Z, r24
    165a:	17 c0       	rjmp	.+46     	; 0x168a <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTD:
			*Copy_Pu8ReturnedPinValue=GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    165c:	e0 e3       	ldi	r30, 0x30	; 48
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a9 01       	movw	r20, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_u8GetPinValue+0x104>
    1670:	55 95       	asr	r21
    1672:	47 95       	ror	r20
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_u8GetPinValue+0x100>
    1678:	ca 01       	movw	r24, r20
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	ec 81       	ldd	r30, Y+4	; 0x04
    167e:	fd 81       	ldd	r31, Y+5	; 0x05
    1680:	80 83       	st	Z, r24
    1682:	03 c0       	rjmp	.+6      	; 0x168a <DIO_u8GetPinValue+0x11a>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	01 c0       	rjmp	.+2      	; 0x168a <DIO_u8GetPinValue+0x11a>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    1688:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    168a:	89 81       	ldd	r24, Y+1	; 0x01
}
    168c:	27 96       	adiw	r28, 0x07	; 7
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection) {
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	2d 97       	sbiw	r28, 0x0d	; 13
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	8a 83       	std	Y+2, r24	; 0x02
    16b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId){
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 87       	std	Y+13, r19	; 0x0d
    16c2:	2c 87       	std	Y+12, r18	; 0x0c
    16c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    16c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <DIO_u8SetPortDirection+0x32>
    16ce:	3e c0       	rjmp	.+124    	; 0x174c <DIO_u8SetPortDirection+0xae>
    16d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <DIO_u8SetPortDirection+0x46>
    16da:	8c 85       	ldd	r24, Y+12	; 0x0c
    16dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	71 f0       	breq	.+28     	; 0x16fe <DIO_u8SetPortDirection+0x60>
    16e2:	a9 c0       	rjmp	.+338    	; 0x1836 <DIO_u8SetPortDirection+0x198>
    16e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <DIO_u8SetPortDirection+0x52>
    16ee:	55 c0       	rjmp	.+170    	; 0x179a <DIO_u8SetPortDirection+0xfc>
    16f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    16f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <DIO_u8SetPortDirection+0x5e>
    16fa:	76 c0       	rjmp	.+236    	; 0x17e8 <DIO_u8SetPortDirection+0x14a>
    16fc:	9c c0       	rjmp	.+312    	; 0x1836 <DIO_u8SetPortDirection+0x198>
	case DIO_u8_PORTA:
		switch(Copy_u8PortDirection){
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	3b 87       	std	Y+11, r19	; 0x0b
    1706:	2a 87       	std	Y+10, r18	; 0x0a
    1708:	8a 85       	ldd	r24, Y+10	; 0x0a
    170a:	9b 85       	ldd	r25, Y+11	; 0x0b
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	91 05       	cpc	r25, r1
    1710:	51 f0       	breq	.+20     	; 0x1726 <DIO_u8SetPortDirection+0x88>
    1712:	2a 85       	ldd	r18, Y+10	; 0x0a
    1714:	3b 85       	ldd	r19, Y+11	; 0x0b
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	31 05       	cpc	r19, r1
    171a:	71 f0       	breq	.+28     	; 0x1738 <DIO_u8SetPortDirection+0x9a>
    171c:	8a 85       	ldd	r24, Y+10	; 0x0a
    171e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	31 f0       	breq	.+12     	; 0x1730 <DIO_u8SetPortDirection+0x92>
    1724:	11 c0       	rjmp	.+34     	; 0x1748 <DIO_u8SetPortDirection+0xaa>
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG=0xff;
    1726:	ea e3       	ldi	r30, 0x3A	; 58
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8f ef       	ldi	r24, 0xFF	; 255
    172c:	80 83       	st	Z, r24
    172e:	84 c0       	rjmp	.+264    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
			break;
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRA_REG=0x00;
    1730:	ea e3       	ldi	r30, 0x3A	; 58
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	10 82       	st	Z, r1
    1736:	80 c0       	rjmp	.+256    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
			break;
		case DIO_u8_INPUT_UP:
			DIO_u8_DDRA_REG=0x00;
    1738:	ea e3       	ldi	r30, 0x3A	; 58
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	10 82       	st	Z, r1
			DIO_u8_PORTA_REG=0xff;
    173e:	eb e3       	ldi	r30, 0x3B	; 59
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	80 83       	st	Z, r24
    1746:	78 c0       	rjmp	.+240    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1748:	19 82       	std	Y+1, r1	; 0x01
    174a:	76 c0       	rjmp	.+236    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
		}
		break;
		case DIO_u8_PORTB:
			switch(Copy_u8PortDirection){
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	39 87       	std	Y+9, r19	; 0x09
    1754:	28 87       	std	Y+8, r18	; 0x08
    1756:	88 85       	ldd	r24, Y+8	; 0x08
    1758:	99 85       	ldd	r25, Y+9	; 0x09
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	91 05       	cpc	r25, r1
    175e:	51 f0       	breq	.+20     	; 0x1774 <DIO_u8SetPortDirection+0xd6>
    1760:	28 85       	ldd	r18, Y+8	; 0x08
    1762:	39 85       	ldd	r19, Y+9	; 0x09
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	71 f0       	breq	.+28     	; 0x1786 <DIO_u8SetPortDirection+0xe8>
    176a:	88 85       	ldd	r24, Y+8	; 0x08
    176c:	99 85       	ldd	r25, Y+9	; 0x09
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	31 f0       	breq	.+12     	; 0x177e <DIO_u8SetPortDirection+0xe0>
    1772:	11 c0       	rjmp	.+34     	; 0x1796 <DIO_u8SetPortDirection+0xf8>
			case DIO_u8_OUTPUT:
				DIO_u8_DDRB_REG=0xff;
    1774:	e7 e3       	ldi	r30, 0x37	; 55
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	80 83       	st	Z, r24
    177c:	5d c0       	rjmp	.+186    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
				break;
			case DIO_u8_INPUT_FLOATING:
				DIO_u8_DDRB_REG=0x00;
    177e:	e7 e3       	ldi	r30, 0x37	; 55
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	10 82       	st	Z, r1
    1784:	59 c0       	rjmp	.+178    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
				break;
			case DIO_u8_INPUT_UP:
				DIO_u8_DDRB_REG=0x00;
    1786:	e7 e3       	ldi	r30, 0x37	; 55
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	10 82       	st	Z, r1
				DIO_u8_PORTB_REG=0xff;
    178c:	e8 e3       	ldi	r30, 0x38	; 56
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	80 83       	st	Z, r24
    1794:	51 c0       	rjmp	.+162    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1796:	19 82       	std	Y+1, r1	; 0x01
    1798:	4f c0       	rjmp	.+158    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
			}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection){
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3f 83       	std	Y+7, r19	; 0x07
    17a2:	2e 83       	std	Y+6, r18	; 0x06
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	51 f0       	breq	.+20     	; 0x17c2 <DIO_u8SetPortDirection+0x124>
    17ae:	2e 81       	ldd	r18, Y+6	; 0x06
    17b0:	3f 81       	ldd	r19, Y+7	; 0x07
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	71 f0       	breq	.+28     	; 0x17d4 <DIO_u8SetPortDirection+0x136>
    17b8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ba:	9f 81       	ldd	r25, Y+7	; 0x07
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	31 f0       	breq	.+12     	; 0x17cc <DIO_u8SetPortDirection+0x12e>
    17c0:	11 c0       	rjmp	.+34     	; 0x17e4 <DIO_u8SetPortDirection+0x146>
				case DIO_u8_OUTPUT:
					DIO_u8_DDRC_REG=0xff;
    17c2:	e4 e3       	ldi	r30, 0x34	; 52
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	80 83       	st	Z, r24
    17ca:	36 c0       	rjmp	.+108    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
					break;
				case DIO_u8_INPUT_FLOATING:
					DIO_u8_DDRC_REG=0x00;
    17cc:	e4 e3       	ldi	r30, 0x34	; 52
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	10 82       	st	Z, r1
    17d2:	32 c0       	rjmp	.+100    	; 0x1838 <DIO_u8SetPortDirection+0x19a>
					break;
				case DIO_u8_INPUT_UP:
					DIO_u8_DDRC_REG=0x00;
    17d4:	e4 e3       	ldi	r30, 0x34	; 52
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	10 82       	st	Z, r1
					DIO_u8_PORTC_REG=0xff;
    17da:	e5 e3       	ldi	r30, 0x35	; 53
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	80 83       	st	Z, r24
    17e2:	2a c0       	rjmp	.+84     	; 0x1838 <DIO_u8SetPortDirection+0x19a>
					break;
				default:
					Local_u8ErrorState = STD_TYPES_NOK;
    17e4:	19 82       	std	Y+1, r1	; 0x01
    17e6:	28 c0       	rjmp	.+80     	; 0x1838 <DIO_u8SetPortDirection+0x19a>
				}
				break;
				case DIO_u8_PORTD:
					switch(Copy_u8PortDirection){
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	3d 83       	std	Y+5, r19	; 0x05
    17f0:	2c 83       	std	Y+4, r18	; 0x04
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	9d 81       	ldd	r25, Y+5	; 0x05
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	91 05       	cpc	r25, r1
    17fa:	51 f0       	breq	.+20     	; 0x1810 <DIO_u8SetPortDirection+0x172>
    17fc:	2c 81       	ldd	r18, Y+4	; 0x04
    17fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1800:	22 30       	cpi	r18, 0x02	; 2
    1802:	31 05       	cpc	r19, r1
    1804:	71 f0       	breq	.+28     	; 0x1822 <DIO_u8SetPortDirection+0x184>
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	31 f0       	breq	.+12     	; 0x181a <DIO_u8SetPortDirection+0x17c>
    180e:	11 c0       	rjmp	.+34     	; 0x1832 <DIO_u8SetPortDirection+0x194>
					case DIO_u8_OUTPUT:
						DIO_u8_DDRD_REG=0xff;
    1810:	e1 e3       	ldi	r30, 0x31	; 49
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	80 83       	st	Z, r24
    1818:	0f c0       	rjmp	.+30     	; 0x1838 <DIO_u8SetPortDirection+0x19a>
						break;
					case DIO_u8_INPUT_FLOATING:
						DIO_u8_DDRD_REG=0x00;
    181a:	e1 e3       	ldi	r30, 0x31	; 49
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	10 82       	st	Z, r1
    1820:	0b c0       	rjmp	.+22     	; 0x1838 <DIO_u8SetPortDirection+0x19a>
						break;
					case DIO_u8_INPUT_UP:
						DIO_u8_DDRD_REG=0x00;
    1822:	e1 e3       	ldi	r30, 0x31	; 49
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	10 82       	st	Z, r1
						DIO_u8_PORTD_REG=0xff;
    1828:	e2 e3       	ldi	r30, 0x32	; 50
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8f ef       	ldi	r24, 0xFF	; 255
    182e:	80 83       	st	Z, r24
    1830:	03 c0       	rjmp	.+6      	; 0x1838 <DIO_u8SetPortDirection+0x19a>
						break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
    1832:	19 82       	std	Y+1, r1	; 0x01
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <DIO_u8SetPortDirection+0x19a>
					}
					break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
    1836:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1838:	89 81       	ldd	r24, Y+1	; 0x01
}
    183a:	2d 96       	adiw	r28, 0x0d	; 13
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue) {
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <DIO_u8SetPortValue+0x6>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <DIO_u8SetPortValue+0x8>
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	8a 83       	std	Y+2, r24	; 0x02
    185c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortId){
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	3d 83       	std	Y+5, r19	; 0x05
    186a:	2c 83       	std	Y+4, r18	; 0x04
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	91 05       	cpc	r25, r1
    1874:	d1 f0       	breq	.+52     	; 0x18aa <DIO_u8SetPortValue+0x5e>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	2c f4       	brge	.+10     	; 0x188a <DIO_u8SetPortValue+0x3e>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	61 f0       	breq	.+24     	; 0x18a0 <DIO_u8SetPortValue+0x54>
    1888:	1f c0       	rjmp	.+62     	; 0x18c8 <DIO_u8SetPortValue+0x7c>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	81 f0       	breq	.+32     	; 0x18b4 <DIO_u8SetPortValue+0x68>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	81 f0       	breq	.+32     	; 0x18be <DIO_u8SetPortValue+0x72>
    189e:	14 c0       	rjmp	.+40     	; 0x18c8 <DIO_u8SetPortValue+0x7c>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG=Copy_u8PortValue;
    18a0:	eb e3       	ldi	r30, 0x3B	; 59
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	80 83       	st	Z, r24
    18a8:	10 c0       	rjmp	.+32     	; 0x18ca <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG=Copy_u8PortValue;
    18aa:	e8 e3       	ldi	r30, 0x38	; 56
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	80 83       	st	Z, r24
    18b2:	0b c0       	rjmp	.+22     	; 0x18ca <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG=Copy_u8PortValue;
    18b4:	e5 e3       	ldi	r30, 0x35	; 53
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	80 83       	st	Z, r24
    18bc:	06 c0       	rjmp	.+12     	; 0x18ca <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG=Copy_u8PortValue;
    18be:	e2 e3       	ldi	r30, 0x32	; 50
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	80 83       	st	Z, r24
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <DIO_u8SetPortValue+0x7e>
		break;
	default:
		Local_u8ErrorState = STD_TYPES_NOK;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_Pu8ReturnedPortValue) {
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <DIO_u8GetPortValue+0x6>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <DIO_u8GetPortValue+0x8>
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <DIO_u8GetPortValue+0xa>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	8a 83       	std	Y+2, r24	; 0x02
    18ec:	7c 83       	std	Y+4, r23	; 0x04
    18ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8ReturnedPortValue!=NULL){
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	e9 f1       	breq	.+122    	; 0x1976 <DIO_u8GetPortValue+0x9a>
		switch (Copy_u8PortId){
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3e 83       	std	Y+6, r19	; 0x06
    1904:	2d 83       	std	Y+5, r18	; 0x05
    1906:	8d 81       	ldd	r24, Y+5	; 0x05
    1908:	9e 81       	ldd	r25, Y+6	; 0x06
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	91 05       	cpc	r25, r1
    190e:	e1 f0       	breq	.+56     	; 0x1948 <DIO_u8GetPortValue+0x6c>
    1910:	2d 81       	ldd	r18, Y+5	; 0x05
    1912:	3e 81       	ldd	r19, Y+6	; 0x06
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	2c f4       	brge	.+10     	; 0x1924 <DIO_u8GetPortValue+0x48>
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	61 f0       	breq	.+24     	; 0x193a <DIO_u8GetPortValue+0x5e>
    1922:	27 c0       	rjmp	.+78     	; 0x1972 <DIO_u8GetPortValue+0x96>
    1924:	2d 81       	ldd	r18, Y+5	; 0x05
    1926:	3e 81       	ldd	r19, Y+6	; 0x06
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	a1 f0       	breq	.+40     	; 0x1956 <DIO_u8GetPortValue+0x7a>
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	83 30       	cpi	r24, 0x03	; 3
    1934:	91 05       	cpc	r25, r1
    1936:	b1 f0       	breq	.+44     	; 0x1964 <DIO_u8GetPortValue+0x88>
    1938:	1c c0       	rjmp	.+56     	; 0x1972 <DIO_u8GetPortValue+0x96>
		case DIO_u8_PORTA:
			*Copy_Pu8ReturnedPortValue=DIO_u8_PINA_REG;
    193a:	e9 e3       	ldi	r30, 0x39	; 57
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	eb 81       	ldd	r30, Y+3	; 0x03
    1942:	fc 81       	ldd	r31, Y+4	; 0x04
    1944:	80 83       	st	Z, r24
    1946:	18 c0       	rjmp	.+48     	; 0x1978 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTB:
			*Copy_Pu8ReturnedPortValue=DIO_u8_PINB_REG;
    1948:	e6 e3       	ldi	r30, 0x36	; 54
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	eb 81       	ldd	r30, Y+3	; 0x03
    1950:	fc 81       	ldd	r31, Y+4	; 0x04
    1952:	80 83       	st	Z, r24
    1954:	11 c0       	rjmp	.+34     	; 0x1978 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTC:
			*Copy_Pu8ReturnedPortValue=DIO_u8_PINC_REG;
    1956:	e3 e3       	ldi	r30, 0x33	; 51
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	eb 81       	ldd	r30, Y+3	; 0x03
    195e:	fc 81       	ldd	r31, Y+4	; 0x04
    1960:	80 83       	st	Z, r24
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTD:
			*Copy_Pu8ReturnedPortValue=DIO_u8_PIND_REG;
    1964:	e0 e3       	ldi	r30, 0x30	; 48
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	eb 81       	ldd	r30, Y+3	; 0x03
    196c:	fc 81       	ldd	r31, Y+4	; 0x04
    196e:	80 83       	st	Z, r24
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <DIO_u8GetPortValue+0x9c>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1972:	19 82       	std	Y+1, r1	; 0x01
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <DIO_u8GetPortValue+0x9c>
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1976:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
}
    197a:	26 96       	adiw	r28, 0x06	; 6
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <DIO_u8TogPinValue>:

u8 DIO_u8TogPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId) {
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <DIO_u8TogPinValue+0x6>
    1992:	00 d0       	rcall	.+0      	; 0x1994 <DIO_u8TogPinValue+0x8>
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    199e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 30       	cpi	r24, 0x08	; 8
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <DIO_u8TogPinValue+0x1c>
    19a6:	72 c0       	rjmp	.+228    	; 0x1a8c <DIO_u8TogPinValue+0x100>
		Local_u8ErrorState = STD_TYPES_OK;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortId){
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	3d 83       	std	Y+5, r19	; 0x05
    19b4:	2c 83       	std	Y+4, r18	; 0x04
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	91 05       	cpc	r25, r1
    19be:	49 f1       	breq	.+82     	; 0x1a12 <DIO_u8TogPinValue+0x86>
    19c0:	2c 81       	ldd	r18, Y+4	; 0x04
    19c2:	3d 81       	ldd	r19, Y+5	; 0x05
    19c4:	22 30       	cpi	r18, 0x02	; 2
    19c6:	31 05       	cpc	r19, r1
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <DIO_u8TogPinValue+0x48>
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	61 f0       	breq	.+24     	; 0x19ea <DIO_u8TogPinValue+0x5e>
    19d2:	5b c0       	rjmp	.+182    	; 0x1a8a <DIO_u8TogPinValue+0xfe>
    19d4:	2c 81       	ldd	r18, Y+4	; 0x04
    19d6:	3d 81       	ldd	r19, Y+5	; 0x05
    19d8:	22 30       	cpi	r18, 0x02	; 2
    19da:	31 05       	cpc	r19, r1
    19dc:	71 f1       	breq	.+92     	; 0x1a3a <DIO_u8TogPinValue+0xae>
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	9d 81       	ldd	r25, Y+5	; 0x05
    19e2:	83 30       	cpi	r24, 0x03	; 3
    19e4:	91 05       	cpc	r25, r1
    19e6:	e9 f1       	breq	.+122    	; 0x1a62 <DIO_u8TogPinValue+0xd6>
    19e8:	50 c0       	rjmp	.+160    	; 0x1a8a <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTA:
			TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    19ea:	ab e3       	ldi	r26, 0x3B	; 59
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	eb e3       	ldi	r30, 0x3B	; 59
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <DIO_u8TogPinValue+0x7c>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <DIO_u8TogPinValue+0x78>
    1a0c:	84 27       	eor	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	3d c0       	rjmp	.+122    	; 0x1a8c <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTB:
			TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    1a12:	a8 e3       	ldi	r26, 0x38	; 56
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_u8TogPinValue+0xa4>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_u8TogPinValue+0xa0>
    1a34:	84 27       	eor	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	29 c0       	rjmp	.+82     	; 0x1a8c <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTC:
			TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    1a3a:	a5 e3       	ldi	r26, 0x35	; 53
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e5 e3       	ldi	r30, 0x35	; 53
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_u8TogPinValue+0xcc>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <DIO_u8TogPinValue+0xc8>
    1a5c:	84 27       	eor	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	15 c0       	rjmp	.+42     	; 0x1a8c <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTD:
			TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    1a62:	a2 e3       	ldi	r26, 0x32	; 50
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e2 e3       	ldi	r30, 0x32	; 50
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_u8TogPinValue+0xf4>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_u8TogPinValue+0xf0>
    1a84:	84 27       	eor	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <DIO_u8TogPinValue+0x100>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <GI_voidEnable>:
#include "BIT_MATH.h"

#include "GI_interface.h"
#include "GI_private.h"

void GI_voidEnable(void){
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_STATUS_REG,7);
    1aa6:	af e5       	ldi	r26, 0x5F	; 95
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ef e5       	ldi	r30, 0x5F	; 95
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 68       	ori	r24, 0x80	; 128
    1ab2:	8c 93       	st	X, r24
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <GI_voidDisable>:

void GI_voidDisable(void){
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_STATUS_REG,7);
    1ac2:	af e5       	ldi	r26, 0x5F	; 95
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	ef e5       	ldi	r30, 0x5F	; 95
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 77       	andi	r24, 0x7F	; 127
    1ace:	8c 93       	st	X, r24
}
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"



void LCD_voidInit(void){
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	c4 56       	subi	r28, 0x64	; 100
    1ae4:	d0 40       	sbci	r29, 0x00	; 0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	fe 01       	movw	r30, r28
    1af2:	ef 59       	subi	r30, 0x9F	; 159
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	ac e0       	ldi	r26, 0x0C	; 12
    1afc:	b2 e4       	ldi	r27, 0x42	; 66
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	8e 01       	movw	r16, r28
    1b08:	03 5a       	subi	r16, 0xA3	; 163
    1b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ef 59       	subi	r30, 0x9F	; 159
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a ef       	ldi	r20, 0xFA	; 250
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 83       	st	Z, r24
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	a2 83       	std	Z+2, r26	; 0x02
    1b32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b34:	fe 01       	movw	r30, r28
    1b36:	e3 5a       	subi	r30, 0xA3	; 163
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	44 f4       	brge	.+16     	; 0x1b62 <LCD_voidInit+0x8c>
		__ticks = 1;
    1b52:	fe 01       	movw	r30, r28
    1b54:	e5 5a       	subi	r30, 0xA5	; 165
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
    1b60:	64 c0       	rjmp	.+200    	; 0x1c2a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1b62:	fe 01       	movw	r30, r28
    1b64:	e3 5a       	subi	r30, 0xA3	; 163
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	0c f0       	brlt	.+2      	; 0x1b82 <LCD_voidInit+0xac>
    1b80:	43 c0       	rjmp	.+134    	; 0x1c08 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b82:	fe 01       	movw	r30, r28
    1b84:	ef 59       	subi	r30, 0x9F	; 159
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e2       	ldi	r20, 0x20	; 32
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	8e 01       	movw	r16, r28
    1ba2:	05 5a       	subi	r16, 0xA5	; 165
    1ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	80 83       	st	Z, r24
    1bb8:	1f c0       	rjmp	.+62     	; 0x1bf8 <LCD_voidInit+0x122>
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e7 5a       	subi	r30, 0xA7	; 167
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	88 ec       	ldi	r24, 0xC8	; 200
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e7 5a       	subi	r30, 0xA7	; 167
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_voidInit+0xfc>
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e7 5a       	subi	r30, 0xA7	; 167
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	de 01       	movw	r26, r28
    1be2:	a5 5a       	subi	r26, 0xA5	; 165
    1be4:	bf 4f       	sbci	r27, 0xFF	; 255
    1be6:	fe 01       	movw	r30, r28
    1be8:	e5 5a       	subi	r30, 0xA5	; 165
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	91 81       	ldd	r25, Z+1	; 0x01
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	11 96       	adiw	r26, 0x01	; 1
    1bf4:	9c 93       	st	X, r25
    1bf6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e5 5a       	subi	r30, 0xA5	; 165
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	d1 f6       	brne	.-76     	; 0x1bba <LCD_voidInit+0xe4>
    1c06:	27 c0       	rjmp	.+78     	; 0x1c56 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	8e 01       	movw	r16, r28
    1c0a:	05 5a       	subi	r16, 0xA5	; 165
    1c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e3 5a       	subi	r30, 0xA3	; 163
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	f8 01       	movw	r30, r16
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	de 01       	movw	r26, r28
    1c2c:	a9 5a       	subi	r26, 0xA9	; 169
    1c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c30:	fe 01       	movw	r30, r28
    1c32:	e5 5a       	subi	r30, 0xA5	; 165
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	8d 93       	st	X+, r24
    1c3c:	9c 93       	st	X, r25
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e9 5a       	subi	r30, 0xA9	; 169
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_voidInit+0x172>
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e9 5a       	subi	r30, 0xA9	; 169
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
	/* Send Function Set */
	LCD_voidWriteCmnd(0b00111000);
#elif (LCD_u8_MODE == LCD_u8_4_BIT_MODE)
	/* Send First Step of Function Set Command */
	/*1- Rs = 0 Select Command Register */
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	/*2- Rw = 0 Write Operation      */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_u8_DATA_PORT,0b00100000);
    1c6a:	83 e0       	ldi	r24, 0x03	; 3
    1c6c:	60 e2       	ldi	r22, 0x20	; 32
    1c6e:	0e 94 26 0c 	call	0x184c	; 0x184c <DIO_u8SetPortValue>
	/*         Send Enable Pulse         */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	62 e0       	ldi	r22, 0x02	; 2
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	ed 5a       	subi	r30, 0xAD	; 173
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	80 83       	st	Z, r24
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	a2 83       	std	Z+2, r26	; 0x02
    1c90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c92:	8e 01       	movw	r16, r28
    1c94:	01 5b       	subi	r16, 0xB1	; 177
    1c96:	1f 4f       	sbci	r17, 0xFF	; 255
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ed 5a       	subi	r30, 0xAD	; 173
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	2b ea       	ldi	r18, 0xAB	; 171
    1ca8:	3a ea       	ldi	r19, 0xAA	; 170
    1caa:	4a e2       	ldi	r20, 0x2A	; 42
    1cac:	50 e4       	ldi	r21, 0x40	; 64
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	80 83       	st	Z, r24
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	a2 83       	std	Z+2, r26	; 0x02
    1cbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e1 5b       	subi	r30, 0xB1	; 177
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	34 f4       	brge	.+12     	; 0x1cea <LCD_voidInit+0x214>
		__ticks = 1;
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e2 5b       	subi	r30, 0xB2	; 178
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	80 83       	st	Z, r24
    1ce8:	e0 c0       	rjmp	.+448    	; 0x1eaa <LCD_voidInit+0x3d4>
	else if (__tmp > 255)
    1cea:	fe 01       	movw	r30, r28
    1cec:	e1 5b       	subi	r30, 0xB1	; 177
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	53 e4       	ldi	r21, 0x43	; 67
    1d00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	0c f0       	brlt	.+2      	; 0x1d0a <LCD_voidInit+0x234>
    1d08:	c0 c0       	rjmp	.+384    	; 0x1e8a <LCD_voidInit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ed 5a       	subi	r30, 0xAD	; 173
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	54 e4       	ldi	r21, 0x44	; 68
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e6 5b       	subi	r30, 0xB6	; 182
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 83       	st	Z, r24
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	a2 83       	std	Z+2, r26	; 0x02
    1d34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	8e 01       	movw	r16, r28
    1d38:	0a 5b       	subi	r16, 0xBA	; 186
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e6 5b       	subi	r30, 0xB6	; 182
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a ef       	ldi	r20, 0xFA	; 250
    1d50:	54 e4       	ldi	r21, 0x44	; 68
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	80 83       	st	Z, r24
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	a2 83       	std	Z+2, r26	; 0x02
    1d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d64:	fe 01       	movw	r30, r28
    1d66:	ea 5b       	subi	r30, 0xBA	; 186
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	44 f4       	brge	.+16     	; 0x1d92 <LCD_voidInit+0x2bc>
		__ticks = 1;
    1d82:	fe 01       	movw	r30, r28
    1d84:	ec 5b       	subi	r30, 0xBC	; 188
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	64 c0       	rjmp	.+200    	; 0x1e5a <LCD_voidInit+0x384>
	else if (__tmp > 65535)
    1d92:	fe 01       	movw	r30, r28
    1d94:	ea 5b       	subi	r30, 0xBA	; 186
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <LCD_voidInit+0x2dc>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <LCD_voidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	fe 01       	movw	r30, r28
    1db4:	e6 5b       	subi	r30, 0xB6	; 182
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	0c 5b       	subi	r16, 0xBC	; 188
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	f8 01       	movw	r30, r16
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	1f c0       	rjmp	.+62     	; 0x1e28 <LCD_voidInit+0x352>
    1dea:	fe 01       	movw	r30, r28
    1dec:	ee 5b       	subi	r30, 0xBE	; 190
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ee 5b       	subi	r30, 0xBE	; 190
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_voidInit+0x32c>
    1e06:	fe 01       	movw	r30, r28
    1e08:	ee 5b       	subi	r30, 0xBE	; 190
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	de 01       	movw	r26, r28
    1e12:	ac 5b       	subi	r26, 0xBC	; 188
    1e14:	bf 4f       	sbci	r27, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	ec 5b       	subi	r30, 0xBC	; 188
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	11 96       	adiw	r26, 0x01	; 1
    1e24:	9c 93       	st	X, r25
    1e26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ec 5b       	subi	r30, 0xBC	; 188
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	d1 f6       	brne	.-76     	; 0x1dea <LCD_voidInit+0x314>
    1e36:	42 c0       	rjmp	.+132    	; 0x1ebc <LCD_voidInit+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	8e 01       	movw	r16, r28
    1e3a:	0c 5b       	subi	r16, 0xBC	; 188
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ea 5b       	subi	r30, 0xBA	; 186
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	de 01       	movw	r26, r28
    1e5c:	a0 5c       	subi	r26, 0xC0	; 192
    1e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	ec 5b       	subi	r30, 0xBC	; 188
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	11 96       	adiw	r26, 0x01	; 1
    1e6c:	9c 93       	st	X, r25
    1e6e:	8e 93       	st	-X, r24
    1e70:	fe 01       	movw	r30, r28
    1e72:	e0 5c       	subi	r30, 0xC0	; 192
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_voidInit+0x3a4>
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e0 5c       	subi	r30, 0xC0	; 192
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
    1e88:	19 c0       	rjmp	.+50     	; 0x1ebc <LCD_voidInit+0x3e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e8a:	8e 01       	movw	r16, r28
    1e8c:	02 5b       	subi	r16, 0xB2	; 178
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	e1 5b       	subi	r30, 0xB1	; 177
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	80 83       	st	Z, r24
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e2 5b       	subi	r30, 0xB2	; 178
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eb4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1eb6:	8a 95       	dec	r24
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_voidInit+0x3e0>
    1eba:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	LCD_voidWriteCmnd(0b00101000);
    1ec6:	88 e2       	ldi	r24, 0x28	; 40
    1ec8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidWriteCmnd>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e2       	ldi	r26, 0x20	; 32
    1ed2:	b2 e4       	ldi	r27, 0x42	; 66
    1ed4:	8b af       	std	Y+59, r24	; 0x3b
    1ed6:	9c af       	std	Y+60, r25	; 0x3c
    1ed8:	ad af       	std	Y+61, r26	; 0x3d
    1eda:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1edc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ede:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ee0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ee2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ee4:	2b ea       	ldi	r18, 0xAB	; 171
    1ee6:	3a ea       	ldi	r19, 0xAA	; 170
    1ee8:	4a e2       	ldi	r20, 0x2A	; 42
    1eea:	50 e4       	ldi	r21, 0x40	; 64
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8f ab       	std	Y+55, r24	; 0x37
    1ef6:	98 af       	std	Y+56, r25	; 0x38
    1ef8:	a9 af       	std	Y+57, r26	; 0x39
    1efa:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1efc:	6f a9       	ldd	r22, Y+55	; 0x37
    1efe:	78 ad       	ldd	r23, Y+56	; 0x38
    1f00:	89 ad       	ldd	r24, Y+57	; 0x39
    1f02:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	1c f4       	brge	.+6      	; 0x1f1a <LCD_voidInit+0x444>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	8e ab       	std	Y+54, r24	; 0x36
    1f18:	91 c0       	rjmp	.+290    	; 0x203c <LCD_voidInit+0x566>
	else if (__tmp > 255)
    1f1a:	6f a9       	ldd	r22, Y+55	; 0x37
    1f1c:	78 ad       	ldd	r23, Y+56	; 0x38
    1f1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	53 e4       	ldi	r21, 0x43	; 67
    1f2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <LCD_voidInit+0x45e>
    1f32:	7b c0       	rjmp	.+246    	; 0x202a <LCD_voidInit+0x554>
	{
		_delay_ms(__us / 1000.0);
    1f34:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f36:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f38:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a e7       	ldi	r20, 0x7A	; 122
    1f42:	54 e4       	ldi	r21, 0x44	; 68
    1f44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8a ab       	std	Y+50, r24	; 0x32
    1f4e:	9b ab       	std	Y+51, r25	; 0x33
    1f50:	ac ab       	std	Y+52, r26	; 0x34
    1f52:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	6a a9       	ldd	r22, Y+50	; 0x32
    1f56:	7b a9       	ldd	r23, Y+51	; 0x33
    1f58:	8c a9       	ldd	r24, Y+52	; 0x34
    1f5a:	9d a9       	ldd	r25, Y+53	; 0x35
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a ef       	ldi	r20, 0xFA	; 250
    1f62:	54 e4       	ldi	r21, 0x44	; 68
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	8e a7       	std	Y+46, r24	; 0x2e
    1f6e:	9f a7       	std	Y+47, r25	; 0x2f
    1f70:	a8 ab       	std	Y+48, r26	; 0x30
    1f72:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1f74:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f76:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f78:	88 a9       	ldd	r24, Y+48	; 0x30
    1f7a:	99 a9       	ldd	r25, Y+49	; 0x31
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <LCD_voidInit+0x4c0>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9d a7       	std	Y+45, r25	; 0x2d
    1f92:	8c a7       	std	Y+44, r24	; 0x2c
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <LCD_voidInit+0x53e>
	else if (__tmp > 65535)
    1f96:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f98:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f9a:	88 a9       	ldd	r24, Y+48	; 0x30
    1f9c:	99 a9       	ldd	r25, Y+49	; 0x31
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <LCD_voidInit+0x52a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	6a a9       	ldd	r22, Y+50	; 0x32
    1fb0:	7b a9       	ldd	r23, Y+51	; 0x33
    1fb2:	8c a9       	ldd	r24, Y+52	; 0x34
    1fb4:	9d a9       	ldd	r25, Y+53	; 0x35
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9d a7       	std	Y+45, r25	; 0x2d
    1fd4:	8c a7       	std	Y+44, r24	; 0x2c
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <LCD_voidInit+0x520>
    1fd8:	88 ec       	ldi	r24, 0xC8	; 200
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9b a7       	std	Y+43, r25	; 0x2b
    1fde:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1fe2:	9b a5       	ldd	r25, Y+43	; 0x2b
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_voidInit+0x50e>
    1fe8:	9b a7       	std	Y+43, r25	; 0x2b
    1fea:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fee:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9d a7       	std	Y+45, r25	; 0x2d
    1ff4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ff8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <LCD_voidInit+0x502>
    1ffe:	24 c0       	rjmp	.+72     	; 0x2048 <LCD_voidInit+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	6e a5       	ldd	r22, Y+46	; 0x2e
    2002:	7f a5       	ldd	r23, Y+47	; 0x2f
    2004:	88 a9       	ldd	r24, Y+48	; 0x30
    2006:	99 a9       	ldd	r25, Y+49	; 0x31
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9d a7       	std	Y+45, r25	; 0x2d
    2012:	8c a7       	std	Y+44, r24	; 0x2c
    2014:	8c a5       	ldd	r24, Y+44	; 0x2c
    2016:	9d a5       	ldd	r25, Y+45	; 0x2d
    2018:	99 a7       	std	Y+41, r25	; 0x29
    201a:	88 a7       	std	Y+40, r24	; 0x28
    201c:	88 a5       	ldd	r24, Y+40	; 0x28
    201e:	99 a5       	ldd	r25, Y+41	; 0x29
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_voidInit+0x54a>
    2024:	99 a7       	std	Y+41, r25	; 0x29
    2026:	88 a7       	std	Y+40, r24	; 0x28
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <LCD_voidInit+0x572>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    202a:	6f a9       	ldd	r22, Y+55	; 0x37
    202c:	78 ad       	ldd	r23, Y+56	; 0x38
    202e:	89 ad       	ldd	r24, Y+57	; 0x39
    2030:	9a ad       	ldd	r25, Y+58	; 0x3a
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8e ab       	std	Y+54, r24	; 0x36
    203c:	8e a9       	ldd	r24, Y+54	; 0x36
    203e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2040:	8f a1       	ldd	r24, Y+39	; 0x27
    2042:	8a 95       	dec	r24
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_voidInit+0x56c>
    2046:	8f a3       	std	Y+39, r24	; 0x27
#else
#error "Wrong Choice"
#endif
	_delay_us(40);
	/* Send Display on/off Control */
	LCD_voidWriteCmnd(0b00001111);
    2048:	8f e0       	ldi	r24, 0x0F	; 15
    204a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidWriteCmnd>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e2       	ldi	r26, 0x20	; 32
    2054:	b2 e4       	ldi	r27, 0x42	; 66
    2056:	8b a3       	std	Y+35, r24	; 0x23
    2058:	9c a3       	std	Y+36, r25	; 0x24
    205a:	ad a3       	std	Y+37, r26	; 0x25
    205c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    205e:	6b a1       	ldd	r22, Y+35	; 0x23
    2060:	7c a1       	ldd	r23, Y+36	; 0x24
    2062:	8d a1       	ldd	r24, Y+37	; 0x25
    2064:	9e a1       	ldd	r25, Y+38	; 0x26
    2066:	2b ea       	ldi	r18, 0xAB	; 171
    2068:	3a ea       	ldi	r19, 0xAA	; 170
    206a:	4a e2       	ldi	r20, 0x2A	; 42
    206c:	50 e4       	ldi	r21, 0x40	; 64
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8f 8f       	std	Y+31, r24	; 0x1f
    2078:	98 a3       	std	Y+32, r25	; 0x20
    207a:	a9 a3       	std	Y+33, r26	; 0x21
    207c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    207e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2080:	78 a1       	ldd	r23, Y+32	; 0x20
    2082:	89 a1       	ldd	r24, Y+33	; 0x21
    2084:	9a a1       	ldd	r25, Y+34	; 0x22
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	1c f4       	brge	.+6      	; 0x209c <LCD_voidInit+0x5c6>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	8e 8f       	std	Y+30, r24	; 0x1e
    209a:	91 c0       	rjmp	.+290    	; 0x21be <LCD_voidInit+0x6e8>
	else if (__tmp > 255)
    209c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    209e:	78 a1       	ldd	r23, Y+32	; 0x20
    20a0:	89 a1       	ldd	r24, Y+33	; 0x21
    20a2:	9a a1       	ldd	r25, Y+34	; 0x22
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	53 e4       	ldi	r21, 0x43	; 67
    20ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	0c f0       	brlt	.+2      	; 0x20b6 <LCD_voidInit+0x5e0>
    20b4:	7b c0       	rjmp	.+246    	; 0x21ac <LCD_voidInit+0x6d6>
	{
		_delay_ms(__us / 1000.0);
    20b6:	6b a1       	ldd	r22, Y+35	; 0x23
    20b8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ba:	8d a1       	ldd	r24, Y+37	; 0x25
    20bc:	9e a1       	ldd	r25, Y+38	; 0x26
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	4a e7       	ldi	r20, 0x7A	; 122
    20c4:	54 e4       	ldi	r21, 0x44	; 68
    20c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	8a 8f       	std	Y+26, r24	; 0x1a
    20d0:	9b 8f       	std	Y+27, r25	; 0x1b
    20d2:	ac 8f       	std	Y+28, r26	; 0x1c
    20d4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20d8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a ef       	ldi	r20, 0xFA	; 250
    20e4:	54 e4       	ldi	r21, 0x44	; 68
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	8e 8b       	std	Y+22, r24	; 0x16
    20f0:	9f 8b       	std	Y+23, r25	; 0x17
    20f2:	a8 8f       	std	Y+24, r26	; 0x18
    20f4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    20f6:	6e 89       	ldd	r22, Y+22	; 0x16
    20f8:	7f 89       	ldd	r23, Y+23	; 0x17
    20fa:	88 8d       	ldd	r24, Y+24	; 0x18
    20fc:	99 8d       	ldd	r25, Y+25	; 0x19
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	5f e3       	ldi	r21, 0x3F	; 63
    2106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    210a:	88 23       	and	r24, r24
    210c:	2c f4       	brge	.+10     	; 0x2118 <LCD_voidInit+0x642>
		__ticks = 1;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9d 8b       	std	Y+21, r25	; 0x15
    2114:	8c 8b       	std	Y+20, r24	; 0x14
    2116:	3f c0       	rjmp	.+126    	; 0x2196 <LCD_voidInit+0x6c0>
	else if (__tmp > 65535)
    2118:	6e 89       	ldd	r22, Y+22	; 0x16
    211a:	7f 89       	ldd	r23, Y+23	; 0x17
    211c:	88 8d       	ldd	r24, Y+24	; 0x18
    211e:	99 8d       	ldd	r25, Y+25	; 0x19
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	3f ef       	ldi	r19, 0xFF	; 255
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    212c:	18 16       	cp	r1, r24
    212e:	4c f5       	brge	.+82     	; 0x2182 <LCD_voidInit+0x6ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2130:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2132:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2134:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2136:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9d 8b       	std	Y+21, r25	; 0x15
    2156:	8c 8b       	std	Y+20, r24	; 0x14
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <LCD_voidInit+0x6a2>
    215a:	88 ec       	ldi	r24, 0xC8	; 200
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9b 8b       	std	Y+19, r25	; 0x13
    2160:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2162:	8a 89       	ldd	r24, Y+18	; 0x12
    2164:	9b 89       	ldd	r25, Y+19	; 0x13
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <LCD_voidInit+0x690>
    216a:	9b 8b       	std	Y+19, r25	; 0x13
    216c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	8c 89       	ldd	r24, Y+20	; 0x14
    2170:	9d 89       	ldd	r25, Y+21	; 0x15
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	9d 8b       	std	Y+21, r25	; 0x15
    2176:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2178:	8c 89       	ldd	r24, Y+20	; 0x14
    217a:	9d 89       	ldd	r25, Y+21	; 0x15
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	69 f7       	brne	.-38     	; 0x215a <LCD_voidInit+0x684>
    2180:	24 c0       	rjmp	.+72     	; 0x21ca <LCD_voidInit+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	6e 89       	ldd	r22, Y+22	; 0x16
    2184:	7f 89       	ldd	r23, Y+23	; 0x17
    2186:	88 8d       	ldd	r24, Y+24	; 0x18
    2188:	99 8d       	ldd	r25, Y+25	; 0x19
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	9d 8b       	std	Y+21, r25	; 0x15
    2194:	8c 8b       	std	Y+20, r24	; 0x14
    2196:	8c 89       	ldd	r24, Y+20	; 0x14
    2198:	9d 89       	ldd	r25, Y+21	; 0x15
    219a:	99 8b       	std	Y+17, r25	; 0x11
    219c:	88 8b       	std	Y+16, r24	; 0x10
    219e:	88 89       	ldd	r24, Y+16	; 0x10
    21a0:	99 89       	ldd	r25, Y+17	; 0x11
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_voidInit+0x6cc>
    21a6:	99 8b       	std	Y+17, r25	; 0x11
    21a8:	88 8b       	std	Y+16, r24	; 0x10
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <LCD_voidInit+0x6f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21ac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21ae:	78 a1       	ldd	r23, Y+32	; 0x20
    21b0:	89 a1       	ldd	r24, Y+33	; 0x21
    21b2:	9a a1       	ldd	r25, Y+34	; 0x22
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8e 8f       	std	Y+30, r24	; 0x1e
    21be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21c0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	8a 95       	dec	r24
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_voidInit+0x6ee>
    21c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/* Send Display Clear */
	LCD_voidWriteCmnd(0b00000001);
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidWriteCmnd>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e4       	ldi	r27, 0x40	; 64
    21d8:	8b 87       	std	Y+11, r24	; 0x0b
    21da:	9c 87       	std	Y+12, r25	; 0x0c
    21dc:	ad 87       	std	Y+13, r26	; 0x0d
    21de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a ef       	ldi	r20, 0xFA	; 250
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8f 83       	std	Y+7, r24	; 0x07
    21fa:	98 87       	std	Y+8, r25	; 0x08
    21fc:	a9 87       	std	Y+9, r26	; 0x09
    21fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <LCD_voidInit+0x74c>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <LCD_voidInit+0x7ca>
	else if (__tmp > 65535)
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <LCD_voidInit+0x7b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6b 85       	ldd	r22, Y+11	; 0x0b
    223c:	7c 85       	ldd	r23, Y+12	; 0x0c
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	9e 85       	ldd	r25, Y+14	; 0x0e
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <LCD_voidInit+0x7ac>
    2264:	88 ec       	ldi	r24, 0xC8	; 200
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <LCD_voidInit+0x79a>
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <LCD_voidInit+0x78e>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <LCD_voidInit+0x7de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <LCD_voidInit+0x7d6>
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* Send Entry Mode Set */
	LCD_voidWriteCmnd(0b00000110);
    22b4:	86 e0       	ldi	r24, 0x06	; 6
    22b6:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidWriteCmnd>
}
    22ba:	cc 59       	subi	r28, 0x9C	; 156
    22bc:	df 4f       	sbci	r29, 0xFF	; 255
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	08 95       	ret

000022d2 <LCD_voidWriteCmnd>:

void LCD_voidWriteCmnd(u8 Copy_u8Cmnd){
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	e1 97       	sbiw	r28, 0x31	; 49
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	89 ab       	std	Y+49, r24	; 0x31
	/*1- Rs = 0 Select Command Register */
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	/*2- Rw = 0 Write Operation      */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	61 e0       	ldi	r22, 0x01	; 1
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
#elif  (LCD_u8_MODE == LCD_u8_4_BIT_MODE)
	/*3- Send Most 4-bits to LCD       */
	PRIVATE_voidSetHalfPort(Copy_u8Cmnd);
    22fc:	89 a9       	ldd	r24, Y+49	; 0x31
    22fe:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <PRIVATE_voidSetHalfPort>
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
	/*4- Send Enable Pulse   		   */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	62 e0       	ldi	r22, 0x02	; 2
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a0 e8       	ldi	r26, 0x80	; 128
    2312:	bf e3       	ldi	r27, 0x3F	; 63
    2314:	8d a7       	std	Y+45, r24	; 0x2d
    2316:	9e a7       	std	Y+46, r25	; 0x2e
    2318:	af a7       	std	Y+47, r26	; 0x2f
    231a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    231c:	6d a5       	ldd	r22, Y+45	; 0x2d
    231e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2320:	8f a5       	ldd	r24, Y+47	; 0x2f
    2322:	98 a9       	ldd	r25, Y+48	; 0x30
    2324:	2b ea       	ldi	r18, 0xAB	; 171
    2326:	3a ea       	ldi	r19, 0xAA	; 170
    2328:	4a e2       	ldi	r20, 0x2A	; 42
    232a:	50 e4       	ldi	r21, 0x40	; 64
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	89 a7       	std	Y+41, r24	; 0x29
    2336:	9a a7       	std	Y+42, r25	; 0x2a
    2338:	ab a7       	std	Y+43, r26	; 0x2b
    233a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    233c:	69 a5       	ldd	r22, Y+41	; 0x29
    233e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2340:	8b a5       	ldd	r24, Y+43	; 0x2b
    2342:	9c a5       	ldd	r25, Y+44	; 0x2c
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2350:	88 23       	and	r24, r24
    2352:	1c f4       	brge	.+6      	; 0x235a <LCD_voidWriteCmnd+0x88>
		__ticks = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	88 a7       	std	Y+40, r24	; 0x28
    2358:	91 c0       	rjmp	.+290    	; 0x247c <LCD_voidWriteCmnd+0x1aa>
	else if (__tmp > 255)
    235a:	69 a5       	ldd	r22, Y+41	; 0x29
    235c:	7a a5       	ldd	r23, Y+42	; 0x2a
    235e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2360:	9c a5       	ldd	r25, Y+44	; 0x2c
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	53 e4       	ldi	r21, 0x43	; 67
    236a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	0c f0       	brlt	.+2      	; 0x2374 <LCD_voidWriteCmnd+0xa2>
    2372:	7b c0       	rjmp	.+246    	; 0x246a <LCD_voidWriteCmnd+0x198>
	{
		_delay_ms(__us / 1000.0);
    2374:	6d a5       	ldd	r22, Y+45	; 0x2d
    2376:	7e a5       	ldd	r23, Y+46	; 0x2e
    2378:	8f a5       	ldd	r24, Y+47	; 0x2f
    237a:	98 a9       	ldd	r25, Y+48	; 0x30
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a e7       	ldi	r20, 0x7A	; 122
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8c a3       	std	Y+36, r24	; 0x24
    238e:	9d a3       	std	Y+37, r25	; 0x25
    2390:	ae a3       	std	Y+38, r26	; 0x26
    2392:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6c a1       	ldd	r22, Y+36	; 0x24
    2396:	7d a1       	ldd	r23, Y+37	; 0x25
    2398:	8e a1       	ldd	r24, Y+38	; 0x26
    239a:	9f a1       	ldd	r25, Y+39	; 0x27
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a ef       	ldi	r20, 0xFA	; 250
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	88 a3       	std	Y+32, r24	; 0x20
    23ae:	99 a3       	std	Y+33, r25	; 0x21
    23b0:	aa a3       	std	Y+34, r26	; 0x22
    23b2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    23b4:	68 a1       	ldd	r22, Y+32	; 0x20
    23b6:	79 a1       	ldd	r23, Y+33	; 0x21
    23b8:	8a a1       	ldd	r24, Y+34	; 0x22
    23ba:	9b a1       	ldd	r25, Y+35	; 0x23
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <LCD_voidWriteCmnd+0x104>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9f 8f       	std	Y+31, r25	; 0x1f
    23d2:	8e 8f       	std	Y+30, r24	; 0x1e
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <LCD_voidWriteCmnd+0x182>
	else if (__tmp > 65535)
    23d6:	68 a1       	ldd	r22, Y+32	; 0x20
    23d8:	79 a1       	ldd	r23, Y+33	; 0x21
    23da:	8a a1       	ldd	r24, Y+34	; 0x22
    23dc:	9b a1       	ldd	r25, Y+35	; 0x23
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <LCD_voidWriteCmnd+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6c a1       	ldd	r22, Y+36	; 0x24
    23f0:	7d a1       	ldd	r23, Y+37	; 0x25
    23f2:	8e a1       	ldd	r24, Y+38	; 0x26
    23f4:	9f a1       	ldd	r25, Y+39	; 0x27
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9f 8f       	std	Y+31, r25	; 0x1f
    2414:	8e 8f       	std	Y+30, r24	; 0x1e
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_voidWriteCmnd+0x164>
    2418:	88 ec       	ldi	r24, 0xC8	; 200
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9d 8f       	std	Y+29, r25	; 0x1d
    241e:	8c 8f       	std	Y+28, r24	; 0x1c
    2420:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2422:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_voidWriteCmnd+0x152>
    2428:	9d 8f       	std	Y+29, r25	; 0x1d
    242a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    242e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9f 8f       	std	Y+31, r25	; 0x1f
    2434:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2438:	9f 8d       	ldd	r25, Y+31	; 0x1f
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <LCD_voidWriteCmnd+0x146>
    243e:	24 c0       	rjmp	.+72     	; 0x2488 <LCD_voidWriteCmnd+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	68 a1       	ldd	r22, Y+32	; 0x20
    2442:	79 a1       	ldd	r23, Y+33	; 0x21
    2444:	8a a1       	ldd	r24, Y+34	; 0x22
    2446:	9b a1       	ldd	r25, Y+35	; 0x23
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9f 8f       	std	Y+31, r25	; 0x1f
    2452:	8e 8f       	std	Y+30, r24	; 0x1e
    2454:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2456:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2458:	9b 8f       	std	Y+27, r25	; 0x1b
    245a:	8a 8f       	std	Y+26, r24	; 0x1a
    245c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    245e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_voidWriteCmnd+0x18e>
    2464:	9b 8f       	std	Y+27, r25	; 0x1b
    2466:	8a 8f       	std	Y+26, r24	; 0x1a
    2468:	0f c0       	rjmp	.+30     	; 0x2488 <LCD_voidWriteCmnd+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    246a:	69 a5       	ldd	r22, Y+41	; 0x29
    246c:	7a a5       	ldd	r23, Y+42	; 0x2a
    246e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2470:	9c a5       	ldd	r25, Y+44	; 0x2c
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	88 a7       	std	Y+40, r24	; 0x28
    247c:	88 a5       	ldd	r24, Y+40	; 0x28
    247e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2480:	89 8d       	ldd	r24, Y+25	; 0x19
    2482:	8a 95       	dec	r24
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_voidWriteCmnd+0x1b0>
    2486:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	62 e0       	ldi	r22, 0x02	; 2
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	/*5- Send Least 4-bits to LCD       */
	PRIVATE_voidSetHalfPort(Copy_u8Cmnd<<4);
    2492:	89 a9       	ldd	r24, Y+49	; 0x31
    2494:	82 95       	swap	r24
    2496:	80 7f       	andi	r24, 0xF0	; 240
    2498:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <PRIVATE_voidSetHalfPort>
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd<<4);
	/*6- Send Enable Pulse   		   */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	8d 8b       	std	Y+21, r24	; 0x15
    24b0:	9e 8b       	std	Y+22, r25	; 0x16
    24b2:	af 8b       	std	Y+23, r26	; 0x17
    24b4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24b6:	6d 89       	ldd	r22, Y+21	; 0x15
    24b8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	2b ea       	ldi	r18, 0xAB	; 171
    24c0:	3a ea       	ldi	r19, 0xAA	; 170
    24c2:	4a e2       	ldi	r20, 0x2A	; 42
    24c4:	50 e4       	ldi	r21, 0x40	; 64
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	89 8b       	std	Y+17, r24	; 0x11
    24d0:	9a 8b       	std	Y+18, r25	; 0x12
    24d2:	ab 8b       	std	Y+19, r26	; 0x13
    24d4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24d6:	69 89       	ldd	r22, Y+17	; 0x11
    24d8:	7a 89       	ldd	r23, Y+18	; 0x12
    24da:	8b 89       	ldd	r24, Y+19	; 0x13
    24dc:	9c 89       	ldd	r25, Y+20	; 0x14
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	1c f4       	brge	.+6      	; 0x24f4 <LCD_voidWriteCmnd+0x222>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	88 8b       	std	Y+16, r24	; 0x10
    24f2:	91 c0       	rjmp	.+290    	; 0x2616 <LCD_voidWriteCmnd+0x344>
	else if (__tmp > 255)
    24f4:	69 89       	ldd	r22, Y+17	; 0x11
    24f6:	7a 89       	ldd	r23, Y+18	; 0x12
    24f8:	8b 89       	ldd	r24, Y+19	; 0x13
    24fa:	9c 89       	ldd	r25, Y+20	; 0x14
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	53 e4       	ldi	r21, 0x43	; 67
    2504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	0c f0       	brlt	.+2      	; 0x250e <LCD_voidWriteCmnd+0x23c>
    250c:	7b c0       	rjmp	.+246    	; 0x2604 <LCD_voidWriteCmnd+0x332>
	{
		_delay_ms(__us / 1000.0);
    250e:	6d 89       	ldd	r22, Y+21	; 0x15
    2510:	7e 89       	ldd	r23, Y+22	; 0x16
    2512:	8f 89       	ldd	r24, Y+23	; 0x17
    2514:	98 8d       	ldd	r25, Y+24	; 0x18
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a e7       	ldi	r20, 0x7A	; 122
    251c:	54 e4       	ldi	r21, 0x44	; 68
    251e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8c 87       	std	Y+12, r24	; 0x0c
    2528:	9d 87       	std	Y+13, r25	; 0x0d
    252a:	ae 87       	std	Y+14, r26	; 0x0e
    252c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2530:	7d 85       	ldd	r23, Y+13	; 0x0d
    2532:	8e 85       	ldd	r24, Y+14	; 0x0e
    2534:	9f 85       	ldd	r25, Y+15	; 0x0f
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a ef       	ldi	r20, 0xFA	; 250
    253c:	54 e4       	ldi	r21, 0x44	; 68
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	88 87       	std	Y+8, r24	; 0x08
    2548:	99 87       	std	Y+9, r25	; 0x09
    254a:	aa 87       	std	Y+10, r26	; 0x0a
    254c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    254e:	68 85       	ldd	r22, Y+8	; 0x08
    2550:	79 85       	ldd	r23, Y+9	; 0x09
    2552:	8a 85       	ldd	r24, Y+10	; 0x0a
    2554:	9b 85       	ldd	r25, Y+11	; 0x0b
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	5f e3       	ldi	r21, 0x3F	; 63
    255e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2562:	88 23       	and	r24, r24
    2564:	2c f4       	brge	.+10     	; 0x2570 <LCD_voidWriteCmnd+0x29e>
		__ticks = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9f 83       	std	Y+7, r25	; 0x07
    256c:	8e 83       	std	Y+6, r24	; 0x06
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <LCD_voidWriteCmnd+0x31c>
	else if (__tmp > 65535)
    2570:	68 85       	ldd	r22, Y+8	; 0x08
    2572:	79 85       	ldd	r23, Y+9	; 0x09
    2574:	8a 85       	ldd	r24, Y+10	; 0x0a
    2576:	9b 85       	ldd	r25, Y+11	; 0x0b
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	3f ef       	ldi	r19, 0xFF	; 255
    257c:	4f e7       	ldi	r20, 0x7F	; 127
    257e:	57 e4       	ldi	r21, 0x47	; 71
    2580:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2584:	18 16       	cp	r1, r24
    2586:	4c f5       	brge	.+82     	; 0x25da <LCD_voidWriteCmnd+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	6c 85       	ldd	r22, Y+12	; 0x0c
    258a:	7d 85       	ldd	r23, Y+13	; 0x0d
    258c:	8e 85       	ldd	r24, Y+14	; 0x0e
    258e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9f 83       	std	Y+7, r25	; 0x07
    25ae:	8e 83       	std	Y+6, r24	; 0x06
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <LCD_voidWriteCmnd+0x2fe>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9d 83       	std	Y+5, r25	; 0x05
    25b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25ba:	8c 81       	ldd	r24, Y+4	; 0x04
    25bc:	9d 81       	ldd	r25, Y+5	; 0x05
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_voidWriteCmnd+0x2ec>
    25c2:	9d 83       	std	Y+5, r25	; 0x05
    25c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8e 81       	ldd	r24, Y+6	; 0x06
    25c8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9f 83       	std	Y+7, r25	; 0x07
    25ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8e 81       	ldd	r24, Y+6	; 0x06
    25d2:	9f 81       	ldd	r25, Y+7	; 0x07
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <LCD_voidWriteCmnd+0x2e0>
    25d8:	24 c0       	rjmp	.+72     	; 0x2622 <LCD_voidWriteCmnd+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	68 85       	ldd	r22, Y+8	; 0x08
    25dc:	79 85       	ldd	r23, Y+9	; 0x09
    25de:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9f 83       	std	Y+7, r25	; 0x07
    25ec:	8e 83       	std	Y+6, r24	; 0x06
    25ee:	8e 81       	ldd	r24, Y+6	; 0x06
    25f0:	9f 81       	ldd	r25, Y+7	; 0x07
    25f2:	9b 83       	std	Y+3, r25	; 0x03
    25f4:	8a 83       	std	Y+2, r24	; 0x02
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	9b 81       	ldd	r25, Y+3	; 0x03
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_voidWriteCmnd+0x328>
    25fe:	9b 83       	std	Y+3, r25	; 0x03
    2600:	8a 83       	std	Y+2, r24	; 0x02
    2602:	0f c0       	rjmp	.+30     	; 0x2622 <LCD_voidWriteCmnd+0x350>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2604:	69 89       	ldd	r22, Y+17	; 0x11
    2606:	7a 89       	ldd	r23, Y+18	; 0x12
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	88 8b       	std	Y+16, r24	; 0x10
    2616:	88 89       	ldd	r24, Y+16	; 0x10
    2618:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	8a 95       	dec	r24
    261e:	f1 f7       	brne	.-4      	; 0x261c <LCD_voidWriteCmnd+0x34a>
    2620:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	62 e0       	ldi	r22, 0x02	; 2
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
#else
#error "Wrong Choice"

#endif
}
    262c:	e1 96       	adiw	r28, 0x31	; 49
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 Copy_u8Char){
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	e1 97       	sbiw	r28, 0x31	; 49
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	89 ab       	std	Y+49, r24	; 0x31
	/*1- Rs = 1 Select Data Register */
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	/*2- Rw = 0 Write Operation      */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
#elif  (LCD_u8_MODE == LCD_u8_4_BIT_MODE)
	/*3- Send Most 4-bits to LCD       */
	PRIVATE_voidSetHalfPort(Copy_u8Char);
    2668:	89 a9       	ldd	r24, Y+49	; 0x31
    266a:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <PRIVATE_voidSetHalfPort>
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
	/*4- Send Enable Pulse   		   */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	62 e0       	ldi	r22, 0x02	; 2
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	a0 e8       	ldi	r26, 0x80	; 128
    267e:	bf e3       	ldi	r27, 0x3F	; 63
    2680:	8d a7       	std	Y+45, r24	; 0x2d
    2682:	9e a7       	std	Y+46, r25	; 0x2e
    2684:	af a7       	std	Y+47, r26	; 0x2f
    2686:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2688:	6d a5       	ldd	r22, Y+45	; 0x2d
    268a:	7e a5       	ldd	r23, Y+46	; 0x2e
    268c:	8f a5       	ldd	r24, Y+47	; 0x2f
    268e:	98 a9       	ldd	r25, Y+48	; 0x30
    2690:	2b ea       	ldi	r18, 0xAB	; 171
    2692:	3a ea       	ldi	r19, 0xAA	; 170
    2694:	4a e2       	ldi	r20, 0x2A	; 42
    2696:	50 e4       	ldi	r21, 0x40	; 64
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	89 a7       	std	Y+41, r24	; 0x29
    26a2:	9a a7       	std	Y+42, r25	; 0x2a
    26a4:	ab a7       	std	Y+43, r26	; 0x2b
    26a6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26a8:	69 a5       	ldd	r22, Y+41	; 0x29
    26aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    26ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	1c f4       	brge	.+6      	; 0x26c6 <LCD_voidWriteChar+0x88>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	88 a7       	std	Y+40, r24	; 0x28
    26c4:	91 c0       	rjmp	.+290    	; 0x27e8 <LCD_voidWriteChar+0x1aa>
	else if (__tmp > 255)
    26c6:	69 a5       	ldd	r22, Y+41	; 0x29
    26c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    26ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    26cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4f e7       	ldi	r20, 0x7F	; 127
    26d4:	53 e4       	ldi	r21, 0x43	; 67
    26d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26da:	18 16       	cp	r1, r24
    26dc:	0c f0       	brlt	.+2      	; 0x26e0 <LCD_voidWriteChar+0xa2>
    26de:	7b c0       	rjmp	.+246    	; 0x27d6 <LCD_voidWriteChar+0x198>
	{
		_delay_ms(__us / 1000.0);
    26e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    26e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    26e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e6:	98 a9       	ldd	r25, Y+48	; 0x30
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	4a e7       	ldi	r20, 0x7A	; 122
    26ee:	54 e4       	ldi	r21, 0x44	; 68
    26f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	8c a3       	std	Y+36, r24	; 0x24
    26fa:	9d a3       	std	Y+37, r25	; 0x25
    26fc:	ae a3       	std	Y+38, r26	; 0x26
    26fe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2700:	6c a1       	ldd	r22, Y+36	; 0x24
    2702:	7d a1       	ldd	r23, Y+37	; 0x25
    2704:	8e a1       	ldd	r24, Y+38	; 0x26
    2706:	9f a1       	ldd	r25, Y+39	; 0x27
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4a ef       	ldi	r20, 0xFA	; 250
    270e:	54 e4       	ldi	r21, 0x44	; 68
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	88 a3       	std	Y+32, r24	; 0x20
    271a:	99 a3       	std	Y+33, r25	; 0x21
    271c:	aa a3       	std	Y+34, r26	; 0x22
    271e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2720:	68 a1       	ldd	r22, Y+32	; 0x20
    2722:	79 a1       	ldd	r23, Y+33	; 0x21
    2724:	8a a1       	ldd	r24, Y+34	; 0x22
    2726:	9b a1       	ldd	r25, Y+35	; 0x23
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	2c f4       	brge	.+10     	; 0x2742 <LCD_voidWriteChar+0x104>
		__ticks = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9f 8f       	std	Y+31, r25	; 0x1f
    273e:	8e 8f       	std	Y+30, r24	; 0x1e
    2740:	3f c0       	rjmp	.+126    	; 0x27c0 <LCD_voidWriteChar+0x182>
	else if (__tmp > 65535)
    2742:	68 a1       	ldd	r22, Y+32	; 0x20
    2744:	79 a1       	ldd	r23, Y+33	; 0x21
    2746:	8a a1       	ldd	r24, Y+34	; 0x22
    2748:	9b a1       	ldd	r25, Y+35	; 0x23
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	4c f5       	brge	.+82     	; 0x27ac <LCD_voidWriteChar+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6c a1       	ldd	r22, Y+36	; 0x24
    275c:	7d a1       	ldd	r23, Y+37	; 0x25
    275e:	8e a1       	ldd	r24, Y+38	; 0x26
    2760:	9f a1       	ldd	r25, Y+39	; 0x27
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9f 8f       	std	Y+31, r25	; 0x1f
    2780:	8e 8f       	std	Y+30, r24	; 0x1e
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <LCD_voidWriteChar+0x164>
    2784:	88 ec       	ldi	r24, 0xC8	; 200
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9d 8f       	std	Y+29, r25	; 0x1d
    278a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    278c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    278e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_voidWriteChar+0x152>
    2794:	9d 8f       	std	Y+29, r25	; 0x1d
    2796:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	8e 8d       	ldd	r24, Y+30	; 0x1e
    279a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	9f 8f       	std	Y+31, r25	; 0x1f
    27a0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	69 f7       	brne	.-38     	; 0x2784 <LCD_voidWriteChar+0x146>
    27aa:	24 c0       	rjmp	.+72     	; 0x27f4 <LCD_voidWriteChar+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	68 a1       	ldd	r22, Y+32	; 0x20
    27ae:	79 a1       	ldd	r23, Y+33	; 0x21
    27b0:	8a a1       	ldd	r24, Y+34	; 0x22
    27b2:	9b a1       	ldd	r25, Y+35	; 0x23
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9f 8f       	std	Y+31, r25	; 0x1f
    27be:	8e 8f       	std	Y+30, r24	; 0x1e
    27c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27c4:	9b 8f       	std	Y+27, r25	; 0x1b
    27c6:	8a 8f       	std	Y+26, r24	; 0x1a
    27c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_voidWriteChar+0x18e>
    27d0:	9b 8f       	std	Y+27, r25	; 0x1b
    27d2:	8a 8f       	std	Y+26, r24	; 0x1a
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <LCD_voidWriteChar+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27d6:	69 a5       	ldd	r22, Y+41	; 0x29
    27d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    27da:	8b a5       	ldd	r24, Y+43	; 0x2b
    27dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	88 a7       	std	Y+40, r24	; 0x28
    27e8:	88 a5       	ldd	r24, Y+40	; 0x28
    27ea:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27ec:	89 8d       	ldd	r24, Y+25	; 0x19
    27ee:	8a 95       	dec	r24
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <LCD_voidWriteChar+0x1b0>
    27f2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	62 e0       	ldi	r22, 0x02	; 2
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>

	/*5- Send Least 4-bits to LCD       */
	PRIVATE_voidSetHalfPort(Copy_u8Char<<4);
    27fe:	89 a9       	ldd	r24, Y+49	; 0x31
    2800:	82 95       	swap	r24
    2802:	80 7f       	andi	r24, 0xF0	; 240
    2804:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <PRIVATE_voidSetHalfPort>
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char<<4);
	/*6- Send Enable Pulse   		   */
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	62 e0       	ldi	r22, 0x02	; 2
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a0 e8       	ldi	r26, 0x80	; 128
    2818:	bf e3       	ldi	r27, 0x3F	; 63
    281a:	8d 8b       	std	Y+21, r24	; 0x15
    281c:	9e 8b       	std	Y+22, r25	; 0x16
    281e:	af 8b       	std	Y+23, r26	; 0x17
    2820:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2822:	6d 89       	ldd	r22, Y+21	; 0x15
    2824:	7e 89       	ldd	r23, Y+22	; 0x16
    2826:	8f 89       	ldd	r24, Y+23	; 0x17
    2828:	98 8d       	ldd	r25, Y+24	; 0x18
    282a:	2b ea       	ldi	r18, 0xAB	; 171
    282c:	3a ea       	ldi	r19, 0xAA	; 170
    282e:	4a e2       	ldi	r20, 0x2A	; 42
    2830:	50 e4       	ldi	r21, 0x40	; 64
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	89 8b       	std	Y+17, r24	; 0x11
    283c:	9a 8b       	std	Y+18, r25	; 0x12
    283e:	ab 8b       	std	Y+19, r26	; 0x13
    2840:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2842:	69 89       	ldd	r22, Y+17	; 0x11
    2844:	7a 89       	ldd	r23, Y+18	; 0x12
    2846:	8b 89       	ldd	r24, Y+19	; 0x13
    2848:	9c 89       	ldd	r25, Y+20	; 0x14
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	1c f4       	brge	.+6      	; 0x2860 <LCD_voidWriteChar+0x222>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	88 8b       	std	Y+16, r24	; 0x10
    285e:	91 c0       	rjmp	.+290    	; 0x2982 <LCD_voidWriteChar+0x344>
	else if (__tmp > 255)
    2860:	69 89       	ldd	r22, Y+17	; 0x11
    2862:	7a 89       	ldd	r23, Y+18	; 0x12
    2864:	8b 89       	ldd	r24, Y+19	; 0x13
    2866:	9c 89       	ldd	r25, Y+20	; 0x14
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	4f e7       	ldi	r20, 0x7F	; 127
    286e:	53 e4       	ldi	r21, 0x43	; 67
    2870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2874:	18 16       	cp	r1, r24
    2876:	0c f0       	brlt	.+2      	; 0x287a <LCD_voidWriteChar+0x23c>
    2878:	7b c0       	rjmp	.+246    	; 0x2970 <LCD_voidWriteChar+0x332>
	{
		_delay_ms(__us / 1000.0);
    287a:	6d 89       	ldd	r22, Y+21	; 0x15
    287c:	7e 89       	ldd	r23, Y+22	; 0x16
    287e:	8f 89       	ldd	r24, Y+23	; 0x17
    2880:	98 8d       	ldd	r25, Y+24	; 0x18
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a e7       	ldi	r20, 0x7A	; 122
    2888:	54 e4       	ldi	r21, 0x44	; 68
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8c 87       	std	Y+12, r24	; 0x0c
    2894:	9d 87       	std	Y+13, r25	; 0x0d
    2896:	ae 87       	std	Y+14, r26	; 0x0e
    2898:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289a:	6c 85       	ldd	r22, Y+12	; 0x0c
    289c:	7d 85       	ldd	r23, Y+13	; 0x0d
    289e:	8e 85       	ldd	r24, Y+14	; 0x0e
    28a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	4a ef       	ldi	r20, 0xFA	; 250
    28a8:	54 e4       	ldi	r21, 0x44	; 68
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	88 87       	std	Y+8, r24	; 0x08
    28b4:	99 87       	std	Y+9, r25	; 0x09
    28b6:	aa 87       	std	Y+10, r26	; 0x0a
    28b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28ba:	68 85       	ldd	r22, Y+8	; 0x08
    28bc:	79 85       	ldd	r23, Y+9	; 0x09
    28be:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e8       	ldi	r20, 0x80	; 128
    28c8:	5f e3       	ldi	r21, 0x3F	; 63
    28ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ce:	88 23       	and	r24, r24
    28d0:	2c f4       	brge	.+10     	; 0x28dc <LCD_voidWriteChar+0x29e>
		__ticks = 1;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9f 83       	std	Y+7, r25	; 0x07
    28d8:	8e 83       	std	Y+6, r24	; 0x06
    28da:	3f c0       	rjmp	.+126    	; 0x295a <LCD_voidWriteChar+0x31c>
	else if (__tmp > 65535)
    28dc:	68 85       	ldd	r22, Y+8	; 0x08
    28de:	79 85       	ldd	r23, Y+9	; 0x09
    28e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	3f ef       	ldi	r19, 0xFF	; 255
    28e8:	4f e7       	ldi	r20, 0x7F	; 127
    28ea:	57 e4       	ldi	r21, 0x47	; 71
    28ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f0:	18 16       	cp	r1, r24
    28f2:	4c f5       	brge	.+82     	; 0x2946 <LCD_voidWriteChar+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    28f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    28f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    28fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 e2       	ldi	r20, 0x20	; 32
    2902:	51 e4       	ldi	r21, 0x41	; 65
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9f 83       	std	Y+7, r25	; 0x07
    291a:	8e 83       	std	Y+6, r24	; 0x06
    291c:	0f c0       	rjmp	.+30     	; 0x293c <LCD_voidWriteChar+0x2fe>
    291e:	88 ec       	ldi	r24, 0xC8	; 200
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9d 83       	std	Y+5, r25	; 0x05
    2924:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2926:	8c 81       	ldd	r24, Y+4	; 0x04
    2928:	9d 81       	ldd	r25, Y+5	; 0x05
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <LCD_voidWriteChar+0x2ec>
    292e:	9d 83       	std	Y+5, r25	; 0x05
    2930:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2932:	8e 81       	ldd	r24, Y+6	; 0x06
    2934:	9f 81       	ldd	r25, Y+7	; 0x07
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	9f 83       	std	Y+7, r25	; 0x07
    293a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293c:	8e 81       	ldd	r24, Y+6	; 0x06
    293e:	9f 81       	ldd	r25, Y+7	; 0x07
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	69 f7       	brne	.-38     	; 0x291e <LCD_voidWriteChar+0x2e0>
    2944:	24 c0       	rjmp	.+72     	; 0x298e <LCD_voidWriteChar+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2946:	68 85       	ldd	r22, Y+8	; 0x08
    2948:	79 85       	ldd	r23, Y+9	; 0x09
    294a:	8a 85       	ldd	r24, Y+10	; 0x0a
    294c:	9b 85       	ldd	r25, Y+11	; 0x0b
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9f 83       	std	Y+7, r25	; 0x07
    2958:	8e 83       	std	Y+6, r24	; 0x06
    295a:	8e 81       	ldd	r24, Y+6	; 0x06
    295c:	9f 81       	ldd	r25, Y+7	; 0x07
    295e:	9b 83       	std	Y+3, r25	; 0x03
    2960:	8a 83       	std	Y+2, r24	; 0x02
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	9b 81       	ldd	r25, Y+3	; 0x03
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <LCD_voidWriteChar+0x328>
    296a:	9b 83       	std	Y+3, r25	; 0x03
    296c:	8a 83       	std	Y+2, r24	; 0x02
    296e:	0f c0       	rjmp	.+30     	; 0x298e <LCD_voidWriteChar+0x350>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2970:	69 89       	ldd	r22, Y+17	; 0x11
    2972:	7a 89       	ldd	r23, Y+18	; 0x12
    2974:	8b 89       	ldd	r24, Y+19	; 0x13
    2976:	9c 89       	ldd	r25, Y+20	; 0x14
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	88 8b       	std	Y+16, r24	; 0x10
    2982:	88 89       	ldd	r24, Y+16	; 0x10
    2984:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	8a 95       	dec	r24
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_voidWriteChar+0x34a>
    298c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	62 e0       	ldi	r22, 0x02	; 2
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>

#else
#error "Wrong Choice"

#endif
}
    2998:	e1 96       	adiw	r28, 0x31	; 49
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <LCD_voidWriteString>:

void LCD_voidWriteString(u8 Copy_u8String[]){
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <LCD_voidWriteString+0x6>
    29b0:	0f 92       	push	r0
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	9b 83       	std	Y+3, r25	; 0x03
    29b8:	8a 83       	std	Y+2, r24	; 0x02
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	u8 Local_u8StringIndex;

	for(Local_u8StringIndex=0 ; Copy_u8String[Local_u8StringIndex]!='\0' ; Local_u8StringIndex++){
    29ce:	19 82       	std	Y+1, r1	; 0x01
    29d0:	0e c0       	rjmp	.+28     	; 0x29ee <LCD_voidWriteString+0x44>
		LCD_voidWriteChar(Copy_u8String[Local_u8StringIndex]);
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	9b 81       	ldd	r25, Y+3	; 0x03
    29dc:	fc 01       	movw	r30, r24
    29de:	e2 0f       	add	r30, r18
    29e0:	f3 1f       	adc	r31, r19
    29e2:	80 81       	ld	r24, Z
    29e4:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_voidWriteChar>
void LCD_voidWriteString(u8 Copy_u8String[]){
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
	u8 Local_u8StringIndex;

	for(Local_u8StringIndex=0 ; Copy_u8String[Local_u8StringIndex]!='\0' ; Local_u8StringIndex++){
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	8f 5f       	subi	r24, 0xFF	; 255
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	fc 01       	movw	r30, r24
    29fa:	e2 0f       	add	r30, r18
    29fc:	f3 1f       	adc	r31, r19
    29fe:	80 81       	ld	r24, Z
    2a00:	88 23       	and	r24, r24
    2a02:	39 f7       	brne	.-50     	; 0x29d2 <LCD_voidWriteString+0x28>
		LCD_voidWriteChar(Copy_u8String[Local_u8StringIndex]);
	}
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u16 Copy_u16Number){
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	28 97       	sbiw	r28, 0x08	; 8
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	98 87       	std	Y+8, r25	; 0x08
    2a26:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u16Number[6];
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	41 e0       	ldi	r20, 0x01	; 1
    2a2e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	61 e0       	ldi	r22, 0x01	; 1
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	sprintf(Local_u16Number,"%u",Copy_u16Number);
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <LCD_voidWriteNumber+0x2e>
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <LCD_voidWriteNumber+0x30>
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <LCD_voidWriteNumber+0x32>
    2a42:	ed b7       	in	r30, 0x3d	; 61
    2a44:	fe b7       	in	r31, 0x3e	; 62
    2a46:	31 96       	adiw	r30, 0x01	; 1
    2a48:	ce 01       	movw	r24, r28
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	91 83       	std	Z+1, r25	; 0x01
    2a4e:	80 83       	st	Z, r24
    2a50:	80 e6       	ldi	r24, 0x60	; 96
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	93 83       	std	Z+3, r25	; 0x03
    2a56:	82 83       	std	Z+2, r24	; 0x02
    2a58:	8f 81       	ldd	r24, Y+7	; 0x07
    2a5a:	98 85       	ldd	r25, Y+8	; 0x08
    2a5c:	95 83       	std	Z+5, r25	; 0x05
    2a5e:	84 83       	std	Z+4, r24	; 0x04
    2a60:	0e 94 21 19 	call	0x3242	; 0x3242 <sprintf>
    2a64:	8d b7       	in	r24, 0x3d	; 61
    2a66:	9e b7       	in	r25, 0x3e	; 62
    2a68:	06 96       	adiw	r24, 0x06	; 6
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	9e bf       	out	0x3e, r25	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	8d bf       	out	0x3d, r24	; 61
	LCD_voidWriteString(Local_u16Number);
    2a74:	ce 01       	movw	r24, r28
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteString>
}
    2a7c:	28 96       	adiw	r28, 0x08	; 8
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <LCD_u8GoToXY>:



u8 LCD_u8GoToXY(u8 Copy_u8LineNumber,u8 Copy_u8_CharLocation){
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <LCD_u8GoToXY+0x6>
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <LCD_u8GoToXY+0x8>
    2a96:	0f 92       	push	r0
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	8a 83       	std	Y+2, r24	; 0x02
    2a9e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8_CharLocation<40){
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	88 32       	cpi	r24, 0x28	; 40
    2aa8:	e0 f4       	brcc	.+56     	; 0x2ae2 <LCD_u8GoToXY+0x54>
		switch(Copy_u8LineNumber){
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	28 2f       	mov	r18, r24
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	3d 83       	std	Y+5, r19	; 0x05
    2ab2:	2c 83       	std	Y+4, r18	; 0x04
    2ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	91 05       	cpc	r25, r1
    2abc:	31 f0       	breq	.+12     	; 0x2aca <LCD_u8GoToXY+0x3c>
    2abe:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac2:	22 30       	cpi	r18, 0x02	; 2
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	31 f0       	breq	.+12     	; 0x2ad4 <LCD_u8GoToXY+0x46>
    2ac8:	0a c0       	rjmp	.+20     	; 0x2ade <LCD_u8GoToXY+0x50>
		case LCD_u8_LINE_1:
			LCD_voidWriteCmnd(0x80 + Copy_u8_CharLocation);
    2aca:	8b 81       	ldd	r24, Y+3	; 0x03
    2acc:	80 58       	subi	r24, 0x80	; 128
    2ace:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidWriteCmnd>
    2ad2:	08 c0       	rjmp	.+16     	; 0x2ae4 <LCD_u8GoToXY+0x56>
			break;
		case LCD_u8_LINE_2:
			LCD_voidWriteCmnd(0xC0 + Copy_u8_CharLocation);
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	80 54       	subi	r24, 0x40	; 64
    2ad8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidWriteCmnd>
    2adc:	03 c0       	rjmp	.+6      	; 0x2ae4 <LCD_u8GoToXY+0x56>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    2ade:	19 82       	std	Y+1, r1	; 0x01
    2ae0:	01 c0       	rjmp	.+2      	; 0x2ae4 <LCD_u8GoToXY+0x56>
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2ae2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <PRIVATE_voidSetHalfPort>:
static void PRIVATE_voidSetHalfPort(u8 Copy_u8Data){
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	0f 92       	push	r0
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(Copy_u8Data,7)){
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	88 23       	and	r24, r24
    2b06:	34 f4       	brge	.+12     	; 0x2b14 <PRIVATE_voidSetHalfPort+0x1e>
		DIO_u8SetPinValue(LCD_u8_PD7_PORT,LCD_u8_PD7_PIN,DIO_u8_HIGH);
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	63 e0       	ldi	r22, 0x03	; 3
    2b0c:	41 e0       	ldi	r20, 0x01	; 1
    2b0e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    2b12:	05 c0       	rjmp	.+10     	; 0x2b1e <PRIVATE_voidSetHalfPort+0x28>
	}
	else{
		DIO_u8SetPinValue(LCD_u8_PD7_PORT,LCD_u8_PD7_PIN,DIO_u8_LOW);
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	63 e0       	ldi	r22, 0x03	; 3
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	}
	if(GET_BIT(Copy_u8Data,6)){
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	82 95       	swap	r24
    2b22:	86 95       	lsr	r24
    2b24:	86 95       	lsr	r24
    2b26:	83 70       	andi	r24, 0x03	; 3
    2b28:	88 2f       	mov	r24, r24
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	81 70       	andi	r24, 0x01	; 1
    2b2e:	90 70       	andi	r25, 0x00	; 0
    2b30:	88 23       	and	r24, r24
    2b32:	31 f0       	breq	.+12     	; 0x2b40 <PRIVATE_voidSetHalfPort+0x4a>
		DIO_u8SetPinValue(LCD_u8_PD6_PORT,LCD_u8_PD6_PIN,DIO_u8_HIGH);
    2b34:	83 e0       	ldi	r24, 0x03	; 3
    2b36:	62 e0       	ldi	r22, 0x02	; 2
    2b38:	41 e0       	ldi	r20, 0x01	; 1
    2b3a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    2b3e:	05 c0       	rjmp	.+10     	; 0x2b4a <PRIVATE_voidSetHalfPort+0x54>
	}
	else{
		DIO_u8SetPinValue(LCD_u8_PD6_PORT,LCD_u8_PD6_PIN,DIO_u8_LOW);
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	62 e0       	ldi	r22, 0x02	; 2
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	}
	if(GET_BIT(Copy_u8Data,5)){
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	82 95       	swap	r24
    2b4e:	86 95       	lsr	r24
    2b50:	87 70       	andi	r24, 0x07	; 7
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	81 70       	andi	r24, 0x01	; 1
    2b58:	90 70       	andi	r25, 0x00	; 0
    2b5a:	88 23       	and	r24, r24
    2b5c:	31 f0       	breq	.+12     	; 0x2b6a <PRIVATE_voidSetHalfPort+0x74>
		DIO_u8SetPinValue(LCD_u8_PD5_PORT,LCD_u8_PD5_PIN,DIO_u8_HIGH);
    2b5e:	83 e0       	ldi	r24, 0x03	; 3
    2b60:	61 e0       	ldi	r22, 0x01	; 1
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <PRIVATE_voidSetHalfPort+0x7e>
	}
	else{
		DIO_u8SetPinValue(LCD_u8_PD5_PORT,LCD_u8_PD5_PIN,DIO_u8_LOW);
    2b6a:	83 e0       	ldi	r24, 0x03	; 3
    2b6c:	61 e0       	ldi	r22, 0x01	; 1
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	}
	if(GET_BIT(Copy_u8Data,4)){
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	82 95       	swap	r24
    2b78:	8f 70       	andi	r24, 0x0F	; 15
    2b7a:	88 2f       	mov	r24, r24
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	81 70       	andi	r24, 0x01	; 1
    2b80:	90 70       	andi	r25, 0x00	; 0
    2b82:	88 23       	and	r24, r24
    2b84:	31 f0       	breq	.+12     	; 0x2b92 <PRIVATE_voidSetHalfPort+0x9c>
		DIO_u8SetPinValue(LCD_u8_PD4_PORT,LCD_u8_PD4_PIN,DIO_u8_HIGH);
    2b86:	83 e0       	ldi	r24, 0x03	; 3
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    2b90:	05 c0       	rjmp	.+10     	; 0x2b9c <PRIVATE_voidSetHalfPort+0xa6>
	}
	else{
		DIO_u8SetPinValue(LCD_u8_PD4_PORT,LCD_u8_PD4_PIN,DIO_u8_LOW);
    2b92:	83 e0       	ldi	r24, 0x03	; 3
    2b94:	60 e0       	ldi	r22, 0x00	; 0
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	}

}
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <main>:
void setRange(u8 range);

u16 App_u16DigitalValue = 0xFFFF;
const u32 res_table[5] = {1000, 2180 , 10000, 100000, 2000000};

int main(void){
    2ba4:	ef 92       	push	r14
    2ba6:	ff 92       	push	r15
    2ba8:	0f 93       	push	r16
    2baa:	1f 93       	push	r17
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	ad 97       	sbiw	r28, 0x2d	; 45
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	cd bf       	out	0x3d, r28	; 61
	initAll();
    2bc0:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <initAll>
	u16 value = 0;
    2bc4:	1d a6       	std	Y+45, r1	; 0x2d
    2bc6:	1c a6       	std	Y+44, r1	; 0x2c


	while(1){
		u8 i;
		for(i=1; i<6; i++){
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	8b a7       	std	Y+43, r24	; 0x2b
    2bcc:	86 c0       	rjmp	.+268    	; 0x2cda <main+0x136>
			setRange(i);
    2bce:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bd0:	0e 94 12 18 	call	0x3024	; 0x3024 <setRange>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a8 ec       	ldi	r26, 0xC8	; 200
    2bda:	b2 e4       	ldi	r27, 0x42	; 66
    2bdc:	8f a3       	std	Y+39, r24	; 0x27
    2bde:	98 a7       	std	Y+40, r25	; 0x28
    2be0:	a9 a7       	std	Y+41, r26	; 0x29
    2be2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	6f a1       	ldd	r22, Y+39	; 0x27
    2be6:	78 a5       	ldd	r23, Y+40	; 0x28
    2be8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4a ef       	ldi	r20, 0xFA	; 250
    2bf2:	54 e4       	ldi	r21, 0x44	; 68
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	8b a3       	std	Y+35, r24	; 0x23
    2bfe:	9c a3       	std	Y+36, r25	; 0x24
    2c00:	ad a3       	std	Y+37, r26	; 0x25
    2c02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c04:	6b a1       	ldd	r22, Y+35	; 0x23
    2c06:	7c a1       	ldd	r23, Y+36	; 0x24
    2c08:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c18:	88 23       	and	r24, r24
    2c1a:	2c f4       	brge	.+10     	; 0x2c26 <main+0x82>
		__ticks = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9a a3       	std	Y+34, r25	; 0x22
    2c22:	89 a3       	std	Y+33, r24	; 0x21
    2c24:	3f c0       	rjmp	.+126    	; 0x2ca4 <main+0x100>
	else if (__tmp > 65535)
    2c26:	6b a1       	ldd	r22, Y+35	; 0x23
    2c28:	7c a1       	ldd	r23, Y+36	; 0x24
    2c2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	4f e7       	ldi	r20, 0x7F	; 127
    2c34:	57 e4       	ldi	r21, 0x47	; 71
    2c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3a:	18 16       	cp	r1, r24
    2c3c:	4c f5       	brge	.+82     	; 0x2c90 <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c40:	78 a5       	ldd	r23, Y+40	; 0x28
    2c42:	89 a5       	ldd	r24, Y+41	; 0x29
    2c44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9a a3       	std	Y+34, r25	; 0x22
    2c64:	89 a3       	std	Y+33, r24	; 0x21
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <main+0xe2>
    2c68:	88 ec       	ldi	r24, 0xC8	; 200
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	98 a3       	std	Y+32, r25	; 0x20
    2c6e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c72:	98 a1       	ldd	r25, Y+32	; 0x20
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <main+0xd0>
    2c78:	98 a3       	std	Y+32, r25	; 0x20
    2c7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	9a a3       	std	Y+34, r25	; 0x22
    2c84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	89 a1       	ldd	r24, Y+33	; 0x21
    2c88:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <main+0xc4>
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	6b a1       	ldd	r22, Y+35	; 0x23
    2c92:	7c a1       	ldd	r23, Y+36	; 0x24
    2c94:	8d a1       	ldd	r24, Y+37	; 0x25
    2c96:	9e a1       	ldd	r25, Y+38	; 0x26
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9a a3       	std	Y+34, r25	; 0x22
    2ca2:	89 a3       	std	Y+33, r24	; 0x21
    2ca4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca8:	9e 8f       	std	Y+30, r25	; 0x1e
    2caa:	8d 8f       	std	Y+29, r24	; 0x1d
    2cac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <main+0x10c>
    2cb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cb6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			ADC_u8GetDigitalValueSync(ADC_u8_CHANNEL_5,&App_u16DigitalValue);
    2cb8:	29 e9       	ldi	r18, 0x99	; 153
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	85 e0       	ldi	r24, 0x05	; 5
    2cbe:	b9 01       	movw	r22, r18
    2cc0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValueSync>
			if(App_u16DigitalValue <= 440){break;} // 2.15V => 440
    2cc4:	80 91 99 00 	lds	r24, 0x0099
    2cc8:	90 91 9a 00 	lds	r25, 0x009A
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	89 3b       	cpi	r24, 0xB9	; 185
    2cd0:	92 07       	cpc	r25, r18
    2cd2:	38 f0       	brcs	.+14     	; 0x2ce2 <main+0x13e>
	u16 value = 0;


	while(1){
		u8 i;
		for(i=1; i<6; i++){
    2cd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd6:	8f 5f       	subi	r24, 0xFF	; 255
    2cd8:	8b a7       	std	Y+43, r24	; 0x2b
    2cda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cdc:	86 30       	cpi	r24, 0x06	; 6
    2cde:	08 f4       	brcc	.+2      	; 0x2ce2 <main+0x13e>
    2ce0:	76 cf       	rjmp	.-276    	; 0x2bce <main+0x2a>
			_delay_ms(100);
			ADC_u8GetDigitalValueSync(ADC_u8_CHANNEL_5,&App_u16DigitalValue);
			if(App_u16DigitalValue <= 440){break;} // 2.15V => 440
		}

		if ((App_u16DigitalValue != 0xFFFF) && (App_u16DigitalValue < 1020)){                                                              //1020(1024) max analog read
    2ce2:	80 91 99 00 	lds	r24, 0x0099
    2ce6:	90 91 9a 00 	lds	r25, 0x009A
    2cea:	2f ef       	ldi	r18, 0xFF	; 255
    2cec:	8f 3f       	cpi	r24, 0xFF	; 255
    2cee:	92 07       	cpc	r25, r18
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <main+0x150>
    2cf2:	ba c0       	rjmp	.+372    	; 0x2e68 <main+0x2c4>
    2cf4:	80 91 99 00 	lds	r24, 0x0099
    2cf8:	90 91 9a 00 	lds	r25, 0x009A
    2cfc:	23 e0       	ldi	r18, 0x03	; 3
    2cfe:	8c 3f       	cpi	r24, 0xFC	; 252
    2d00:	92 07       	cpc	r25, r18
    2d02:	08 f0       	brcs	.+2      	; 0x2d06 <main+0x162>
    2d04:	b1 c0       	rjmp	.+354    	; 0x2e68 <main+0x2c4>
			value =  ((App_u16DigitalValue * res_table[0])/(1023 - App_u16DigitalValue));                                                 //scale value = (Vref)5 * 1000
    2d06:	80 91 99 00 	lds	r24, 0x0099
    2d0a:	90 91 9a 00 	lds	r25, 0x009A
    2d0e:	cc 01       	movw	r24, r24
    2d10:	a0 e0       	ldi	r26, 0x00	; 0
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	20 91 9b 00 	lds	r18, 0x009B
    2d18:	30 91 9c 00 	lds	r19, 0x009C
    2d1c:	40 91 9d 00 	lds	r20, 0x009D
    2d20:	50 91 9e 00 	lds	r21, 0x009E
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	0e 94 a9 18 	call	0x3152	; 0x3152 <__mulsi3>
    2d2c:	7b 01       	movw	r14, r22
    2d2e:	8c 01       	movw	r16, r24
    2d30:	20 91 99 00 	lds	r18, 0x0099
    2d34:	30 91 9a 00 	lds	r19, 0x009A
    2d38:	8f ef       	ldi	r24, 0xFF	; 255
    2d3a:	93 e0       	ldi	r25, 0x03	; 3
    2d3c:	82 1b       	sub	r24, r18
    2d3e:	93 0b       	sbc	r25, r19
    2d40:	9c 01       	movw	r18, r24
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	c8 01       	movw	r24, r16
    2d48:	b7 01       	movw	r22, r14
    2d4a:	0e 94 c8 18 	call	0x3190	; 0x3190 <__udivmodsi4>
    2d4e:	da 01       	movw	r26, r20
    2d50:	c9 01       	movw	r24, r18
    2d52:	9d a7       	std	Y+45, r25	; 0x2d
    2d54:	8c a7       	std	Y+44, r24	; 0x2c
			LCD_u8GoToXY(1,0);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_u8GoToXY>
			LCD_voidWriteString("            ");
    2d5e:	83 e6       	ldi	r24, 0x63	; 99
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteString>
			LCD_u8GoToXY(1,0);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_u8GoToXY>
			LCD_voidWriteNumber(value);
    2d6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d70:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d72:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_voidWriteNumber>
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	aa ef       	ldi	r26, 0xFA	; 250
    2d7c:	b4 e4       	ldi	r27, 0x44	; 68
    2d7e:	89 8f       	std	Y+25, r24	; 0x19
    2d80:	9a 8f       	std	Y+26, r25	; 0x1a
    2d82:	ab 8f       	std	Y+27, r26	; 0x1b
    2d84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d86:	69 8d       	ldd	r22, Y+25	; 0x19
    2d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	4a ef       	ldi	r20, 0xFA	; 250
    2d94:	54 e4       	ldi	r21, 0x44	; 68
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	8d 8b       	std	Y+21, r24	; 0x15
    2da0:	9e 8b       	std	Y+22, r25	; 0x16
    2da2:	af 8b       	std	Y+23, r26	; 0x17
    2da4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2da6:	6d 89       	ldd	r22, Y+21	; 0x15
    2da8:	7e 89       	ldd	r23, Y+22	; 0x16
    2daa:	8f 89       	ldd	r24, Y+23	; 0x17
    2dac:	98 8d       	ldd	r25, Y+24	; 0x18
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e8       	ldi	r20, 0x80	; 128
    2db4:	5f e3       	ldi	r21, 0x3F	; 63
    2db6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dba:	88 23       	and	r24, r24
    2dbc:	2c f4       	brge	.+10     	; 0x2dc8 <main+0x224>
		__ticks = 1;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9c 8b       	std	Y+20, r25	; 0x14
    2dc4:	8b 8b       	std	Y+19, r24	; 0x13
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <main+0x2a2>
	else if (__tmp > 65535)
    2dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dca:	7e 89       	ldd	r23, Y+22	; 0x16
    2dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dce:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	3f ef       	ldi	r19, 0xFF	; 255
    2dd4:	4f e7       	ldi	r20, 0x7F	; 127
    2dd6:	57 e4       	ldi	r21, 0x47	; 71
    2dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ddc:	18 16       	cp	r1, r24
    2dde:	4c f5       	brge	.+82     	; 0x2e32 <main+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de0:	69 8d       	ldd	r22, Y+25	; 0x19
    2de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e2       	ldi	r20, 0x20	; 32
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9c 8b       	std	Y+20, r25	; 0x14
    2e06:	8b 8b       	std	Y+19, r24	; 0x13
    2e08:	0f c0       	rjmp	.+30     	; 0x2e28 <main+0x284>
    2e0a:	88 ec       	ldi	r24, 0xC8	; 200
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9a 8b       	std	Y+18, r25	; 0x12
    2e10:	89 8b       	std	Y+17, r24	; 0x11
    2e12:	89 89       	ldd	r24, Y+17	; 0x11
    2e14:	9a 89       	ldd	r25, Y+18	; 0x12
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <main+0x272>
    2e1a:	9a 8b       	std	Y+18, r25	; 0x12
    2e1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e20:	9c 89       	ldd	r25, Y+20	; 0x14
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	9c 8b       	std	Y+20, r25	; 0x14
    2e26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e28:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <main+0x266>
    2e30:	14 c0       	rjmp	.+40     	; 0x2e5a <main+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e32:	6d 89       	ldd	r22, Y+21	; 0x15
    2e34:	7e 89       	ldd	r23, Y+22	; 0x16
    2e36:	8f 89       	ldd	r24, Y+23	; 0x17
    2e38:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9c 8b       	std	Y+20, r25	; 0x14
    2e44:	8b 8b       	std	Y+19, r24	; 0x13
    2e46:	8b 89       	ldd	r24, Y+19	; 0x13
    2e48:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4a:	98 8b       	std	Y+16, r25	; 0x10
    2e4c:	8f 87       	std	Y+15, r24	; 0x0f
    2e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e50:	98 89       	ldd	r25, Y+16	; 0x10
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <main+0x2ae>
    2e56:	98 8b       	std	Y+16, r25	; 0x10
    2e58:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			App_u16DigitalValue = 0xFFFF;
    2e5a:	8f ef       	ldi	r24, 0xFF	; 255
    2e5c:	9f ef       	ldi	r25, 0xFF	; 255
    2e5e:	90 93 9a 00 	sts	0x009A, r25
    2e62:	80 93 99 00 	sts	0x0099, r24
    2e66:	b0 ce       	rjmp	.-672    	; 0x2bc8 <main+0x24>
		}
		else if(App_u16DigitalValue >= 1020){
    2e68:	80 91 99 00 	lds	r24, 0x0099
    2e6c:	90 91 9a 00 	lds	r25, 0x009A
    2e70:	23 e0       	ldi	r18, 0x03	; 3
    2e72:	8c 3f       	cpi	r24, 0xFC	; 252
    2e74:	92 07       	cpc	r25, r18
    2e76:	08 f4       	brcc	.+2      	; 0x2e7a <main+0x2d6>
    2e78:	83 c0       	rjmp	.+262    	; 0x2f80 <main+0x3dc>
			LCD_u8GoToXY(1,0);
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	60 e0       	ldi	r22, 0x00	; 0
    2e7e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_u8GoToXY>
			LCD_voidWriteString("            ");
    2e82:	83 e6       	ldi	r24, 0x63	; 99
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteString>
			LCD_u8GoToXY(1,0);
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_u8GoToXY>
			LCD_voidWriteString("No Resistor");
    2e92:	80 e7       	ldi	r24, 0x70	; 112
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteString>
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	aa e7       	ldi	r26, 0x7A	; 122
    2ea0:	b4 e4       	ldi	r27, 0x44	; 68
    2ea2:	8b 87       	std	Y+11, r24	; 0x0b
    2ea4:	9c 87       	std	Y+12, r25	; 0x0c
    2ea6:	ad 87       	std	Y+13, r26	; 0x0d
    2ea8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	4a ef       	ldi	r20, 0xFA	; 250
    2eb8:	54 e4       	ldi	r21, 0x44	; 68
    2eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	8f 83       	std	Y+7, r24	; 0x07
    2ec4:	98 87       	std	Y+8, r25	; 0x08
    2ec6:	a9 87       	std	Y+9, r26	; 0x09
    2ec8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ecc:	78 85       	ldd	r23, Y+8	; 0x08
    2ece:	89 85       	ldd	r24, Y+9	; 0x09
    2ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e8       	ldi	r20, 0x80	; 128
    2ed8:	5f e3       	ldi	r21, 0x3F	; 63
    2eda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ede:	88 23       	and	r24, r24
    2ee0:	2c f4       	brge	.+10     	; 0x2eec <main+0x348>
		__ticks = 1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
    2eea:	3f c0       	rjmp	.+126    	; 0x2f6a <main+0x3c6>
	else if (__tmp > 65535)
    2eec:	6f 81       	ldd	r22, Y+7	; 0x07
    2eee:	78 85       	ldd	r23, Y+8	; 0x08
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	3f ef       	ldi	r19, 0xFF	; 255
    2ef8:	4f e7       	ldi	r20, 0x7F	; 127
    2efa:	57 e4       	ldi	r21, 0x47	; 71
    2efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f00:	18 16       	cp	r1, r24
    2f02:	4c f5       	brge	.+82     	; 0x2f56 <main+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e2       	ldi	r20, 0x20	; 32
    2f12:	51 e4       	ldi	r21, 0x41	; 65
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	bc 01       	movw	r22, r24
    2f1e:	cd 01       	movw	r24, r26
    2f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	0f c0       	rjmp	.+30     	; 0x2f4c <main+0x3a8>
    2f2e:	88 ec       	ldi	r24, 0xC8	; 200
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	9c 83       	std	Y+4, r25	; 0x04
    2f34:	8b 83       	std	Y+3, r24	; 0x03
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <main+0x396>
    2f3e:	9c 83       	std	Y+4, r25	; 0x04
    2f40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	69 f7       	brne	.-38     	; 0x2f2e <main+0x38a>
    2f54:	39 ce       	rjmp	.-910    	; 0x2bc8 <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f56:	6f 81       	ldd	r22, Y+7	; 0x07
    2f58:	78 85       	ldd	r23, Y+8	; 0x08
    2f5a:	89 85       	ldd	r24, Y+9	; 0x09
    2f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6e:	9a 83       	std	Y+2, r25	; 0x02
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	9a 81       	ldd	r25, Y+2	; 0x02
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	f1 f7       	brne	.-4      	; 0x2f76 <main+0x3d2>
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	24 ce       	rjmp	.-952    	; 0x2bc8 <main+0x24>
			_delay_ms(1000);
		}
		else{
			LCD_u8GoToXY(1,0);
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_u8GoToXY>
			LCD_voidWriteString("          ");
    2f88:	8c e7       	ldi	r24, 0x7C	; 124
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteString>
			LCD_u8GoToXY(1,0);
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_u8GoToXY>
			LCD_voidWriteString("No Change");
    2f98:	87 e8       	ldi	r24, 0x87	; 135
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteString>
    2fa0:	13 ce       	rjmp	.-986    	; 0x2bc8 <main+0x24>

00002fa2 <initAll>:
		}
	}
	return 0;
}

void initAll(void){
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
	GI_voidEnable();
    2faa:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <GI_voidEnable>
	DIO_voidInit();
    2fae:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidInit>
	ADC_voidInit();
    2fb2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	LCD_voidInit();
    2fb6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_voidInit>

	DIO_u8SetPinDirection (DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_OUTPUT);
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	41 e0       	ldi	r20, 0x01	; 1
    2fc0:	0e 94 b4 07 	call	0xf68	; 0xf68 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection (DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_OUTPUT);
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	61 e0       	ldi	r22, 0x01	; 1
    2fc8:	41 e0       	ldi	r20, 0x01	; 1
    2fca:	0e 94 b4 07 	call	0xf68	; 0xf68 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection (DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_OUTPUT);
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	62 e0       	ldi	r22, 0x02	; 2
    2fd2:	41 e0       	ldi	r20, 0x01	; 1
    2fd4:	0e 94 b4 07 	call	0xf68	; 0xf68 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection (DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_OUTPUT);
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	63 e0       	ldi	r22, 0x03	; 3
    2fdc:	41 e0       	ldi	r20, 0x01	; 1
    2fde:	0e 94 b4 07 	call	0xf68	; 0xf68 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection (DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_OUTPUT);
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	64 e0       	ldi	r22, 0x04	; 4
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	0e 94 b4 07 	call	0xf68	; 0xf68 <DIO_u8SetPinDirection>


	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	61 e0       	ldi	r22, 0x01	; 1
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	62 e0       	ldi	r22, 0x02	; 2
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_LOW);
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	63 e0       	ldi	r22, 0x03	; 3
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_LOW);
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	64 e0       	ldi	r22, 0x04	; 4
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
}
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <setRange>:
void setRange(u8 range){
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	0f 92       	push	r0
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	89 83       	std	Y+1, r24	; 0x01

	if (range == 1){ // 1K range
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	d1 f4       	brne	.+52     	; 0x306a <setRange+0x46>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	41 e0       	ldi	r20, 0x01	; 1
    303c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	61 e0       	ldi	r22, 0x01	; 1
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	62 e0       	ldi	r22, 0x02	; 2
    304e:	40 e0       	ldi	r20, 0x00	; 0
    3050:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_LOW);
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	63 e0       	ldi	r22, 0x03	; 3
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_LOW);
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	64 e0       	ldi	r22, 0x04	; 4
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    3068:	70 c0       	rjmp	.+224    	; 0x314a <setRange+0x126>
	}
	else if (range == 2){ // 2180 range
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	82 30       	cpi	r24, 0x02	; 2
    306e:	d1 f4       	brne	.+52     	; 0x30a4 <setRange+0x80>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	61 e0       	ldi	r22, 0x01	; 1
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	62 e0       	ldi	r22, 0x02	; 2
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_LOW);
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	63 e0       	ldi	r22, 0x03	; 3
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_LOW);
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	64 e0       	ldi	r22, 0x04	; 4
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    30a2:	53 c0       	rjmp	.+166    	; 0x314a <setRange+0x126>
	}
	else if (range == 3){ // 10K range
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	83 30       	cpi	r24, 0x03	; 3
    30a8:	d1 f4       	brne	.+52     	; 0x30de <setRange+0xba>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	61 e0       	ldi	r22, 0x01	; 1
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_HIGH);
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	62 e0       	ldi	r22, 0x02	; 2
    30c2:	41 e0       	ldi	r20, 0x01	; 1
    30c4:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_LOW);
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	63 e0       	ldi	r22, 0x03	; 3
    30cc:	40 e0       	ldi	r20, 0x00	; 0
    30ce:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_LOW);
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	64 e0       	ldi	r22, 0x04	; 4
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    30dc:	36 c0       	rjmp	.+108    	; 0x314a <setRange+0x126>
	}
	else if (range == 4){ // 100K range
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	84 30       	cpi	r24, 0x04	; 4
    30e2:	d1 f4       	brne	.+52     	; 0x3118 <setRange+0xf4>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	40 e0       	ldi	r20, 0x00	; 0
    30ea:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	61 e0       	ldi	r22, 0x01	; 1
    30f2:	40 e0       	ldi	r20, 0x00	; 0
    30f4:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	62 e0       	ldi	r22, 0x02	; 2
    30fc:	40 e0       	ldi	r20, 0x00	; 0
    30fe:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_HIGH);
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	63 e0       	ldi	r22, 0x03	; 3
    3106:	41 e0       	ldi	r20, 0x01	; 1
    3108:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_LOW);
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	64 e0       	ldi	r22, 0x04	; 4
    3110:	40 e0       	ldi	r20, 0x00	; 0
    3112:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
    3116:	19 c0       	rjmp	.+50     	; 0x314a <setRange+0x126>
	}
	else{ // 2M range
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	60 e0       	ldi	r22, 0x00	; 0
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	61 e0       	ldi	r22, 0x01	; 1
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	62 e0       	ldi	r22, 0x02	; 2
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_LOW);
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	63 e0       	ldi	r22, 0x03	; 3
    313a:	40 e0       	ldi	r20, 0x00	; 0
    313c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_HIGH);
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	64 e0       	ldi	r22, 0x04	; 4
    3144:	41 e0       	ldi	r20, 0x01	; 1
    3146:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8SetPinValue>
	}
}
    314a:	0f 90       	pop	r0
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <__mulsi3>:
    3152:	62 9f       	mul	r22, r18
    3154:	d0 01       	movw	r26, r0
    3156:	73 9f       	mul	r23, r19
    3158:	f0 01       	movw	r30, r0
    315a:	82 9f       	mul	r24, r18
    315c:	e0 0d       	add	r30, r0
    315e:	f1 1d       	adc	r31, r1
    3160:	64 9f       	mul	r22, r20
    3162:	e0 0d       	add	r30, r0
    3164:	f1 1d       	adc	r31, r1
    3166:	92 9f       	mul	r25, r18
    3168:	f0 0d       	add	r31, r0
    316a:	83 9f       	mul	r24, r19
    316c:	f0 0d       	add	r31, r0
    316e:	74 9f       	mul	r23, r20
    3170:	f0 0d       	add	r31, r0
    3172:	65 9f       	mul	r22, r21
    3174:	f0 0d       	add	r31, r0
    3176:	99 27       	eor	r25, r25
    3178:	72 9f       	mul	r23, r18
    317a:	b0 0d       	add	r27, r0
    317c:	e1 1d       	adc	r30, r1
    317e:	f9 1f       	adc	r31, r25
    3180:	63 9f       	mul	r22, r19
    3182:	b0 0d       	add	r27, r0
    3184:	e1 1d       	adc	r30, r1
    3186:	f9 1f       	adc	r31, r25
    3188:	bd 01       	movw	r22, r26
    318a:	cf 01       	movw	r24, r30
    318c:	11 24       	eor	r1, r1
    318e:	08 95       	ret

00003190 <__udivmodsi4>:
    3190:	a1 e2       	ldi	r26, 0x21	; 33
    3192:	1a 2e       	mov	r1, r26
    3194:	aa 1b       	sub	r26, r26
    3196:	bb 1b       	sub	r27, r27
    3198:	fd 01       	movw	r30, r26
    319a:	0d c0       	rjmp	.+26     	; 0x31b6 <__udivmodsi4_ep>

0000319c <__udivmodsi4_loop>:
    319c:	aa 1f       	adc	r26, r26
    319e:	bb 1f       	adc	r27, r27
    31a0:	ee 1f       	adc	r30, r30
    31a2:	ff 1f       	adc	r31, r31
    31a4:	a2 17       	cp	r26, r18
    31a6:	b3 07       	cpc	r27, r19
    31a8:	e4 07       	cpc	r30, r20
    31aa:	f5 07       	cpc	r31, r21
    31ac:	20 f0       	brcs	.+8      	; 0x31b6 <__udivmodsi4_ep>
    31ae:	a2 1b       	sub	r26, r18
    31b0:	b3 0b       	sbc	r27, r19
    31b2:	e4 0b       	sbc	r30, r20
    31b4:	f5 0b       	sbc	r31, r21

000031b6 <__udivmodsi4_ep>:
    31b6:	66 1f       	adc	r22, r22
    31b8:	77 1f       	adc	r23, r23
    31ba:	88 1f       	adc	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	1a 94       	dec	r1
    31c0:	69 f7       	brne	.-38     	; 0x319c <__udivmodsi4_loop>
    31c2:	60 95       	com	r22
    31c4:	70 95       	com	r23
    31c6:	80 95       	com	r24
    31c8:	90 95       	com	r25
    31ca:	9b 01       	movw	r18, r22
    31cc:	ac 01       	movw	r20, r24
    31ce:	bd 01       	movw	r22, r26
    31d0:	cf 01       	movw	r24, r30
    31d2:	08 95       	ret

000031d4 <__prologue_saves__>:
    31d4:	2f 92       	push	r2
    31d6:	3f 92       	push	r3
    31d8:	4f 92       	push	r4
    31da:	5f 92       	push	r5
    31dc:	6f 92       	push	r6
    31de:	7f 92       	push	r7
    31e0:	8f 92       	push	r8
    31e2:	9f 92       	push	r9
    31e4:	af 92       	push	r10
    31e6:	bf 92       	push	r11
    31e8:	cf 92       	push	r12
    31ea:	df 92       	push	r13
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	ca 1b       	sub	r28, r26
    31fe:	db 0b       	sbc	r29, r27
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	09 94       	ijmp

0000320c <__epilogue_restores__>:
    320c:	2a 88       	ldd	r2, Y+18	; 0x12
    320e:	39 88       	ldd	r3, Y+17	; 0x11
    3210:	48 88       	ldd	r4, Y+16	; 0x10
    3212:	5f 84       	ldd	r5, Y+15	; 0x0f
    3214:	6e 84       	ldd	r6, Y+14	; 0x0e
    3216:	7d 84       	ldd	r7, Y+13	; 0x0d
    3218:	8c 84       	ldd	r8, Y+12	; 0x0c
    321a:	9b 84       	ldd	r9, Y+11	; 0x0b
    321c:	aa 84       	ldd	r10, Y+10	; 0x0a
    321e:	b9 84       	ldd	r11, Y+9	; 0x09
    3220:	c8 84       	ldd	r12, Y+8	; 0x08
    3222:	df 80       	ldd	r13, Y+7	; 0x07
    3224:	ee 80       	ldd	r14, Y+6	; 0x06
    3226:	fd 80       	ldd	r15, Y+5	; 0x05
    3228:	0c 81       	ldd	r16, Y+4	; 0x04
    322a:	1b 81       	ldd	r17, Y+3	; 0x03
    322c:	aa 81       	ldd	r26, Y+2	; 0x02
    322e:	b9 81       	ldd	r27, Y+1	; 0x01
    3230:	ce 0f       	add	r28, r30
    3232:	d1 1d       	adc	r29, r1
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	ed 01       	movw	r28, r26
    3240:	08 95       	ret

00003242 <sprintf>:
    3242:	ae e0       	ldi	r26, 0x0E	; 14
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	e7 e2       	ldi	r30, 0x27	; 39
    3248:	f9 e1       	ldi	r31, 0x19	; 25
    324a:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__prologue_saves__+0x1c>
    324e:	0d 89       	ldd	r16, Y+21	; 0x15
    3250:	1e 89       	ldd	r17, Y+22	; 0x16
    3252:	86 e0       	ldi	r24, 0x06	; 6
    3254:	8c 83       	std	Y+4, r24	; 0x04
    3256:	1a 83       	std	Y+2, r17	; 0x02
    3258:	09 83       	std	Y+1, r16	; 0x01
    325a:	8f ef       	ldi	r24, 0xFF	; 255
    325c:	9f e7       	ldi	r25, 0x7F	; 127
    325e:	9e 83       	std	Y+6, r25	; 0x06
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	9e 01       	movw	r18, r28
    3264:	27 5e       	subi	r18, 0xE7	; 231
    3266:	3f 4f       	sbci	r19, 0xFF	; 255
    3268:	ce 01       	movw	r24, r28
    326a:	01 96       	adiw	r24, 0x01	; 1
    326c:	6f 89       	ldd	r22, Y+23	; 0x17
    326e:	78 8d       	ldd	r23, Y+24	; 0x18
    3270:	a9 01       	movw	r20, r18
    3272:	0e 94 45 19 	call	0x328a	; 0x328a <vfprintf>
    3276:	2f 81       	ldd	r18, Y+7	; 0x07
    3278:	38 85       	ldd	r19, Y+8	; 0x08
    327a:	02 0f       	add	r16, r18
    327c:	13 1f       	adc	r17, r19
    327e:	f8 01       	movw	r30, r16
    3280:	10 82       	st	Z, r1
    3282:	2e 96       	adiw	r28, 0x0e	; 14
    3284:	e4 e0       	ldi	r30, 0x04	; 4
    3286:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__epilogue_restores__+0x1c>

0000328a <vfprintf>:
    328a:	ab e0       	ldi	r26, 0x0B	; 11
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	eb e4       	ldi	r30, 0x4B	; 75
    3290:	f9 e1       	ldi	r31, 0x19	; 25
    3292:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__prologue_saves__>
    3296:	3c 01       	movw	r6, r24
    3298:	2b 01       	movw	r4, r22
    329a:	5a 01       	movw	r10, r20
    329c:	fc 01       	movw	r30, r24
    329e:	17 82       	std	Z+7, r1	; 0x07
    32a0:	16 82       	std	Z+6, r1	; 0x06
    32a2:	83 81       	ldd	r24, Z+3	; 0x03
    32a4:	81 fd       	sbrc	r24, 1
    32a6:	03 c0       	rjmp	.+6      	; 0x32ae <vfprintf+0x24>
    32a8:	6f ef       	ldi	r22, 0xFF	; 255
    32aa:	7f ef       	ldi	r23, 0xFF	; 255
    32ac:	c6 c1       	rjmp	.+908    	; 0x363a <vfprintf+0x3b0>
    32ae:	9a e0       	ldi	r25, 0x0A	; 10
    32b0:	89 2e       	mov	r8, r25
    32b2:	1e 01       	movw	r2, r28
    32b4:	08 94       	sec
    32b6:	21 1c       	adc	r2, r1
    32b8:	31 1c       	adc	r3, r1
    32ba:	f3 01       	movw	r30, r6
    32bc:	23 81       	ldd	r18, Z+3	; 0x03
    32be:	f2 01       	movw	r30, r4
    32c0:	23 fd       	sbrc	r18, 3
    32c2:	85 91       	lpm	r24, Z+
    32c4:	23 ff       	sbrs	r18, 3
    32c6:	81 91       	ld	r24, Z+
    32c8:	2f 01       	movw	r4, r30
    32ca:	88 23       	and	r24, r24
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <vfprintf+0x46>
    32ce:	b2 c1       	rjmp	.+868    	; 0x3634 <vfprintf+0x3aa>
    32d0:	85 32       	cpi	r24, 0x25	; 37
    32d2:	39 f4       	brne	.+14     	; 0x32e2 <vfprintf+0x58>
    32d4:	23 fd       	sbrc	r18, 3
    32d6:	85 91       	lpm	r24, Z+
    32d8:	23 ff       	sbrs	r18, 3
    32da:	81 91       	ld	r24, Z+
    32dc:	2f 01       	movw	r4, r30
    32de:	85 32       	cpi	r24, 0x25	; 37
    32e0:	29 f4       	brne	.+10     	; 0x32ec <vfprintf+0x62>
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	b3 01       	movw	r22, r6
    32e6:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    32ea:	e7 cf       	rjmp	.-50     	; 0x32ba <vfprintf+0x30>
    32ec:	98 2f       	mov	r25, r24
    32ee:	ff 24       	eor	r15, r15
    32f0:	ee 24       	eor	r14, r14
    32f2:	99 24       	eor	r9, r9
    32f4:	ff e1       	ldi	r31, 0x1F	; 31
    32f6:	ff 15       	cp	r31, r15
    32f8:	d0 f0       	brcs	.+52     	; 0x332e <vfprintf+0xa4>
    32fa:	9b 32       	cpi	r25, 0x2B	; 43
    32fc:	69 f0       	breq	.+26     	; 0x3318 <vfprintf+0x8e>
    32fe:	9c 32       	cpi	r25, 0x2C	; 44
    3300:	28 f4       	brcc	.+10     	; 0x330c <vfprintf+0x82>
    3302:	90 32       	cpi	r25, 0x20	; 32
    3304:	59 f0       	breq	.+22     	; 0x331c <vfprintf+0x92>
    3306:	93 32       	cpi	r25, 0x23	; 35
    3308:	91 f4       	brne	.+36     	; 0x332e <vfprintf+0xa4>
    330a:	0e c0       	rjmp	.+28     	; 0x3328 <vfprintf+0x9e>
    330c:	9d 32       	cpi	r25, 0x2D	; 45
    330e:	49 f0       	breq	.+18     	; 0x3322 <vfprintf+0x98>
    3310:	90 33       	cpi	r25, 0x30	; 48
    3312:	69 f4       	brne	.+26     	; 0x332e <vfprintf+0xa4>
    3314:	41 e0       	ldi	r20, 0x01	; 1
    3316:	24 c0       	rjmp	.+72     	; 0x3360 <vfprintf+0xd6>
    3318:	52 e0       	ldi	r21, 0x02	; 2
    331a:	f5 2a       	or	r15, r21
    331c:	84 e0       	ldi	r24, 0x04	; 4
    331e:	f8 2a       	or	r15, r24
    3320:	28 c0       	rjmp	.+80     	; 0x3372 <vfprintf+0xe8>
    3322:	98 e0       	ldi	r25, 0x08	; 8
    3324:	f9 2a       	or	r15, r25
    3326:	25 c0       	rjmp	.+74     	; 0x3372 <vfprintf+0xe8>
    3328:	e0 e1       	ldi	r30, 0x10	; 16
    332a:	fe 2a       	or	r15, r30
    332c:	22 c0       	rjmp	.+68     	; 0x3372 <vfprintf+0xe8>
    332e:	f7 fc       	sbrc	r15, 7
    3330:	29 c0       	rjmp	.+82     	; 0x3384 <vfprintf+0xfa>
    3332:	89 2f       	mov	r24, r25
    3334:	80 53       	subi	r24, 0x30	; 48
    3336:	8a 30       	cpi	r24, 0x0A	; 10
    3338:	70 f4       	brcc	.+28     	; 0x3356 <vfprintf+0xcc>
    333a:	f6 fe       	sbrs	r15, 6
    333c:	05 c0       	rjmp	.+10     	; 0x3348 <vfprintf+0xbe>
    333e:	98 9c       	mul	r9, r8
    3340:	90 2c       	mov	r9, r0
    3342:	11 24       	eor	r1, r1
    3344:	98 0e       	add	r9, r24
    3346:	15 c0       	rjmp	.+42     	; 0x3372 <vfprintf+0xe8>
    3348:	e8 9c       	mul	r14, r8
    334a:	e0 2c       	mov	r14, r0
    334c:	11 24       	eor	r1, r1
    334e:	e8 0e       	add	r14, r24
    3350:	f0 e2       	ldi	r31, 0x20	; 32
    3352:	ff 2a       	or	r15, r31
    3354:	0e c0       	rjmp	.+28     	; 0x3372 <vfprintf+0xe8>
    3356:	9e 32       	cpi	r25, 0x2E	; 46
    3358:	29 f4       	brne	.+10     	; 0x3364 <vfprintf+0xda>
    335a:	f6 fc       	sbrc	r15, 6
    335c:	6b c1       	rjmp	.+726    	; 0x3634 <vfprintf+0x3aa>
    335e:	40 e4       	ldi	r20, 0x40	; 64
    3360:	f4 2a       	or	r15, r20
    3362:	07 c0       	rjmp	.+14     	; 0x3372 <vfprintf+0xe8>
    3364:	9c 36       	cpi	r25, 0x6C	; 108
    3366:	19 f4       	brne	.+6      	; 0x336e <vfprintf+0xe4>
    3368:	50 e8       	ldi	r21, 0x80	; 128
    336a:	f5 2a       	or	r15, r21
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <vfprintf+0xe8>
    336e:	98 36       	cpi	r25, 0x68	; 104
    3370:	49 f4       	brne	.+18     	; 0x3384 <vfprintf+0xfa>
    3372:	f2 01       	movw	r30, r4
    3374:	23 fd       	sbrc	r18, 3
    3376:	95 91       	lpm	r25, Z+
    3378:	23 ff       	sbrs	r18, 3
    337a:	91 91       	ld	r25, Z+
    337c:	2f 01       	movw	r4, r30
    337e:	99 23       	and	r25, r25
    3380:	09 f0       	breq	.+2      	; 0x3384 <vfprintf+0xfa>
    3382:	b8 cf       	rjmp	.-144    	; 0x32f4 <vfprintf+0x6a>
    3384:	89 2f       	mov	r24, r25
    3386:	85 54       	subi	r24, 0x45	; 69
    3388:	83 30       	cpi	r24, 0x03	; 3
    338a:	18 f0       	brcs	.+6      	; 0x3392 <vfprintf+0x108>
    338c:	80 52       	subi	r24, 0x20	; 32
    338e:	83 30       	cpi	r24, 0x03	; 3
    3390:	38 f4       	brcc	.+14     	; 0x33a0 <vfprintf+0x116>
    3392:	44 e0       	ldi	r20, 0x04	; 4
    3394:	50 e0       	ldi	r21, 0x00	; 0
    3396:	a4 0e       	add	r10, r20
    3398:	b5 1e       	adc	r11, r21
    339a:	5f e3       	ldi	r21, 0x3F	; 63
    339c:	59 83       	std	Y+1, r21	; 0x01
    339e:	0f c0       	rjmp	.+30     	; 0x33be <vfprintf+0x134>
    33a0:	93 36       	cpi	r25, 0x63	; 99
    33a2:	31 f0       	breq	.+12     	; 0x33b0 <vfprintf+0x126>
    33a4:	93 37       	cpi	r25, 0x73	; 115
    33a6:	79 f0       	breq	.+30     	; 0x33c6 <vfprintf+0x13c>
    33a8:	93 35       	cpi	r25, 0x53	; 83
    33aa:	09 f0       	breq	.+2      	; 0x33ae <vfprintf+0x124>
    33ac:	56 c0       	rjmp	.+172    	; 0x345a <vfprintf+0x1d0>
    33ae:	20 c0       	rjmp	.+64     	; 0x33f0 <vfprintf+0x166>
    33b0:	f5 01       	movw	r30, r10
    33b2:	80 81       	ld	r24, Z
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	42 e0       	ldi	r20, 0x02	; 2
    33b8:	50 e0       	ldi	r21, 0x00	; 0
    33ba:	a4 0e       	add	r10, r20
    33bc:	b5 1e       	adc	r11, r21
    33be:	61 01       	movw	r12, r2
    33c0:	01 e0       	ldi	r16, 0x01	; 1
    33c2:	10 e0       	ldi	r17, 0x00	; 0
    33c4:	12 c0       	rjmp	.+36     	; 0x33ea <vfprintf+0x160>
    33c6:	f5 01       	movw	r30, r10
    33c8:	c0 80       	ld	r12, Z
    33ca:	d1 80       	ldd	r13, Z+1	; 0x01
    33cc:	f6 fc       	sbrc	r15, 6
    33ce:	03 c0       	rjmp	.+6      	; 0x33d6 <vfprintf+0x14c>
    33d0:	6f ef       	ldi	r22, 0xFF	; 255
    33d2:	7f ef       	ldi	r23, 0xFF	; 255
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <vfprintf+0x150>
    33d6:	69 2d       	mov	r22, r9
    33d8:	70 e0       	ldi	r23, 0x00	; 0
    33da:	42 e0       	ldi	r20, 0x02	; 2
    33dc:	50 e0       	ldi	r21, 0x00	; 0
    33de:	a4 0e       	add	r10, r20
    33e0:	b5 1e       	adc	r11, r21
    33e2:	c6 01       	movw	r24, r12
    33e4:	0e 94 2d 1b 	call	0x365a	; 0x365a <strnlen>
    33e8:	8c 01       	movw	r16, r24
    33ea:	5f e7       	ldi	r21, 0x7F	; 127
    33ec:	f5 22       	and	r15, r21
    33ee:	14 c0       	rjmp	.+40     	; 0x3418 <vfprintf+0x18e>
    33f0:	f5 01       	movw	r30, r10
    33f2:	c0 80       	ld	r12, Z
    33f4:	d1 80       	ldd	r13, Z+1	; 0x01
    33f6:	f6 fc       	sbrc	r15, 6
    33f8:	03 c0       	rjmp	.+6      	; 0x3400 <vfprintf+0x176>
    33fa:	6f ef       	ldi	r22, 0xFF	; 255
    33fc:	7f ef       	ldi	r23, 0xFF	; 255
    33fe:	02 c0       	rjmp	.+4      	; 0x3404 <vfprintf+0x17a>
    3400:	69 2d       	mov	r22, r9
    3402:	70 e0       	ldi	r23, 0x00	; 0
    3404:	42 e0       	ldi	r20, 0x02	; 2
    3406:	50 e0       	ldi	r21, 0x00	; 0
    3408:	a4 0e       	add	r10, r20
    340a:	b5 1e       	adc	r11, r21
    340c:	c6 01       	movw	r24, r12
    340e:	0e 94 22 1b 	call	0x3644	; 0x3644 <strnlen_P>
    3412:	8c 01       	movw	r16, r24
    3414:	50 e8       	ldi	r21, 0x80	; 128
    3416:	f5 2a       	or	r15, r21
    3418:	f3 fe       	sbrs	r15, 3
    341a:	07 c0       	rjmp	.+14     	; 0x342a <vfprintf+0x1a0>
    341c:	1a c0       	rjmp	.+52     	; 0x3452 <vfprintf+0x1c8>
    341e:	80 e2       	ldi	r24, 0x20	; 32
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	b3 01       	movw	r22, r6
    3424:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    3428:	ea 94       	dec	r14
    342a:	8e 2d       	mov	r24, r14
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	08 17       	cp	r16, r24
    3430:	19 07       	cpc	r17, r25
    3432:	a8 f3       	brcs	.-22     	; 0x341e <vfprintf+0x194>
    3434:	0e c0       	rjmp	.+28     	; 0x3452 <vfprintf+0x1c8>
    3436:	f6 01       	movw	r30, r12
    3438:	f7 fc       	sbrc	r15, 7
    343a:	85 91       	lpm	r24, Z+
    343c:	f7 fe       	sbrs	r15, 7
    343e:	81 91       	ld	r24, Z+
    3440:	6f 01       	movw	r12, r30
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	b3 01       	movw	r22, r6
    3446:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    344a:	e1 10       	cpse	r14, r1
    344c:	ea 94       	dec	r14
    344e:	01 50       	subi	r16, 0x01	; 1
    3450:	10 40       	sbci	r17, 0x00	; 0
    3452:	01 15       	cp	r16, r1
    3454:	11 05       	cpc	r17, r1
    3456:	79 f7       	brne	.-34     	; 0x3436 <vfprintf+0x1ac>
    3458:	ea c0       	rjmp	.+468    	; 0x362e <vfprintf+0x3a4>
    345a:	94 36       	cpi	r25, 0x64	; 100
    345c:	11 f0       	breq	.+4      	; 0x3462 <vfprintf+0x1d8>
    345e:	99 36       	cpi	r25, 0x69	; 105
    3460:	69 f5       	brne	.+90     	; 0x34bc <vfprintf+0x232>
    3462:	f7 fe       	sbrs	r15, 7
    3464:	08 c0       	rjmp	.+16     	; 0x3476 <vfprintf+0x1ec>
    3466:	f5 01       	movw	r30, r10
    3468:	20 81       	ld	r18, Z
    346a:	31 81       	ldd	r19, Z+1	; 0x01
    346c:	42 81       	ldd	r20, Z+2	; 0x02
    346e:	53 81       	ldd	r21, Z+3	; 0x03
    3470:	84 e0       	ldi	r24, 0x04	; 4
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	0a c0       	rjmp	.+20     	; 0x348a <vfprintf+0x200>
    3476:	f5 01       	movw	r30, r10
    3478:	80 81       	ld	r24, Z
    347a:	91 81       	ldd	r25, Z+1	; 0x01
    347c:	9c 01       	movw	r18, r24
    347e:	44 27       	eor	r20, r20
    3480:	37 fd       	sbrc	r19, 7
    3482:	40 95       	com	r20
    3484:	54 2f       	mov	r21, r20
    3486:	82 e0       	ldi	r24, 0x02	; 2
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	a8 0e       	add	r10, r24
    348c:	b9 1e       	adc	r11, r25
    348e:	9f e6       	ldi	r25, 0x6F	; 111
    3490:	f9 22       	and	r15, r25
    3492:	57 ff       	sbrs	r21, 7
    3494:	09 c0       	rjmp	.+18     	; 0x34a8 <vfprintf+0x21e>
    3496:	50 95       	com	r21
    3498:	40 95       	com	r20
    349a:	30 95       	com	r19
    349c:	21 95       	neg	r18
    349e:	3f 4f       	sbci	r19, 0xFF	; 255
    34a0:	4f 4f       	sbci	r20, 0xFF	; 255
    34a2:	5f 4f       	sbci	r21, 0xFF	; 255
    34a4:	e0 e8       	ldi	r30, 0x80	; 128
    34a6:	fe 2a       	or	r15, r30
    34a8:	ca 01       	movw	r24, r20
    34aa:	b9 01       	movw	r22, r18
    34ac:	a1 01       	movw	r20, r2
    34ae:	2a e0       	ldi	r18, 0x0A	; 10
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__ultoa_invert>
    34b6:	d8 2e       	mov	r13, r24
    34b8:	d2 18       	sub	r13, r2
    34ba:	40 c0       	rjmp	.+128    	; 0x353c <vfprintf+0x2b2>
    34bc:	95 37       	cpi	r25, 0x75	; 117
    34be:	29 f4       	brne	.+10     	; 0x34ca <vfprintf+0x240>
    34c0:	1f 2d       	mov	r17, r15
    34c2:	1f 7e       	andi	r17, 0xEF	; 239
    34c4:	2a e0       	ldi	r18, 0x0A	; 10
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	1d c0       	rjmp	.+58     	; 0x3504 <vfprintf+0x27a>
    34ca:	1f 2d       	mov	r17, r15
    34cc:	19 7f       	andi	r17, 0xF9	; 249
    34ce:	9f 36       	cpi	r25, 0x6F	; 111
    34d0:	61 f0       	breq	.+24     	; 0x34ea <vfprintf+0x260>
    34d2:	90 37       	cpi	r25, 0x70	; 112
    34d4:	20 f4       	brcc	.+8      	; 0x34de <vfprintf+0x254>
    34d6:	98 35       	cpi	r25, 0x58	; 88
    34d8:	09 f0       	breq	.+2      	; 0x34dc <vfprintf+0x252>
    34da:	ac c0       	rjmp	.+344    	; 0x3634 <vfprintf+0x3aa>
    34dc:	0f c0       	rjmp	.+30     	; 0x34fc <vfprintf+0x272>
    34de:	90 37       	cpi	r25, 0x70	; 112
    34e0:	39 f0       	breq	.+14     	; 0x34f0 <vfprintf+0x266>
    34e2:	98 37       	cpi	r25, 0x78	; 120
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <vfprintf+0x25e>
    34e6:	a6 c0       	rjmp	.+332    	; 0x3634 <vfprintf+0x3aa>
    34e8:	04 c0       	rjmp	.+8      	; 0x34f2 <vfprintf+0x268>
    34ea:	28 e0       	ldi	r18, 0x08	; 8
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	0a c0       	rjmp	.+20     	; 0x3504 <vfprintf+0x27a>
    34f0:	10 61       	ori	r17, 0x10	; 16
    34f2:	14 fd       	sbrc	r17, 4
    34f4:	14 60       	ori	r17, 0x04	; 4
    34f6:	20 e1       	ldi	r18, 0x10	; 16
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	04 c0       	rjmp	.+8      	; 0x3504 <vfprintf+0x27a>
    34fc:	14 fd       	sbrc	r17, 4
    34fe:	16 60       	ori	r17, 0x06	; 6
    3500:	20 e1       	ldi	r18, 0x10	; 16
    3502:	32 e0       	ldi	r19, 0x02	; 2
    3504:	17 ff       	sbrs	r17, 7
    3506:	08 c0       	rjmp	.+16     	; 0x3518 <vfprintf+0x28e>
    3508:	f5 01       	movw	r30, r10
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	44 e0       	ldi	r20, 0x04	; 4
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	08 c0       	rjmp	.+16     	; 0x3528 <vfprintf+0x29e>
    3518:	f5 01       	movw	r30, r10
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	bc 01       	movw	r22, r24
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	42 e0       	ldi	r20, 0x02	; 2
    3526:	50 e0       	ldi	r21, 0x00	; 0
    3528:	a4 0e       	add	r10, r20
    352a:	b5 1e       	adc	r11, r21
    352c:	a1 01       	movw	r20, r2
    352e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__ultoa_invert>
    3532:	d8 2e       	mov	r13, r24
    3534:	d2 18       	sub	r13, r2
    3536:	8f e7       	ldi	r24, 0x7F	; 127
    3538:	f8 2e       	mov	r15, r24
    353a:	f1 22       	and	r15, r17
    353c:	f6 fe       	sbrs	r15, 6
    353e:	0b c0       	rjmp	.+22     	; 0x3556 <vfprintf+0x2cc>
    3540:	5e ef       	ldi	r21, 0xFE	; 254
    3542:	f5 22       	and	r15, r21
    3544:	d9 14       	cp	r13, r9
    3546:	38 f4       	brcc	.+14     	; 0x3556 <vfprintf+0x2cc>
    3548:	f4 fe       	sbrs	r15, 4
    354a:	07 c0       	rjmp	.+14     	; 0x355a <vfprintf+0x2d0>
    354c:	f2 fc       	sbrc	r15, 2
    354e:	05 c0       	rjmp	.+10     	; 0x355a <vfprintf+0x2d0>
    3550:	8f ee       	ldi	r24, 0xEF	; 239
    3552:	f8 22       	and	r15, r24
    3554:	02 c0       	rjmp	.+4      	; 0x355a <vfprintf+0x2d0>
    3556:	1d 2d       	mov	r17, r13
    3558:	01 c0       	rjmp	.+2      	; 0x355c <vfprintf+0x2d2>
    355a:	19 2d       	mov	r17, r9
    355c:	f4 fe       	sbrs	r15, 4
    355e:	0d c0       	rjmp	.+26     	; 0x357a <vfprintf+0x2f0>
    3560:	fe 01       	movw	r30, r28
    3562:	ed 0d       	add	r30, r13
    3564:	f1 1d       	adc	r31, r1
    3566:	80 81       	ld	r24, Z
    3568:	80 33       	cpi	r24, 0x30	; 48
    356a:	19 f4       	brne	.+6      	; 0x3572 <vfprintf+0x2e8>
    356c:	99 ee       	ldi	r25, 0xE9	; 233
    356e:	f9 22       	and	r15, r25
    3570:	08 c0       	rjmp	.+16     	; 0x3582 <vfprintf+0x2f8>
    3572:	1f 5f       	subi	r17, 0xFF	; 255
    3574:	f2 fe       	sbrs	r15, 2
    3576:	05 c0       	rjmp	.+10     	; 0x3582 <vfprintf+0x2f8>
    3578:	03 c0       	rjmp	.+6      	; 0x3580 <vfprintf+0x2f6>
    357a:	8f 2d       	mov	r24, r15
    357c:	86 78       	andi	r24, 0x86	; 134
    357e:	09 f0       	breq	.+2      	; 0x3582 <vfprintf+0x2f8>
    3580:	1f 5f       	subi	r17, 0xFF	; 255
    3582:	0f 2d       	mov	r16, r15
    3584:	f3 fc       	sbrc	r15, 3
    3586:	14 c0       	rjmp	.+40     	; 0x35b0 <vfprintf+0x326>
    3588:	f0 fe       	sbrs	r15, 0
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <vfprintf+0x320>
    358c:	1e 15       	cp	r17, r14
    358e:	10 f0       	brcs	.+4      	; 0x3594 <vfprintf+0x30a>
    3590:	9d 2c       	mov	r9, r13
    3592:	0b c0       	rjmp	.+22     	; 0x35aa <vfprintf+0x320>
    3594:	9d 2c       	mov	r9, r13
    3596:	9e 0c       	add	r9, r14
    3598:	91 1a       	sub	r9, r17
    359a:	1e 2d       	mov	r17, r14
    359c:	06 c0       	rjmp	.+12     	; 0x35aa <vfprintf+0x320>
    359e:	80 e2       	ldi	r24, 0x20	; 32
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	b3 01       	movw	r22, r6
    35a4:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    35a8:	1f 5f       	subi	r17, 0xFF	; 255
    35aa:	1e 15       	cp	r17, r14
    35ac:	c0 f3       	brcs	.-16     	; 0x359e <vfprintf+0x314>
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <vfprintf+0x32e>
    35b0:	1e 15       	cp	r17, r14
    35b2:	10 f4       	brcc	.+4      	; 0x35b8 <vfprintf+0x32e>
    35b4:	e1 1a       	sub	r14, r17
    35b6:	01 c0       	rjmp	.+2      	; 0x35ba <vfprintf+0x330>
    35b8:	ee 24       	eor	r14, r14
    35ba:	04 ff       	sbrs	r16, 4
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <vfprintf+0x352>
    35be:	80 e3       	ldi	r24, 0x30	; 48
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	b3 01       	movw	r22, r6
    35c4:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    35c8:	02 ff       	sbrs	r16, 2
    35ca:	1d c0       	rjmp	.+58     	; 0x3606 <vfprintf+0x37c>
    35cc:	01 fd       	sbrc	r16, 1
    35ce:	03 c0       	rjmp	.+6      	; 0x35d6 <vfprintf+0x34c>
    35d0:	88 e7       	ldi	r24, 0x78	; 120
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	0e c0       	rjmp	.+28     	; 0x35f2 <vfprintf+0x368>
    35d6:	88 e5       	ldi	r24, 0x58	; 88
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	0b c0       	rjmp	.+22     	; 0x35f2 <vfprintf+0x368>
    35dc:	80 2f       	mov	r24, r16
    35de:	86 78       	andi	r24, 0x86	; 134
    35e0:	91 f0       	breq	.+36     	; 0x3606 <vfprintf+0x37c>
    35e2:	01 ff       	sbrs	r16, 1
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <vfprintf+0x360>
    35e6:	8b e2       	ldi	r24, 0x2B	; 43
    35e8:	01 c0       	rjmp	.+2      	; 0x35ec <vfprintf+0x362>
    35ea:	80 e2       	ldi	r24, 0x20	; 32
    35ec:	f7 fc       	sbrc	r15, 7
    35ee:	8d e2       	ldi	r24, 0x2D	; 45
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	b3 01       	movw	r22, r6
    35f4:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    35f8:	06 c0       	rjmp	.+12     	; 0x3606 <vfprintf+0x37c>
    35fa:	80 e3       	ldi	r24, 0x30	; 48
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	b3 01       	movw	r22, r6
    3600:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    3604:	9a 94       	dec	r9
    3606:	d9 14       	cp	r13, r9
    3608:	c0 f3       	brcs	.-16     	; 0x35fa <vfprintf+0x370>
    360a:	da 94       	dec	r13
    360c:	f1 01       	movw	r30, r2
    360e:	ed 0d       	add	r30, r13
    3610:	f1 1d       	adc	r31, r1
    3612:	80 81       	ld	r24, Z
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	b3 01       	movw	r22, r6
    3618:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    361c:	dd 20       	and	r13, r13
    361e:	a9 f7       	brne	.-22     	; 0x360a <vfprintf+0x380>
    3620:	06 c0       	rjmp	.+12     	; 0x362e <vfprintf+0x3a4>
    3622:	80 e2       	ldi	r24, 0x20	; 32
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	b3 01       	movw	r22, r6
    3628:	0e 94 38 1b 	call	0x3670	; 0x3670 <fputc>
    362c:	ea 94       	dec	r14
    362e:	ee 20       	and	r14, r14
    3630:	c1 f7       	brne	.-16     	; 0x3622 <vfprintf+0x398>
    3632:	43 ce       	rjmp	.-890    	; 0x32ba <vfprintf+0x30>
    3634:	f3 01       	movw	r30, r6
    3636:	66 81       	ldd	r22, Z+6	; 0x06
    3638:	77 81       	ldd	r23, Z+7	; 0x07
    363a:	cb 01       	movw	r24, r22
    363c:	2b 96       	adiw	r28, 0x0b	; 11
    363e:	e2 e1       	ldi	r30, 0x12	; 18
    3640:	0c 94 06 19 	jmp	0x320c	; 0x320c <__epilogue_restores__>

00003644 <strnlen_P>:
    3644:	fc 01       	movw	r30, r24
    3646:	05 90       	lpm	r0, Z+
    3648:	61 50       	subi	r22, 0x01	; 1
    364a:	70 40       	sbci	r23, 0x00	; 0
    364c:	01 10       	cpse	r0, r1
    364e:	d8 f7       	brcc	.-10     	; 0x3646 <strnlen_P+0x2>
    3650:	80 95       	com	r24
    3652:	90 95       	com	r25
    3654:	8e 0f       	add	r24, r30
    3656:	9f 1f       	adc	r25, r31
    3658:	08 95       	ret

0000365a <strnlen>:
    365a:	fc 01       	movw	r30, r24
    365c:	61 50       	subi	r22, 0x01	; 1
    365e:	70 40       	sbci	r23, 0x00	; 0
    3660:	01 90       	ld	r0, Z+
    3662:	01 10       	cpse	r0, r1
    3664:	d8 f7       	brcc	.-10     	; 0x365c <strnlen+0x2>
    3666:	80 95       	com	r24
    3668:	90 95       	com	r25
    366a:	8e 0f       	add	r24, r30
    366c:	9f 1f       	adc	r25, r31
    366e:	08 95       	ret

00003670 <fputc>:
    3670:	0f 93       	push	r16
    3672:	1f 93       	push	r17
    3674:	cf 93       	push	r28
    3676:	df 93       	push	r29
    3678:	8c 01       	movw	r16, r24
    367a:	eb 01       	movw	r28, r22
    367c:	8b 81       	ldd	r24, Y+3	; 0x03
    367e:	81 ff       	sbrs	r24, 1
    3680:	1b c0       	rjmp	.+54     	; 0x36b8 <fputc+0x48>
    3682:	82 ff       	sbrs	r24, 2
    3684:	0d c0       	rjmp	.+26     	; 0x36a0 <fputc+0x30>
    3686:	2e 81       	ldd	r18, Y+6	; 0x06
    3688:	3f 81       	ldd	r19, Y+7	; 0x07
    368a:	8c 81       	ldd	r24, Y+4	; 0x04
    368c:	9d 81       	ldd	r25, Y+5	; 0x05
    368e:	28 17       	cp	r18, r24
    3690:	39 07       	cpc	r19, r25
    3692:	64 f4       	brge	.+24     	; 0x36ac <fputc+0x3c>
    3694:	e8 81       	ld	r30, Y
    3696:	f9 81       	ldd	r31, Y+1	; 0x01
    3698:	01 93       	st	Z+, r16
    369a:	f9 83       	std	Y+1, r31	; 0x01
    369c:	e8 83       	st	Y, r30
    369e:	06 c0       	rjmp	.+12     	; 0x36ac <fputc+0x3c>
    36a0:	e8 85       	ldd	r30, Y+8	; 0x08
    36a2:	f9 85       	ldd	r31, Y+9	; 0x09
    36a4:	80 2f       	mov	r24, r16
    36a6:	09 95       	icall
    36a8:	89 2b       	or	r24, r25
    36aa:	31 f4       	brne	.+12     	; 0x36b8 <fputc+0x48>
    36ac:	8e 81       	ldd	r24, Y+6	; 0x06
    36ae:	9f 81       	ldd	r25, Y+7	; 0x07
    36b0:	01 96       	adiw	r24, 0x01	; 1
    36b2:	9f 83       	std	Y+7, r25	; 0x07
    36b4:	8e 83       	std	Y+6, r24	; 0x06
    36b6:	02 c0       	rjmp	.+4      	; 0x36bc <fputc+0x4c>
    36b8:	0f ef       	ldi	r16, 0xFF	; 255
    36ba:	1f ef       	ldi	r17, 0xFF	; 255
    36bc:	c8 01       	movw	r24, r16
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	1f 91       	pop	r17
    36c4:	0f 91       	pop	r16
    36c6:	08 95       	ret

000036c8 <__ultoa_invert>:
    36c8:	fa 01       	movw	r30, r20
    36ca:	aa 27       	eor	r26, r26
    36cc:	28 30       	cpi	r18, 0x08	; 8
    36ce:	51 f1       	breq	.+84     	; 0x3724 <__ultoa_invert+0x5c>
    36d0:	20 31       	cpi	r18, 0x10	; 16
    36d2:	81 f1       	breq	.+96     	; 0x3734 <__ultoa_invert+0x6c>
    36d4:	e8 94       	clt
    36d6:	6f 93       	push	r22
    36d8:	6e 7f       	andi	r22, 0xFE	; 254
    36da:	6e 5f       	subi	r22, 0xFE	; 254
    36dc:	7f 4f       	sbci	r23, 0xFF	; 255
    36de:	8f 4f       	sbci	r24, 0xFF	; 255
    36e0:	9f 4f       	sbci	r25, 0xFF	; 255
    36e2:	af 4f       	sbci	r26, 0xFF	; 255
    36e4:	b1 e0       	ldi	r27, 0x01	; 1
    36e6:	3e d0       	rcall	.+124    	; 0x3764 <__ultoa_invert+0x9c>
    36e8:	b4 e0       	ldi	r27, 0x04	; 4
    36ea:	3c d0       	rcall	.+120    	; 0x3764 <__ultoa_invert+0x9c>
    36ec:	67 0f       	add	r22, r23
    36ee:	78 1f       	adc	r23, r24
    36f0:	89 1f       	adc	r24, r25
    36f2:	9a 1f       	adc	r25, r26
    36f4:	a1 1d       	adc	r26, r1
    36f6:	68 0f       	add	r22, r24
    36f8:	79 1f       	adc	r23, r25
    36fa:	8a 1f       	adc	r24, r26
    36fc:	91 1d       	adc	r25, r1
    36fe:	a1 1d       	adc	r26, r1
    3700:	6a 0f       	add	r22, r26
    3702:	71 1d       	adc	r23, r1
    3704:	81 1d       	adc	r24, r1
    3706:	91 1d       	adc	r25, r1
    3708:	a1 1d       	adc	r26, r1
    370a:	20 d0       	rcall	.+64     	; 0x374c <__ultoa_invert+0x84>
    370c:	09 f4       	brne	.+2      	; 0x3710 <__ultoa_invert+0x48>
    370e:	68 94       	set
    3710:	3f 91       	pop	r19
    3712:	2a e0       	ldi	r18, 0x0A	; 10
    3714:	26 9f       	mul	r18, r22
    3716:	11 24       	eor	r1, r1
    3718:	30 19       	sub	r19, r0
    371a:	30 5d       	subi	r19, 0xD0	; 208
    371c:	31 93       	st	Z+, r19
    371e:	de f6       	brtc	.-74     	; 0x36d6 <__ultoa_invert+0xe>
    3720:	cf 01       	movw	r24, r30
    3722:	08 95       	ret
    3724:	46 2f       	mov	r20, r22
    3726:	47 70       	andi	r20, 0x07	; 7
    3728:	40 5d       	subi	r20, 0xD0	; 208
    372a:	41 93       	st	Z+, r20
    372c:	b3 e0       	ldi	r27, 0x03	; 3
    372e:	0f d0       	rcall	.+30     	; 0x374e <__ultoa_invert+0x86>
    3730:	c9 f7       	brne	.-14     	; 0x3724 <__ultoa_invert+0x5c>
    3732:	f6 cf       	rjmp	.-20     	; 0x3720 <__ultoa_invert+0x58>
    3734:	46 2f       	mov	r20, r22
    3736:	4f 70       	andi	r20, 0x0F	; 15
    3738:	40 5d       	subi	r20, 0xD0	; 208
    373a:	4a 33       	cpi	r20, 0x3A	; 58
    373c:	18 f0       	brcs	.+6      	; 0x3744 <__ultoa_invert+0x7c>
    373e:	49 5d       	subi	r20, 0xD9	; 217
    3740:	31 fd       	sbrc	r19, 1
    3742:	40 52       	subi	r20, 0x20	; 32
    3744:	41 93       	st	Z+, r20
    3746:	02 d0       	rcall	.+4      	; 0x374c <__ultoa_invert+0x84>
    3748:	a9 f7       	brne	.-22     	; 0x3734 <__ultoa_invert+0x6c>
    374a:	ea cf       	rjmp	.-44     	; 0x3720 <__ultoa_invert+0x58>
    374c:	b4 e0       	ldi	r27, 0x04	; 4
    374e:	a6 95       	lsr	r26
    3750:	97 95       	ror	r25
    3752:	87 95       	ror	r24
    3754:	77 95       	ror	r23
    3756:	67 95       	ror	r22
    3758:	ba 95       	dec	r27
    375a:	c9 f7       	brne	.-14     	; 0x374e <__ultoa_invert+0x86>
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	61 05       	cpc	r22, r1
    3760:	71 05       	cpc	r23, r1
    3762:	08 95       	ret
    3764:	9b 01       	movw	r18, r22
    3766:	ac 01       	movw	r20, r24
    3768:	0a 2e       	mov	r0, r26
    376a:	06 94       	lsr	r0
    376c:	57 95       	ror	r21
    376e:	47 95       	ror	r20
    3770:	37 95       	ror	r19
    3772:	27 95       	ror	r18
    3774:	ba 95       	dec	r27
    3776:	c9 f7       	brne	.-14     	; 0x376a <__ultoa_invert+0xa2>
    3778:	62 0f       	add	r22, r18
    377a:	73 1f       	adc	r23, r19
    377c:	84 1f       	adc	r24, r20
    377e:	95 1f       	adc	r25, r21
    3780:	a0 1d       	adc	r26, r0
    3782:	08 95       	ret

00003784 <_exit>:
    3784:	f8 94       	cli

00003786 <__stop_program>:
    3786:	ff cf       	rjmp	.-2      	; 0x3786 <__stop_program>
