
INA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00800060  00002fb0  00003044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080020c  0080020c  000031f0  2**0
                  ALLOC
  3 .stab         00002610  00000000  00000000  000031f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001626  00000000  00000000  00005800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000071fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000980c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000acda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000bfe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cee9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_16>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	12 e0       	ldi	r17, 0x02	; 2
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e0 eb       	ldi	r30, 0xB0	; 176
     162:	ff e2       	ldi	r31, 0x2F	; 47
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	ac 30       	cpi	r26, 0x0C	; 12
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	ac e0       	ldi	r26, 0x0C	; 12
     174:	b2 e0       	ldi	r27, 0x02	; 2
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	af 30       	cpi	r26, 0x0F	; 15
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 43 14 	call	0x2886	; 0x2886 <main>
     184:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	af ef       	ldi	r26, 0xFF	; 255
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6f ef       	ldi	r22, 0xFF	; 255
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__epilogue_restores__+0x20>

00000b08 <__floatunsisf>:
     b08:	a8 e0       	ldi	r26, 0x08	; 8
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__+0x10>
     b14:	7b 01       	movw	r14, r22
     b16:	8c 01       	movw	r16, r24
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	81 05       	cpc	r24, r1
     b1e:	91 05       	cpc	r25, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__floatunsisf+0x20>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	60 c0       	rjmp	.+192    	; 0xbe8 <__floatunsisf+0xe0>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	8e e1       	ldi	r24, 0x1E	; 30
     b2e:	c8 2e       	mov	r12, r24
     b30:	d1 2c       	mov	r13, r1
     b32:	dc 82       	std	Y+4, r13	; 0x04
     b34:	cb 82       	std	Y+3, r12	; 0x03
     b36:	ed 82       	std	Y+5, r14	; 0x05
     b38:	fe 82       	std	Y+6, r15	; 0x06
     b3a:	0f 83       	std	Y+7, r16	; 0x07
     b3c:	18 87       	std	Y+8, r17	; 0x08
     b3e:	c8 01       	movw	r24, r16
     b40:	b7 01       	movw	r22, r14
     b42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     b46:	fc 01       	movw	r30, r24
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	f7 ff       	sbrs	r31, 7
     b4c:	3b c0       	rjmp	.+118    	; 0xbc4 <__floatunsisf+0xbc>
     b4e:	22 27       	eor	r18, r18
     b50:	33 27       	eor	r19, r19
     b52:	2e 1b       	sub	r18, r30
     b54:	3f 0b       	sbc	r19, r31
     b56:	57 01       	movw	r10, r14
     b58:	68 01       	movw	r12, r16
     b5a:	02 2e       	mov	r0, r18
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__floatunsisf+0x5e>
     b5e:	d6 94       	lsr	r13
     b60:	c7 94       	ror	r12
     b62:	b7 94       	ror	r11
     b64:	a7 94       	ror	r10
     b66:	0a 94       	dec	r0
     b68:	d2 f7       	brpl	.-12     	; 0xb5e <__floatunsisf+0x56>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__floatunsisf+0x7c>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	2a 95       	dec	r18
     b86:	d2 f7       	brpl	.-12     	; 0xb7c <__floatunsisf+0x74>
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	8e 21       	and	r24, r14
     b90:	9f 21       	and	r25, r15
     b92:	a0 23       	and	r26, r16
     b94:	b1 23       	and	r27, r17
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a1 05       	cpc	r26, r1
     b9a:	b1 05       	cpc	r27, r1
     b9c:	21 f0       	breq	.+8      	; 0xba6 <__floatunsisf+0x9e>
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	4a 29       	or	r20, r10
     ba8:	5b 29       	or	r21, r11
     baa:	6c 29       	or	r22, r12
     bac:	7d 29       	or	r23, r13
     bae:	4d 83       	std	Y+5, r20	; 0x05
     bb0:	5e 83       	std	Y+6, r21	; 0x06
     bb2:	6f 83       	std	Y+7, r22	; 0x07
     bb4:	78 87       	std	Y+8, r23	; 0x08
     bb6:	8e e1       	ldi	r24, 0x1E	; 30
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8e 1b       	sub	r24, r30
     bbc:	9f 0b       	sbc	r25, r31
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <__floatunsisf+0xe0>
     bc4:	30 97       	sbiw	r30, 0x00	; 0
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <__floatunsisf+0xe0>
     bc8:	0e 2e       	mov	r0, r30
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__floatunsisf+0xcc>
     bcc:	ee 0c       	add	r14, r14
     bce:	ff 1c       	adc	r15, r15
     bd0:	00 1f       	adc	r16, r16
     bd2:	11 1f       	adc	r17, r17
     bd4:	0a 94       	dec	r0
     bd6:	d2 f7       	brpl	.-12     	; 0xbcc <__floatunsisf+0xc4>
     bd8:	ed 82       	std	Y+5, r14	; 0x05
     bda:	fe 82       	std	Y+6, r15	; 0x06
     bdc:	0f 83       	std	Y+7, r16	; 0x07
     bde:	18 87       	std	Y+8, r17	; 0x08
     be0:	ce 1a       	sub	r12, r30
     be2:	df 0a       	sbc	r13, r31
     be4:	dc 82       	std	Y+4, r13	; 0x04
     be6:	cb 82       	std	Y+3, r12	; 0x03
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     bf2:	28 96       	adiw	r28, 0x08	; 8
     bf4:	ea e0       	ldi	r30, 0x0A	; 10
     bf6:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__+0x10>

00000bfa <__clzsi2>:
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	7b 01       	movw	r14, r22
     c04:	8c 01       	movw	r16, r24
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	e8 16       	cp	r14, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	f8 06       	cpc	r15, r24
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	08 07       	cpc	r16, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	18 07       	cpc	r17, r24
     c16:	88 f4       	brcc	.+34     	; 0xc3a <__clzsi2+0x40>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	e8 16       	cp	r14, r24
     c1c:	f1 04       	cpc	r15, r1
     c1e:	01 05       	cpc	r16, r1
     c20:	11 05       	cpc	r17, r1
     c22:	31 f0       	breq	.+12     	; 0xc30 <__clzsi2+0x36>
     c24:	28 f0       	brcs	.+10     	; 0xc30 <__clzsi2+0x36>
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <__clzsi2+0x64>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	12 c0       	rjmp	.+36     	; 0xc5e <__clzsi2+0x64>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	e8 16       	cp	r14, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	f8 06       	cpc	r15, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 07       	cpc	r16, r24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	18 07       	cpc	r17, r24
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__clzsi2+0x5c>
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__clzsi2+0x64>
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	20 e2       	ldi	r18, 0x20	; 32
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	28 1b       	sub	r18, r24
     c68:	39 0b       	sbc	r19, r25
     c6a:	4a 0b       	sbc	r20, r26
     c6c:	5b 0b       	sbc	r21, r27
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__clzsi2+0x7e>
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__clzsi2+0x76>
     c7c:	f7 01       	movw	r30, r14
     c7e:	e9 5f       	subi	r30, 0xF9	; 249
     c80:	fe 4f       	sbci	r31, 0xFE	; 254
     c82:	80 81       	ld	r24, Z
     c84:	28 1b       	sub	r18, r24
     c86:	31 09       	sbc	r19, r1
     c88:	41 09       	sbc	r20, r1
     c8a:	51 09       	sbc	r21, r1
     c8c:	c9 01       	movw	r24, r18
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <__pack_f>:
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	fc 01       	movw	r30, r24
     ca4:	e4 80       	ldd	r14, Z+4	; 0x04
     ca6:	f5 80       	ldd	r15, Z+5	; 0x05
     ca8:	06 81       	ldd	r16, Z+6	; 0x06
     caa:	17 81       	ldd	r17, Z+7	; 0x07
     cac:	d1 80       	ldd	r13, Z+1	; 0x01
     cae:	80 81       	ld	r24, Z
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	48 f4       	brcc	.+18     	; 0xcc6 <__pack_f+0x2e>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e1       	ldi	r26, 0x10	; 16
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 2a       	or	r14, r24
     cbe:	f9 2a       	or	r15, r25
     cc0:	0a 2b       	or	r16, r26
     cc2:	1b 2b       	or	r17, r27
     cc4:	a5 c0       	rjmp	.+330    	; 0xe10 <__pack_f+0x178>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	09 f4       	brne	.+2      	; 0xccc <__pack_f+0x34>
     cca:	9f c0       	rjmp	.+318    	; 0xe0a <__pack_f+0x172>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	21 f4       	brne	.+8      	; 0xcd8 <__pack_f+0x40>
     cd0:	ee 24       	eor	r14, r14
     cd2:	ff 24       	eor	r15, r15
     cd4:	87 01       	movw	r16, r14
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__pack_f+0x4a>
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	01 05       	cpc	r16, r1
     cde:	11 05       	cpc	r17, r1
     ce0:	19 f4       	brne	.+6      	; 0xce8 <__pack_f+0x50>
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	96 c0       	rjmp	.+300    	; 0xe14 <__pack_f+0x17c>
     ce8:	62 81       	ldd	r22, Z+2	; 0x02
     cea:	73 81       	ldd	r23, Z+3	; 0x03
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	62 38       	cpi	r22, 0x82	; 130
     cf0:	79 07       	cpc	r23, r25
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <__pack_f+0x5e>
     cf4:	5b c0       	rjmp	.+182    	; 0xdac <__pack_f+0x114>
     cf6:	22 e8       	ldi	r18, 0x82	; 130
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	26 1b       	sub	r18, r22
     cfc:	37 0b       	sbc	r19, r23
     cfe:	2a 31       	cpi	r18, 0x1A	; 26
     d00:	31 05       	cpc	r19, r1
     d02:	2c f0       	brlt	.+10     	; 0xd0e <__pack_f+0x76>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <__pack_f+0xca>
     d0e:	b8 01       	movw	r22, r16
     d10:	a7 01       	movw	r20, r14
     d12:	02 2e       	mov	r0, r18
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__pack_f+0x86>
     d16:	76 95       	lsr	r23
     d18:	67 95       	ror	r22
     d1a:	57 95       	ror	r21
     d1c:	47 95       	ror	r20
     d1e:	0a 94       	dec	r0
     d20:	d2 f7       	brpl	.-12     	; 0xd16 <__pack_f+0x7e>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__pack_f+0x9c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 1f       	adc	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	2a 95       	dec	r18
     d36:	d2 f7       	brpl	.-12     	; 0xd2c <__pack_f+0x94>
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	a1 09       	sbc	r26, r1
     d3c:	b1 09       	sbc	r27, r1
     d3e:	8e 21       	and	r24, r14
     d40:	9f 21       	and	r25, r15
     d42:	a0 23       	and	r26, r16
     d44:	b1 23       	and	r27, r17
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	a1 05       	cpc	r26, r1
     d4a:	b1 05       	cpc	r27, r1
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__pack_f+0xbe>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	9a 01       	movw	r18, r20
     d58:	ab 01       	movw	r20, r22
     d5a:	28 2b       	or	r18, r24
     d5c:	39 2b       	or	r19, r25
     d5e:	4a 2b       	or	r20, r26
     d60:	5b 2b       	or	r21, r27
     d62:	da 01       	movw	r26, r20
     d64:	c9 01       	movw	r24, r18
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	a0 70       	andi	r26, 0x00	; 0
     d6c:	b0 70       	andi	r27, 0x00	; 0
     d6e:	80 34       	cpi	r24, 0x40	; 64
     d70:	91 05       	cpc	r25, r1
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	39 f4       	brne	.+14     	; 0xd86 <__pack_f+0xee>
     d78:	27 ff       	sbrs	r18, 7
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <__pack_f+0xf6>
     d7c:	20 5c       	subi	r18, 0xC0	; 192
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	4f 4f       	sbci	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <__pack_f+0xf6>
     d86:	21 5c       	subi	r18, 0xC1	; 193
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	4f 4f       	sbci	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	20 30       	cpi	r18, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	3a 07       	cpc	r19, r26
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	4a 07       	cpc	r20, r26
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	5a 07       	cpc	r21, r26
     da0:	10 f0       	brcs	.+4      	; 0xda6 <__pack_f+0x10e>
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	79 01       	movw	r14, r18
     da8:	8a 01       	movw	r16, r20
     daa:	27 c0       	rjmp	.+78     	; 0xdfa <__pack_f+0x162>
     dac:	60 38       	cpi	r22, 0x80	; 128
     dae:	71 05       	cpc	r23, r1
     db0:	64 f5       	brge	.+88     	; 0xe0a <__pack_f+0x172>
     db2:	fb 01       	movw	r30, r22
     db4:	e1 58       	subi	r30, 0x81	; 129
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	d8 01       	movw	r26, r16
     dba:	c7 01       	movw	r24, r14
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	90 70       	andi	r25, 0x00	; 0
     dc0:	a0 70       	andi	r26, 0x00	; 0
     dc2:	b0 70       	andi	r27, 0x00	; 0
     dc4:	80 34       	cpi	r24, 0x40	; 64
     dc6:	91 05       	cpc	r25, r1
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	39 f4       	brne	.+14     	; 0xddc <__pack_f+0x144>
     dce:	e7 fe       	sbrs	r14, 7
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__pack_f+0x154>
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__pack_f+0x14c>
     ddc:	8f e3       	ldi	r24, 0x3F	; 63
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 0e       	add	r14, r24
     de6:	f9 1e       	adc	r15, r25
     de8:	0a 1f       	adc	r16, r26
     dea:	1b 1f       	adc	r17, r27
     dec:	17 ff       	sbrs	r17, 7
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__pack_f+0x162>
     df0:	16 95       	lsr	r17
     df2:	07 95       	ror	r16
     df4:	f7 94       	ror	r15
     df6:	e7 94       	ror	r14
     df8:	31 96       	adiw	r30, 0x01	; 1
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	16 95       	lsr	r17
     dfe:	07 95       	ror	r16
     e00:	f7 94       	ror	r15
     e02:	e7 94       	ror	r14
     e04:	8a 95       	dec	r24
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__pack_f+0x164>
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <__pack_f+0x17c>
     e0a:	ee 24       	eor	r14, r14
     e0c:	ff 24       	eor	r15, r15
     e0e:	87 01       	movw	r16, r14
     e10:	ef ef       	ldi	r30, 0xFF	; 255
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	6e 2f       	mov	r22, r30
     e16:	67 95       	ror	r22
     e18:	66 27       	eor	r22, r22
     e1a:	67 95       	ror	r22
     e1c:	90 2f       	mov	r25, r16
     e1e:	9f 77       	andi	r25, 0x7F	; 127
     e20:	d7 94       	ror	r13
     e22:	dd 24       	eor	r13, r13
     e24:	d7 94       	ror	r13
     e26:	8e 2f       	mov	r24, r30
     e28:	86 95       	lsr	r24
     e2a:	49 2f       	mov	r20, r25
     e2c:	46 2b       	or	r20, r22
     e2e:	58 2f       	mov	r21, r24
     e30:	5d 29       	or	r21, r13
     e32:	b7 01       	movw	r22, r14
     e34:	ca 01       	movw	r24, r20
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	08 95       	ret

00000e42 <__unpack_f>:
     e42:	fc 01       	movw	r30, r24
     e44:	db 01       	movw	r26, r22
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	62 2f       	mov	r22, r18
     e4e:	6f 77       	andi	r22, 0x7F	; 127
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	22 1f       	adc	r18, r18
     e54:	22 27       	eor	r18, r18
     e56:	22 1f       	adc	r18, r18
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	89 2f       	mov	r24, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	82 2b       	or	r24, r18
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	99 1f       	adc	r25, r25
     e66:	99 27       	eor	r25, r25
     e68:	99 1f       	adc	r25, r25
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	9c 93       	st	X, r25
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	a9 f5       	brne	.+106    	; 0xee0 <__unpack_f+0x9e>
     e76:	41 15       	cp	r20, r1
     e78:	51 05       	cpc	r21, r1
     e7a:	61 05       	cpc	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__unpack_f+0x42>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	37 c0       	rjmp	.+110    	; 0xef2 <__unpack_f+0xb0>
     e84:	82 e8       	ldi	r24, 0x82	; 130
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	12 97       	sbiw	r26, 0x02	; 2
     e90:	9a 01       	movw	r18, r20
     e92:	ab 01       	movw	r20, r22
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	44 1f       	adc	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	6a 95       	dec	r22
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <__unpack_f+0x54>
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	8c 93       	st	X, r24
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <__unpack_f+0x80>
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	44 1f       	adc	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8d 91       	ld	r24, X+
     eb4:	9c 91       	ld	r25, X
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	12 97       	sbiw	r26, 0x02	; 2
     ec2:	20 30       	cpi	r18, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	38 07       	cpc	r19, r24
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	48 07       	cpc	r20, r24
     ecc:	80 e4       	ldi	r24, 0x40	; 64
     ece:	58 07       	cpc	r21, r24
     ed0:	58 f3       	brcs	.-42     	; 0xea8 <__unpack_f+0x66>
     ed2:	14 96       	adiw	r26, 0x04	; 4
     ed4:	2d 93       	st	X+, r18
     ed6:	3d 93       	st	X+, r19
     ed8:	4d 93       	st	X+, r20
     eda:	5c 93       	st	X, r21
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	08 95       	ret
     ee0:	2f 3f       	cpi	r18, 0xFF	; 255
     ee2:	31 05       	cpc	r19, r1
     ee4:	79 f4       	brne	.+30     	; 0xf04 <__unpack_f+0xc2>
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	61 05       	cpc	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	19 f4       	brne	.+6      	; 0xef6 <__unpack_f+0xb4>
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	8c 93       	st	X, r24
     ef4:	08 95       	ret
     ef6:	64 ff       	sbrs	r22, 4
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <__unpack_f+0xbe>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <__unpack_f+0xe2>
     f00:	1c 92       	st	X, r1
     f02:	10 c0       	rjmp	.+32     	; 0xf24 <__unpack_f+0xe2>
     f04:	2f 57       	subi	r18, 0x7F	; 127
     f06:	30 40       	sbci	r19, 0x00	; 0
     f08:	13 96       	adiw	r26, 0x03	; 3
     f0a:	3c 93       	st	X, r19
     f0c:	2e 93       	st	-X, r18
     f0e:	12 97       	sbiw	r26, 0x02	; 2
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	8c 93       	st	X, r24
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	44 0f       	add	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	8a 95       	dec	r24
     f20:	d1 f7       	brne	.-12     	; 0xf16 <__unpack_f+0xd4>
     f22:	70 64       	ori	r23, 0x40	; 64
     f24:	14 96       	adiw	r26, 0x04	; 4
     f26:	4d 93       	st	X+, r20
     f28:	5d 93       	st	X+, r21
     f2a:	6d 93       	st	X+, r22
     f2c:	7c 93       	st	X, r23
     f2e:	17 97       	sbiw	r26, 0x07	; 7
     f30:	08 95       	ret

00000f32 <__fpcmp_parts_f>:
     f32:	1f 93       	push	r17
     f34:	dc 01       	movw	r26, r24
     f36:	fb 01       	movw	r30, r22
     f38:	9c 91       	ld	r25, X
     f3a:	92 30       	cpi	r25, 0x02	; 2
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <__fpcmp_parts_f+0xe>
     f3e:	47 c0       	rjmp	.+142    	; 0xfce <__fpcmp_parts_f+0x9c>
     f40:	80 81       	ld	r24, Z
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__fpcmp_parts_f+0x16>
     f46:	43 c0       	rjmp	.+134    	; 0xfce <__fpcmp_parts_f+0x9c>
     f48:	94 30       	cpi	r25, 0x04	; 4
     f4a:	51 f4       	brne	.+20     	; 0xf60 <__fpcmp_parts_f+0x2e>
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	1c 91       	ld	r17, X
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	99 f5       	brne	.+102    	; 0xfba <__fpcmp_parts_f+0x88>
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	68 2f       	mov	r22, r24
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	61 1b       	sub	r22, r17
     f5c:	71 09       	sbc	r23, r1
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <__fpcmp_parts_f+0xac>
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	21 f0       	breq	.+8      	; 0xf6c <__fpcmp_parts_f+0x3a>
     f64:	92 30       	cpi	r25, 0x02	; 2
     f66:	31 f4       	brne	.+12     	; 0xf74 <__fpcmp_parts_f+0x42>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	b9 f1       	breq	.+110    	; 0xfda <__fpcmp_parts_f+0xa8>
     f6c:	81 81       	ldd	r24, Z+1	; 0x01
     f6e:	88 23       	and	r24, r24
     f70:	89 f1       	breq	.+98     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     f72:	2d c0       	rjmp	.+90     	; 0xfce <__fpcmp_parts_f+0x9c>
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	1c 91       	ld	r17, X
     f78:	11 97       	sbiw	r26, 0x01	; 1
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	f1 f0       	breq	.+60     	; 0xfba <__fpcmp_parts_f+0x88>
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	18 17       	cp	r17, r24
     f82:	d9 f4       	brne	.+54     	; 0xfba <__fpcmp_parts_f+0x88>
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	2d 91       	ld	r18, X+
     f88:	3c 91       	ld	r19, X
     f8a:	13 97       	sbiw	r26, 0x03	; 3
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	82 17       	cp	r24, r18
     f92:	93 07       	cpc	r25, r19
     f94:	94 f0       	brlt	.+36     	; 0xfba <__fpcmp_parts_f+0x88>
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	bc f0       	brlt	.+46     	; 0xfca <__fpcmp_parts_f+0x98>
     f9c:	14 96       	adiw	r26, 0x04	; 4
     f9e:	8d 91       	ld	r24, X+
     fa0:	9d 91       	ld	r25, X+
     fa2:	0d 90       	ld	r0, X+
     fa4:	bc 91       	ld	r27, X
     fa6:	a0 2d       	mov	r26, r0
     fa8:	24 81       	ldd	r18, Z+4	; 0x04
     faa:	35 81       	ldd	r19, Z+5	; 0x05
     fac:	46 81       	ldd	r20, Z+6	; 0x06
     fae:	57 81       	ldd	r21, Z+7	; 0x07
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	4a 07       	cpc	r20, r26
     fb6:	5b 07       	cpc	r21, r27
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <__fpcmp_parts_f+0x8e>
     fba:	11 23       	and	r17, r17
     fbc:	41 f0       	breq	.+16     	; 0xfce <__fpcmp_parts_f+0x9c>
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fc0:	82 17       	cp	r24, r18
     fc2:	93 07       	cpc	r25, r19
     fc4:	a4 07       	cpc	r26, r20
     fc6:	b5 07       	cpc	r27, r21
     fc8:	40 f4       	brcc	.+16     	; 0xfda <__fpcmp_parts_f+0xa8>
     fca:	11 23       	and	r17, r17
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <__fpcmp_parts_f+0xac>
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f ef       	ldi	r23, 0xFF	; 255
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__fpcmp_parts_f+0xac>
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	cb 01       	movw	r24, r22
     fe0:	1f 91       	pop	r17
     fe2:	08 95       	ret

00000fe4 <ADC_voidInit>:
#include "ADC_private.h"

static void (*ADC_PtrFunc)(u16) = NULL;
static u8 ADC_u8BusyFlag = ADC_u8_NOT_BUSY;

void ADC_voidInit(void){
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	/*   Select Vref = 2.56v       */
	//	SET_BIT(ADC_u8_ADMUX_REG,7);
	//	SET_BIT(ADC_u8_ADMUX_REG,6);

	/*   Select Vref = 5v       */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     fec:	a7 e2       	ldi	r26, 0x27	; 39
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e2       	ldi	r30, 0x27	; 39
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8f 77       	andi	r24, 0x7F	; 127
     ff8:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     ffa:	a7 e2       	ldi	r26, 0x27	; 39
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e7 e2       	ldi	r30, 0x27	; 39
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 64       	ori	r24, 0x40	; 64
    1006:	8c 93       	st	X, r24

	/*    Select Right Adjustment   */
	CLR_BIT(ADC_u8_ADMUX_REG,5);
    1008:	a7 e2       	ldi	r26, 0x27	; 39
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e2       	ldi	r30, 0x27	; 39
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8f 7d       	andi	r24, 0xDF	; 223
    1014:	8c 93       	st	X, r24

	/*    Select Conversion Mode    */
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
    1016:	a6 e2       	ldi	r26, 0x26	; 38
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e6 e2       	ldi	r30, 0x26	; 38
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 7d       	andi	r24, 0xDF	; 223
    1022:	8c 93       	st	X, r24

	/*    Select Prescaler  = 64    */
	SET_BIT(ADC_u8_ADCSRA_REG,2);
    1024:	a6 e2       	ldi	r26, 0x26	; 38
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e6 e2       	ldi	r30, 0x26	; 38
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	84 60       	ori	r24, 0x04	; 4
    1030:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
    1032:	a6 e2       	ldi	r26, 0x26	; 38
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e6 e2       	ldi	r30, 0x26	; 38
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	82 60       	ori	r24, 0x02	; 2
    103e:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
    1040:	a6 e2       	ldi	r26, 0x26	; 38
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e6 e2       	ldi	r30, 0x26	; 38
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	8c 93       	st	X, r24

	/*        ADC Enable            */
	SET_BIT(ADC_u8_ADCSRA_REG,7);
    104e:	a6 e2       	ldi	r26, 0x26	; 38
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e6 e2       	ldi	r30, 0x26	; 38
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	8c 93       	st	X, r24
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <ADC_u8GetDigitalValueSync>:

u8 ADC_u8GetDigitalValueSync(u8 Copy_u8ChannelNum,u16* Copy_Pu16ReturnedDigitalValue){
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	28 97       	sbiw	r28, 0x08	; 8
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	8e 83       	std	Y+6, r24	; 0x06
    1078:	78 87       	std	Y+8, r23	; 0x08
    107a:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    1080:	19 82       	std	Y+1, r1	; 0x01
    1082:	1a 82       	std	Y+2, r1	; 0x02
    1084:	1b 82       	std	Y+3, r1	; 0x03
    1086:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNum < 32) && (Copy_Pu16ReturnedDigitalValue != NULL)){
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	80 32       	cpi	r24, 0x20	; 32
    108c:	08 f0       	brcs	.+2      	; 0x1090 <ADC_u8GetDigitalValueSync+0x2e>
    108e:	5b c0       	rjmp	.+182    	; 0x1146 <ADC_u8GetDigitalValueSync+0xe4>
    1090:	8f 81       	ldd	r24, Y+7	; 0x07
    1092:	98 85       	ldd	r25, Y+8	; 0x08
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	09 f4       	brne	.+2      	; 0x109a <ADC_u8GetDigitalValueSync+0x38>
    1098:	56 c0       	rjmp	.+172    	; 0x1146 <ADC_u8GetDigitalValueSync+0xe4>
		/*  Clear Channel Region              */
		ADC_u8_ADMUX_REG &= 0b11100000;
    109a:	a7 e2       	ldi	r26, 0x27	; 39
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e2       	ldi	r30, 0x27	; 39
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 7e       	andi	r24, 0xE0	; 224
    10a6:	8c 93       	st	X, r24
		/*  Select Channel Number             */
		ADC_u8_ADMUX_REG |=  Copy_u8ChannelNum;
    10a8:	a7 e2       	ldi	r26, 0x27	; 39
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e7 e2       	ldi	r30, 0x27	; 39
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	90 81       	ld	r25, Z
    10b2:	8e 81       	ldd	r24, Y+6	; 0x06
    10b4:	89 2b       	or	r24, r25
    10b6:	8c 93       	st	X, r24
		/*  Start Conversion                  */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    10b8:	a6 e2       	ldi	r26, 0x26	; 38
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e6 e2       	ldi	r30, 0x26	; 38
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 64       	ori	r24, 0x40	; 64
    10c4:	8c 93       	st	X, r24
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <ADC_u8GetDigitalValueSync+0x7c>
		/*  Wait For The Flag                 */

		while((Local_u32TimeOutCounter < 1000000UL) && (!GET_BIT(ADC_u8_ADCSRA_REG,4))){         //counter estimatation
			Local_u32TimeOutCounter++;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	ab 81       	ldd	r26, Y+3	; 0x03
    10ce:	bc 81       	ldd	r27, Y+4	; 0x04
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	a1 1d       	adc	r26, r1
    10d4:	b1 1d       	adc	r27, r1
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	ab 83       	std	Y+3, r26	; 0x03
    10dc:	bc 83       	std	Y+4, r27	; 0x04
		ADC_u8_ADMUX_REG |=  Copy_u8ChannelNum;
		/*  Start Conversion                  */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/*  Wait For The Flag                 */

		while((Local_u32TimeOutCounter < 1000000UL) && (!GET_BIT(ADC_u8_ADCSRA_REG,4))){         //counter estimatation
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	ab 81       	ldd	r26, Y+3	; 0x03
    10e4:	bc 81       	ldd	r27, Y+4	; 0x04
    10e6:	80 34       	cpi	r24, 0x40	; 64
    10e8:	22 e4       	ldi	r18, 0x42	; 66
    10ea:	92 07       	cpc	r25, r18
    10ec:	2f e0       	ldi	r18, 0x0F	; 15
    10ee:	a2 07       	cpc	r26, r18
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	b2 07       	cpc	r27, r18
    10f4:	58 f4       	brcc	.+22     	; 0x110c <ADC_u8GetDigitalValueSync+0xaa>
    10f6:	e6 e2       	ldi	r30, 0x26	; 38
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	82 95       	swap	r24
    10fe:	8f 70       	andi	r24, 0x0F	; 15
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	81 70       	andi	r24, 0x01	; 1
    1106:	90 70       	andi	r25, 0x00	; 0
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	f1 f2       	breq	.-68     	; 0x10c8 <ADC_u8GetDigitalValueSync+0x66>
			Local_u32TimeOutCounter++;
		}
		/*  Check Flag */
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)){
    110c:	e6 e2       	ldi	r30, 0x26	; 38
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	82 95       	swap	r24
    1114:	8f 70       	andi	r24, 0x0F	; 15
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	90 70       	andi	r25, 0x00	; 0
    111e:	88 23       	and	r24, r24
    1120:	81 f0       	breq	.+32     	; 0x1142 <ADC_u8GetDigitalValueSync+0xe0>
			/*  Clear Flag                        */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
    1122:	a6 e2       	ldi	r26, 0x26	; 38
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e6 e2       	ldi	r30, 0x26	; 38
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 61       	ori	r24, 0x10	; 16
    112e:	8c 93       	st	X, r24

			/*  Read Digital Value                */
			*Copy_Pu16ReturnedDigitalValue = ADC_u16_ADCDATA_REG;
    1130:	e4 e2       	ldi	r30, 0x24	; 36
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	ef 81       	ldd	r30, Y+7	; 0x07
    113a:	f8 85       	ldd	r31, Y+8	; 0x08
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <ADC_u8GetDigitalValueSync+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    1142:	1d 82       	std	Y+5, r1	; 0x05
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <ADC_u8GetDigitalValueSync+0xe6>
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1146:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
}
    114a:	28 96       	adiw	r28, 0x08	; 8
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <ADC_u8GetDigitalValueAsync>:

u8 ADC_u8GetDigitalValueAsync(u8 Copy_u8ChannelNum,void(*Copy_PtrFunc)(u16)){
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <ADC_u8GetDigitalValueAsync+0x6>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <ADC_u8GetDigitalValueAsync+0x8>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	8a 83       	std	Y+2, r24	; 0x02
    116a:	7c 83       	std	Y+4, r23	; 0x04
    116c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
	/* Check Channel Number , Check Pointers */
	if((ADC_u8BusyFlag == ADC_u8_NOT_BUSY) && (Copy_u8ChannelNum < 32) && (Copy_PtrFunc != NULL)){
    1172:	80 91 0e 02 	lds	r24, 0x020E
    1176:	88 23       	and	r24, r24
    1178:	71 f5       	brne	.+92     	; 0x11d6 <ADC_u8GetDigitalValueAsync+0x7a>
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	80 32       	cpi	r24, 0x20	; 32
    117e:	58 f5       	brcc	.+86     	; 0x11d6 <ADC_u8GetDigitalValueAsync+0x7a>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	39 f1       	breq	.+78     	; 0x11d6 <ADC_u8GetDigitalValueAsync+0x7a>
		/* Set Busy Flag into Busy Flag  */
		ADC_u8BusyFlag = ADC_u8_BUSY;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 93 0e 02 	sts	0x020E, r24
		/* Update Global Pointers With input addresses        */
		ADC_PtrFunc = Copy_PtrFunc;
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	90 93 0d 02 	sts	0x020D, r25
    1196:	80 93 0c 02 	sts	0x020C, r24
		/* Clear Channel Register                */
		ADC_u8_ADMUX_REG &= 0b11100000;
    119a:	a7 e2       	ldi	r26, 0x27	; 39
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e7 e2       	ldi	r30, 0x27	; 39
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 7e       	andi	r24, 0xE0	; 224
    11a6:	8c 93       	st	X, r24
		/* Select ADC Channel                    */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNum;
    11a8:	a7 e2       	ldi	r26, 0x27	; 39
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e7 e2       	ldi	r30, 0x27	; 39
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	90 81       	ld	r25, Z
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	89 2b       	or	r24, r25
    11b6:	8c 93       	st	X, r24
		/* ADC Interrupt Enable                  */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
    11b8:	a6 e2       	ldi	r26, 0x26	; 38
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e6 e2       	ldi	r30, 0x26	; 38
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 60       	ori	r24, 0x08	; 8
    11c4:	8c 93       	st	X, r24
		/* ADC Start Conversion                  */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    11c6:	a6 e2       	ldi	r26, 0x26	; 38
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e6 e2       	ldi	r30, 0x26	; 38
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 64       	ori	r24, 0x40	; 64
    11d2:	8c 93       	st	X, r24
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <ADC_u8GetDigitalValueAsync+0x7c>
		//Call ISR When Conversion is Complete
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    11d6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <__vector_16>:


void __vector_16(void) __attribute__((signal));
void __vector_16(void){
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	if((ADC_PtrFunc != NULL)){
    1212:	80 91 0c 02 	lds	r24, 0x020C
    1216:	90 91 0d 02 	lds	r25, 0x020D
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	99 f0       	breq	.+38     	; 0x1244 <__vector_16+0x5c>
		/* Call Notification Function        */
		ADC_PtrFunc(ADC_u16_ADCDATA_REG);
    121e:	20 91 0c 02 	lds	r18, 0x020C
    1222:	30 91 0d 02 	lds	r19, 0x020D
    1226:	e4 e2       	ldi	r30, 0x24	; 36
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	91 81       	ldd	r25, Z+1	; 0x01
    122e:	f9 01       	movw	r30, r18
    1230:	09 95       	icall
		/* Disable Interrupt                 */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
    1232:	a6 e2       	ldi	r26, 0x26	; 38
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e6 e2       	ldi	r30, 0x26	; 38
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	87 7f       	andi	r24, 0xF7	; 247
    123e:	8c 93       	st	X, r24
		/* Set Busy Flag into Not Busy Flag  */
		ADC_u8BusyFlag = ADC_u8_NOT_BUSY;
    1240:	10 92 0e 02 	sts	0x020E, r1
	}
}
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	ff 91       	pop	r31
    124a:	ef 91       	pop	r30
    124c:	bf 91       	pop	r27
    124e:	af 91       	pop	r26
    1250:	9f 91       	pop	r25
    1252:	8f 91       	pop	r24
    1254:	7f 91       	pop	r23
    1256:	6f 91       	pop	r22
    1258:	5f 91       	pop	r21
    125a:	4f 91       	pop	r20
    125c:	3f 91       	pop	r19
    125e:	2f 91       	pop	r18
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void){
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	/*INIT OF PINs Direction*/
DIO_u8_DDRA_REG =PRIVATE_u8_CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
    1272:	ea e3       	ldi	r30, 0x3A	; 58
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 83       	st	Z, r24
		                         DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);

DIO_u8_DDRB_REG =PRIVATE_u8_CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
    127a:	e7 e3       	ldi	r30, 0x37	; 55
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	10 82       	st	Z, r1
		                         DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);

DIO_u8_DDRC_REG =PRIVATE_u8_CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
    1280:	e4 e3       	ldi	r30, 0x34	; 52
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	80 83       	st	Z, r24
		                         DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);

DIO_u8_DDRD_REG =PRIVATE_u8_CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
    1288:	e1 e3       	ldi	r30, 0x31	; 49
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	80 83       	st	Z, r24
		                         DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);

        /*INIT OF PINs Values*/
DIO_u8_PORTA_REG =PRIVATE_u8_CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE,
    1290:	eb e3       	ldi	r30, 0x3B	; 59
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	10 82       	st	Z, r1
		                          DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);

DIO_u8_PORTB_REG =PRIVATE_u8_CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE,
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	10 82       	st	Z, r1
		                          DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);

DIO_u8_PORTC_REG =PRIVATE_u8_CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE,
    129c:	e5 e3       	ldi	r30, 0x35	; 53
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	84 e0       	ldi	r24, 0x04	; 4
    12a2:	80 83       	st	Z, r24
		                          DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);

DIO_u8_PORTD_REG =PRIVATE_u8_CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE,
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	10 82       	st	Z, r1
		                          DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);


}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,u8 Copy_u8PinDirection) {
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	2e 97       	sbiw	r28, 0x0e	; 14
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	8a 83       	std	Y+2, r24	; 0x02
    12c6:	6b 83       	std	Y+3, r22	; 0x03
    12c8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	88 30       	cpi	r24, 0x08	; 8
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <DIO_u8SetPinDirection+0x26>
    12d4:	bc c1       	rjmp	.+888    	; 0x164e <DIO_u8SetPinDirection+0x39e>
		switch (Copy_u8PortId) {
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3e 87       	std	Y+14, r19	; 0x0e
    12de:	2d 87       	std	Y+13, r18	; 0x0d
    12e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	09 f4       	brne	.+2      	; 0x12ec <DIO_u8SetPinDirection+0x3c>
    12ea:	7d c0       	rjmp	.+250    	; 0x13e6 <DIO_u8SetPinDirection+0x136>
    12ec:	2d 85       	ldd	r18, Y+13	; 0x0d
    12ee:	3e 85       	ldd	r19, Y+14	; 0x0e
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	2c f4       	brge	.+10     	; 0x1300 <DIO_u8SetPinDirection+0x50>
    12f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	71 f0       	breq	.+28     	; 0x131a <DIO_u8SetPinDirection+0x6a>
    12fe:	a5 c1       	rjmp	.+842    	; 0x164a <DIO_u8SetPinDirection+0x39a>
    1300:	2d 85       	ldd	r18, Y+13	; 0x0d
    1302:	3e 85       	ldd	r19, Y+14	; 0x0e
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <DIO_u8SetPinDirection+0x5c>
    130a:	d3 c0       	rjmp	.+422    	; 0x14b2 <DIO_u8SetPinDirection+0x202>
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	91 05       	cpc	r25, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <DIO_u8SetPinDirection+0x68>
    1316:	33 c1       	rjmp	.+614    	; 0x157e <DIO_u8SetPinDirection+0x2ce>
    1318:	98 c1       	rjmp	.+816    	; 0x164a <DIO_u8SetPinDirection+0x39a>
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection) {
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3c 87       	std	Y+12, r19	; 0x0c
    1322:	2b 87       	std	Y+11, r18	; 0x0b
    1324:	8b 85       	ldd	r24, Y+11	; 0x0b
    1326:	9c 85       	ldd	r25, Y+12	; 0x0c
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	91 05       	cpc	r25, r1
    132c:	51 f0       	breq	.+20     	; 0x1342 <DIO_u8SetPinDirection+0x92>
    132e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1330:	3c 85       	ldd	r19, Y+12	; 0x0c
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	71 f1       	breq	.+92     	; 0x1394 <DIO_u8SetPinDirection+0xe4>
    1338:	8b 85       	ldd	r24, Y+11	; 0x0b
    133a:	9c 85       	ldd	r25, Y+12	; 0x0c
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	a9 f0       	breq	.+42     	; 0x136a <DIO_u8SetPinDirection+0xba>
    1340:	50 c0       	rjmp	.+160    	; 0x13e2 <DIO_u8SetPinDirection+0x132>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1342:	aa e3       	ldi	r26, 0x3A	; 58
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	ea e3       	ldi	r30, 0x3A	; 58
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8SetPinDirection+0xb0>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_u8SetPinDirection+0xac>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	73 c1       	rjmp	.+742    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
				break;
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    136a:	aa e3       	ldi	r26, 0x3A	; 58
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ea e3       	ldi	r30, 0x3A	; 58
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_u8SetPinDirection+0xd8>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_u8SetPinDirection+0xd4>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	5e c1       	rjmp	.+700    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
				break;
			case DIO_u8_INPUT_UP:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1394:	aa e3       	ldi	r26, 0x3A	; 58
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_u8SetPinDirection+0x100>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	2a 95       	dec	r18
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_u8SetPinDirection+0xfc>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    13ba:	ab e3       	ldi	r26, 0x3B	; 59
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	eb e3       	ldi	r30, 0x3B	; 59
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_u8SetPinDirection+0x128>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_u8SetPinDirection+0x124>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	37 c1       	rjmp	.+622    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    13e2:	19 82       	std	Y+1, r1	; 0x01
    13e4:	35 c1       	rjmp	.+618    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
			}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection) {
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3a 87       	std	Y+10, r19	; 0x0a
    13ee:	29 87       	std	Y+9, r18	; 0x09
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	51 f0       	breq	.+20     	; 0x140e <DIO_u8SetPinDirection+0x15e>
    13fa:	29 85       	ldd	r18, Y+9	; 0x09
    13fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	71 f1       	breq	.+92     	; 0x1460 <DIO_u8SetPinDirection+0x1b0>
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	a9 f0       	breq	.+42     	; 0x1436 <DIO_u8SetPinDirection+0x186>
    140c:	50 c0       	rjmp	.+160    	; 0x14ae <DIO_u8SetPinDirection+0x1fe>
				case DIO_u8_OUTPUT:
					SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    140e:	a7 e3       	ldi	r26, 0x37	; 55
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e7 e3       	ldi	r30, 0x37	; 55
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_u8SetPinDirection+0x17c>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_u8SetPinDirection+0x178>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	0d c1       	rjmp	.+538    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
					break;
				case DIO_u8_INPUT_FLOATING:
					CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1436:	a7 e3       	ldi	r26, 0x37	; 55
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e7 e3       	ldi	r30, 0x37	; 55
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_u8SetPinDirection+0x1a4>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_u8SetPinDirection+0x1a0>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	f8 c0       	rjmp	.+496    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
					break;
				case DIO_u8_INPUT_UP:
					CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1460:	a7 e3       	ldi	r26, 0x37	; 55
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e7 e3       	ldi	r30, 0x37	; 55
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_u8SetPinDirection+0x1cc>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	2a 95       	dec	r18
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_u8SetPinDirection+0x1c8>
    1480:	80 95       	com	r24
    1482:	84 23       	and	r24, r20
    1484:	8c 93       	st	X, r24
					SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1486:	a8 e3       	ldi	r26, 0x38	; 56
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e8 e3       	ldi	r30, 0x38	; 56
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_u8SetPinDirection+0x1f4>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_u8SetPinDirection+0x1f0>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	d1 c0       	rjmp	.+418    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
					break;
				default:
					Local_u8ErrorState = STD_TYPES_NOK;
    14ae:	19 82       	std	Y+1, r1	; 0x01
    14b0:	cf c0       	rjmp	.+414    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
				}
				break;
				case DIO_u8_PORTC:
					switch (Copy_u8PinDirection) {
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	38 87       	std	Y+8, r19	; 0x08
    14ba:	2f 83       	std	Y+7, r18	; 0x07
    14bc:	8f 81       	ldd	r24, Y+7	; 0x07
    14be:	98 85       	ldd	r25, Y+8	; 0x08
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	51 f0       	breq	.+20     	; 0x14da <DIO_u8SetPinDirection+0x22a>
    14c6:	2f 81       	ldd	r18, Y+7	; 0x07
    14c8:	38 85       	ldd	r19, Y+8	; 0x08
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	71 f1       	breq	.+92     	; 0x152c <DIO_u8SetPinDirection+0x27c>
    14d0:	8f 81       	ldd	r24, Y+7	; 0x07
    14d2:	98 85       	ldd	r25, Y+8	; 0x08
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	a9 f0       	breq	.+42     	; 0x1502 <DIO_u8SetPinDirection+0x252>
    14d8:	50 c0       	rjmp	.+160    	; 0x157a <DIO_u8SetPinDirection+0x2ca>
					case DIO_u8_OUTPUT:
						SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    14da:	a4 e3       	ldi	r26, 0x34	; 52
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e4 e3       	ldi	r30, 0x34	; 52
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8SetPinDirection+0x248>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8SetPinDirection+0x244>
    14fc:	84 2b       	or	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	a7 c0       	rjmp	.+334    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
						break;
					case DIO_u8_INPUT_FLOATING:
						CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1502:	a4 e3       	ldi	r26, 0x34	; 52
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e4 e3       	ldi	r30, 0x34	; 52
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_u8SetPinDirection+0x270>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_u8SetPinDirection+0x26c>
    1524:	80 95       	com	r24
    1526:	84 23       	and	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	92 c0       	rjmp	.+292    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
						break;
					case DIO_u8_INPUT_UP:
						CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    152c:	a4 e3       	ldi	r26, 0x34	; 52
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e4 e3       	ldi	r30, 0x34	; 52
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_u8SetPinDirection+0x298>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	2a 95       	dec	r18
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_u8SetPinDirection+0x294>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
						SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1552:	a5 e3       	ldi	r26, 0x35	; 53
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e3       	ldi	r30, 0x35	; 53
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8SetPinDirection+0x2c0>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_u8SetPinDirection+0x2bc>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	6b c0       	rjmp	.+214    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
						break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
    157a:	19 82       	std	Y+1, r1	; 0x01
    157c:	69 c0       	rjmp	.+210    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
					}
					break;
					case DIO_u8_PORTD:
						switch (Copy_u8PinDirection) {
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3e 83       	std	Y+6, r19	; 0x06
    1586:	2d 83       	std	Y+5, r18	; 0x05
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	51 f0       	breq	.+20     	; 0x15a6 <DIO_u8SetPinDirection+0x2f6>
    1592:	2d 81       	ldd	r18, Y+5	; 0x05
    1594:	3e 81       	ldd	r19, Y+6	; 0x06
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	71 f1       	breq	.+92     	; 0x15f8 <DIO_u8SetPinDirection+0x348>
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	a9 f0       	breq	.+42     	; 0x15ce <DIO_u8SetPinDirection+0x31e>
    15a4:	50 c0       	rjmp	.+160    	; 0x1646 <DIO_u8SetPinDirection+0x396>
						case DIO_u8_OUTPUT:
							SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    15a6:	a1 e3       	ldi	r26, 0x31	; 49
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e1 e3       	ldi	r30, 0x31	; 49
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_u8SetPinDirection+0x314>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_u8SetPinDirection+0x310>
    15c8:	84 2b       	or	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	41 c0       	rjmp	.+130    	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
							break;
						case DIO_u8_INPUT_FLOATING:
							CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    15ce:	a1 e3       	ldi	r26, 0x31	; 49
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e1 e3       	ldi	r30, 0x31	; 49
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_u8SetPinDirection+0x33c>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_u8SetPinDirection+0x338>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	2c c0       	rjmp	.+88     	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
							break;
						case DIO_u8_INPUT_UP:
							CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    15f8:	a1 e3       	ldi	r26, 0x31	; 49
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e1 e3       	ldi	r30, 0x31	; 49
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_u8SetPinDirection+0x364>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	2a 95       	dec	r18
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_u8SetPinDirection+0x360>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
							SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    161e:	a2 e3       	ldi	r26, 0x32	; 50
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e2 e3       	ldi	r30, 0x32	; 50
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_u8SetPinDirection+0x38c>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_u8SetPinDirection+0x388>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
							break;
						default:
							Local_u8ErrorState = STD_TYPES_NOK;
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
						}
						break;
						default:
							Local_u8ErrorState = STD_TYPES_NOK;
    164a:	19 82       	std	Y+1, r1	; 0x01
    164c:	01 c0       	rjmp	.+2      	; 0x1650 <DIO_u8SetPinDirection+0x3a0>
		}

	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    164e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1650:	89 81       	ldd	r24, Y+1	; 0x01
}
    1652:	2e 96       	adiw	r28, 0x0e	; 14
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	2e 97       	sbiw	r28, 0x0e	; 14
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	8a 83       	std	Y+2, r24	; 0x02
    167a:	6b 83       	std	Y+3, r22	; 0x03
    167c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	88 30       	cpi	r24, 0x08	; 8
    1686:	08 f0       	brcs	.+2      	; 0x168a <DIO_u8SetPinValue+0x26>
    1688:	0c c1       	rjmp	.+536    	; 0x18a2 <DIO_u8SetPinValue+0x23e>
		switch (Copy_u8PortId) {
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3e 87       	std	Y+14, r19	; 0x0e
    1692:	2d 87       	std	Y+13, r18	; 0x0d
    1694:	8d 85       	ldd	r24, Y+13	; 0x0d
    1696:	9e 85       	ldd	r25, Y+14	; 0x0e
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <DIO_u8SetPinValue+0x3c>
    169e:	51 c0       	rjmp	.+162    	; 0x1742 <DIO_u8SetPinValue+0xde>
    16a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    16a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <DIO_u8SetPinValue+0x50>
    16aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	71 f0       	breq	.+28     	; 0x16ce <DIO_u8SetPinValue+0x6a>
    16b2:	f5 c0       	rjmp	.+490    	; 0x189e <DIO_u8SetPinValue+0x23a>
    16b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    16b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <DIO_u8SetPinValue+0x5c>
    16be:	7b c0       	rjmp	.+246    	; 0x17b6 <DIO_u8SetPinValue+0x152>
    16c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c4:	83 30       	cpi	r24, 0x03	; 3
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <DIO_u8SetPinValue+0x68>
    16ca:	af c0       	rjmp	.+350    	; 0x182a <DIO_u8SetPinValue+0x1c6>
    16cc:	e8 c0       	rjmp	.+464    	; 0x189e <DIO_u8SetPinValue+0x23a>
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue) {
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	3c 87       	std	Y+12, r19	; 0x0c
    16d6:	2b 87       	std	Y+11, r18	; 0x0b
    16d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16da:	9c 85       	ldd	r25, Y+12	; 0x0c
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	31 f0       	breq	.+12     	; 0x16ec <DIO_u8SetPinValue+0x88>
    16e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    16e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    16e4:	21 30       	cpi	r18, 0x01	; 1
    16e6:	31 05       	cpc	r19, r1
    16e8:	b1 f0       	breq	.+44     	; 0x1716 <DIO_u8SetPinValue+0xb2>
    16ea:	29 c0       	rjmp	.+82     	; 0x173e <DIO_u8SetPinValue+0xda>
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    16ec:	ab e3       	ldi	r26, 0x3B	; 59
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e3       	ldi	r30, 0x3B	; 59
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <DIO_u8SetPinValue+0xa6>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <DIO_u8SetPinValue+0xa2>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	c7 c0       	rjmp	.+398    	; 0x18a4 <DIO_u8SetPinValue+0x240>
				break;
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1716:	ab e3       	ldi	r26, 0x3B	; 59
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	eb e3       	ldi	r30, 0x3B	; 59
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_u8SetPinValue+0xd0>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_u8SetPinValue+0xcc>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	b3 c0       	rjmp	.+358    	; 0x18a4 <DIO_u8SetPinValue+0x240>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    173e:	19 82       	std	Y+1, r1	; 0x01
    1740:	b1 c0       	rjmp	.+354    	; 0x18a4 <DIO_u8SetPinValue+0x240>
			}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue) {
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	3a 87       	std	Y+10, r19	; 0x0a
    174a:	29 87       	std	Y+9, r18	; 0x09
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	31 f0       	breq	.+12     	; 0x1760 <DIO_u8SetPinValue+0xfc>
    1754:	29 85       	ldd	r18, Y+9	; 0x09
    1756:	3a 85       	ldd	r19, Y+10	; 0x0a
    1758:	21 30       	cpi	r18, 0x01	; 1
    175a:	31 05       	cpc	r19, r1
    175c:	b1 f0       	breq	.+44     	; 0x178a <DIO_u8SetPinValue+0x126>
    175e:	29 c0       	rjmp	.+82     	; 0x17b2 <DIO_u8SetPinValue+0x14e>
				case DIO_u8_LOW:
					CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1760:	a8 e3       	ldi	r26, 0x38	; 56
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_u8SetPinValue+0x11a>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_u8SetPinValue+0x116>
    1782:	80 95       	com	r24
    1784:	84 23       	and	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	8d c0       	rjmp	.+282    	; 0x18a4 <DIO_u8SetPinValue+0x240>
					break;
				case DIO_u8_HIGH:
					SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_u8SetPinValue+0x144>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_u8SetPinValue+0x140>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	79 c0       	rjmp	.+242    	; 0x18a4 <DIO_u8SetPinValue+0x240>
					break;
				default:
					Local_u8ErrorState = STD_TYPES_NOK;
    17b2:	19 82       	std	Y+1, r1	; 0x01
    17b4:	77 c0       	rjmp	.+238    	; 0x18a4 <DIO_u8SetPinValue+0x240>
				}
				break;

				case DIO_u8_PORTC:
					switch (Copy_u8PinValue) {
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	38 87       	std	Y+8, r19	; 0x08
    17be:	2f 83       	std	Y+7, r18	; 0x07
    17c0:	8f 81       	ldd	r24, Y+7	; 0x07
    17c2:	98 85       	ldd	r25, Y+8	; 0x08
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	31 f0       	breq	.+12     	; 0x17d4 <DIO_u8SetPinValue+0x170>
    17c8:	2f 81       	ldd	r18, Y+7	; 0x07
    17ca:	38 85       	ldd	r19, Y+8	; 0x08
    17cc:	21 30       	cpi	r18, 0x01	; 1
    17ce:	31 05       	cpc	r19, r1
    17d0:	b1 f0       	breq	.+44     	; 0x17fe <DIO_u8SetPinValue+0x19a>
    17d2:	29 c0       	rjmp	.+82     	; 0x1826 <DIO_u8SetPinValue+0x1c2>
					case DIO_u8_LOW:
						CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    17d4:	a5 e3       	ldi	r26, 0x35	; 53
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e3       	ldi	r30, 0x35	; 53
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_u8SetPinValue+0x18e>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_u8SetPinValue+0x18a>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	53 c0       	rjmp	.+166    	; 0x18a4 <DIO_u8SetPinValue+0x240>
						break;
					case DIO_u8_HIGH:
						SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_u8SetPinValue+0x1b8>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_u8SetPinValue+0x1b4>
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <DIO_u8SetPinValue+0x240>
						break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
    1826:	19 82       	std	Y+1, r1	; 0x01
    1828:	3d c0       	rjmp	.+122    	; 0x18a4 <DIO_u8SetPinValue+0x240>
					}
					break;

					case DIO_u8_PORTD:
						switch (Copy_u8PinValue) {
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	3e 83       	std	Y+6, r19	; 0x06
    1832:	2d 83       	std	Y+5, r18	; 0x05
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	31 f0       	breq	.+12     	; 0x1848 <DIO_u8SetPinValue+0x1e4>
    183c:	2d 81       	ldd	r18, Y+5	; 0x05
    183e:	3e 81       	ldd	r19, Y+6	; 0x06
    1840:	21 30       	cpi	r18, 0x01	; 1
    1842:	31 05       	cpc	r19, r1
    1844:	b1 f0       	breq	.+44     	; 0x1872 <DIO_u8SetPinValue+0x20e>
    1846:	29 c0       	rjmp	.+82     	; 0x189a <DIO_u8SetPinValue+0x236>
						case DIO_u8_LOW:
							CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1848:	a2 e3       	ldi	r26, 0x32	; 50
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e2 e3       	ldi	r30, 0x32	; 50
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_u8SetPinValue+0x202>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_u8SetPinValue+0x1fe>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	19 c0       	rjmp	.+50     	; 0x18a4 <DIO_u8SetPinValue+0x240>
							break;
						case DIO_u8_HIGH:
							SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1872:	a2 e3       	ldi	r26, 0x32	; 50
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e2 e3       	ldi	r30, 0x32	; 50
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_u8SetPinValue+0x22c>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_u8SetPinValue+0x228>
    1894:	84 2b       	or	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <DIO_u8SetPinValue+0x240>
							break;
						default:
							Local_u8ErrorState = STD_TYPES_NOK;
    189a:	19 82       	std	Y+1, r1	; 0x01
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <DIO_u8SetPinValue+0x240>
						}
						break;
						default:
							Local_u8ErrorState = STD_TYPES_NOK;
    189e:	19 82       	std	Y+1, r1	; 0x01
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <DIO_u8SetPinValue+0x240>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    18a2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a6:	2e 96       	adiw	r28, 0x0e	; 14
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId,u8 *Copy_Pu8ReturnedPinValue) {
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	27 97       	sbiw	r28, 0x07	; 7
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	6b 83       	std	Y+3, r22	; 0x03
    18d0:	5d 83       	std	Y+5, r21	; 0x05
    18d2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_Pu8ReturnedPinValue!=NULL)) {
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	88 30       	cpi	r24, 0x08	; 8
    18dc:	08 f0       	brcs	.+2      	; 0x18e0 <DIO_u8GetPinValue+0x28>
    18de:	78 c0       	rjmp	.+240    	; 0x19d0 <DIO_u8GetPinValue+0x118>
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	09 f4       	brne	.+2      	; 0x18ea <DIO_u8GetPinValue+0x32>
    18e8:	73 c0       	rjmp	.+230    	; 0x19d0 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8PortId){
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3f 83       	std	Y+7, r19	; 0x07
    18f2:	2e 83       	std	Y+6, r18	; 0x06
    18f4:	4e 81       	ldd	r20, Y+6	; 0x06
    18f6:	5f 81       	ldd	r21, Y+7	; 0x07
    18f8:	41 30       	cpi	r20, 0x01	; 1
    18fa:	51 05       	cpc	r21, r1
    18fc:	59 f1       	breq	.+86     	; 0x1954 <DIO_u8GetPinValue+0x9c>
    18fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1900:	9f 81       	ldd	r25, Y+7	; 0x07
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	91 05       	cpc	r25, r1
    1906:	34 f4       	brge	.+12     	; 0x1914 <DIO_u8GetPinValue+0x5c>
    1908:	2e 81       	ldd	r18, Y+6	; 0x06
    190a:	3f 81       	ldd	r19, Y+7	; 0x07
    190c:	21 15       	cp	r18, r1
    190e:	31 05       	cpc	r19, r1
    1910:	69 f0       	breq	.+26     	; 0x192c <DIO_u8GetPinValue+0x74>
    1912:	5c c0       	rjmp	.+184    	; 0x19cc <DIO_u8GetPinValue+0x114>
    1914:	4e 81       	ldd	r20, Y+6	; 0x06
    1916:	5f 81       	ldd	r21, Y+7	; 0x07
    1918:	42 30       	cpi	r20, 0x02	; 2
    191a:	51 05       	cpc	r21, r1
    191c:	79 f1       	breq	.+94     	; 0x197c <DIO_u8GetPinValue+0xc4>
    191e:	8e 81       	ldd	r24, Y+6	; 0x06
    1920:	9f 81       	ldd	r25, Y+7	; 0x07
    1922:	83 30       	cpi	r24, 0x03	; 3
    1924:	91 05       	cpc	r25, r1
    1926:	09 f4       	brne	.+2      	; 0x192a <DIO_u8GetPinValue+0x72>
    1928:	3d c0       	rjmp	.+122    	; 0x19a4 <DIO_u8GetPinValue+0xec>
    192a:	50 c0       	rjmp	.+160    	; 0x19cc <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTA:
			*Copy_Pu8ReturnedPinValue=GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    192c:	e9 e3       	ldi	r30, 0x39	; 57
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	88 2f       	mov	r24, r24
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a9 01       	movw	r20, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <DIO_u8GetPinValue+0x8c>
    1940:	55 95       	asr	r21
    1942:	47 95       	ror	r20
    1944:	8a 95       	dec	r24
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <DIO_u8GetPinValue+0x88>
    1948:	ca 01       	movw	r24, r20
    194a:	81 70       	andi	r24, 0x01	; 1
    194c:	ec 81       	ldd	r30, Y+4	; 0x04
    194e:	fd 81       	ldd	r31, Y+5	; 0x05
    1950:	80 83       	st	Z, r24
    1952:	3f c0       	rjmp	.+126    	; 0x19d2 <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTB:
			*Copy_Pu8ReturnedPinValue=GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1954:	e6 e3       	ldi	r30, 0x36	; 54
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a9 01       	movw	r20, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <DIO_u8GetPinValue+0xb4>
    1968:	55 95       	asr	r21
    196a:	47 95       	ror	r20
    196c:	8a 95       	dec	r24
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <DIO_u8GetPinValue+0xb0>
    1970:	ca 01       	movw	r24, r20
    1972:	81 70       	andi	r24, 0x01	; 1
    1974:	ec 81       	ldd	r30, Y+4	; 0x04
    1976:	fd 81       	ldd	r31, Y+5	; 0x05
    1978:	80 83       	st	Z, r24
    197a:	2b c0       	rjmp	.+86     	; 0x19d2 <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTC:
			*Copy_Pu8ReturnedPinValue=GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    197c:	e3 e3       	ldi	r30, 0x33	; 51
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a9 01       	movw	r20, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_u8GetPinValue+0xdc>
    1990:	55 95       	asr	r21
    1992:	47 95       	ror	r20
    1994:	8a 95       	dec	r24
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_u8GetPinValue+0xd8>
    1998:	ca 01       	movw	r24, r20
    199a:	81 70       	andi	r24, 0x01	; 1
    199c:	ec 81       	ldd	r30, Y+4	; 0x04
    199e:	fd 81       	ldd	r31, Y+5	; 0x05
    19a0:	80 83       	st	Z, r24
    19a2:	17 c0       	rjmp	.+46     	; 0x19d2 <DIO_u8GetPinValue+0x11a>
			break;
		case DIO_u8_PORTD:
			*Copy_Pu8ReturnedPinValue=GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    19a4:	e0 e3       	ldi	r30, 0x30	; 48
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a9 01       	movw	r20, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <DIO_u8GetPinValue+0x104>
    19b8:	55 95       	asr	r21
    19ba:	47 95       	ror	r20
    19bc:	8a 95       	dec	r24
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <DIO_u8GetPinValue+0x100>
    19c0:	ca 01       	movw	r24, r20
    19c2:	81 70       	andi	r24, 0x01	; 1
    19c4:	ec 81       	ldd	r30, Y+4	; 0x04
    19c6:	fd 81       	ldd	r31, Y+5	; 0x05
    19c8:	80 83       	st	Z, r24
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <DIO_u8GetPinValue+0x11a>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <DIO_u8GetPinValue+0x11a>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    19d0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d4:	27 96       	adiw	r28, 0x07	; 7
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection) {
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	2d 97       	sbiw	r28, 0x0d	; 13
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	8a 83       	std	Y+2, r24	; 0x02
    19fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId){
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	3d 87       	std	Y+13, r19	; 0x0d
    1a0a:	2c 87       	std	Y+12, r18	; 0x0c
    1a0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <DIO_u8SetPortDirection+0x32>
    1a16:	3e c0       	rjmp	.+124    	; 0x1a94 <DIO_u8SetPortDirection+0xae>
    1a18:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a1a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <DIO_u8SetPortDirection+0x46>
    1a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a24:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	71 f0       	breq	.+28     	; 0x1a46 <DIO_u8SetPortDirection+0x60>
    1a2a:	a9 c0       	rjmp	.+338    	; 0x1b7e <DIO_u8SetPortDirection+0x198>
    1a2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	31 05       	cpc	r19, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <DIO_u8SetPortDirection+0x52>
    1a36:	55 c0       	rjmp	.+170    	; 0x1ae2 <DIO_u8SetPortDirection+0xfc>
    1a38:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	91 05       	cpc	r25, r1
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <DIO_u8SetPortDirection+0x5e>
    1a42:	76 c0       	rjmp	.+236    	; 0x1b30 <DIO_u8SetPortDirection+0x14a>
    1a44:	9c c0       	rjmp	.+312    	; 0x1b7e <DIO_u8SetPortDirection+0x198>
	case DIO_u8_PORTA:
		switch(Copy_u8PortDirection){
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	3b 87       	std	Y+11, r19	; 0x0b
    1a4e:	2a 87       	std	Y+10, r18	; 0x0a
    1a50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	91 05       	cpc	r25, r1
    1a58:	51 f0       	breq	.+20     	; 0x1a6e <DIO_u8SetPortDirection+0x88>
    1a5a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a5c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	71 f0       	breq	.+28     	; 0x1a80 <DIO_u8SetPortDirection+0x9a>
    1a64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	31 f0       	breq	.+12     	; 0x1a78 <DIO_u8SetPortDirection+0x92>
    1a6c:	11 c0       	rjmp	.+34     	; 0x1a90 <DIO_u8SetPortDirection+0xaa>
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG=0xff;
    1a6e:	ea e3       	ldi	r30, 0x3A	; 58
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8f ef       	ldi	r24, 0xFF	; 255
    1a74:	80 83       	st	Z, r24
    1a76:	84 c0       	rjmp	.+264    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
			break;
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRA_REG=0x00;
    1a78:	ea e3       	ldi	r30, 0x3A	; 58
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	10 82       	st	Z, r1
    1a7e:	80 c0       	rjmp	.+256    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
			break;
		case DIO_u8_INPUT_UP:
			DIO_u8_DDRA_REG=0x00;
    1a80:	ea e3       	ldi	r30, 0x3A	; 58
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	10 82       	st	Z, r1
			DIO_u8_PORTA_REG=0xff;
    1a86:	eb e3       	ldi	r30, 0x3B	; 59
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	80 83       	st	Z, r24
    1a8e:	78 c0       	rjmp	.+240    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1a90:	19 82       	std	Y+1, r1	; 0x01
    1a92:	76 c0       	rjmp	.+236    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
		}
		break;
		case DIO_u8_PORTB:
			switch(Copy_u8PortDirection){
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	39 87       	std	Y+9, r19	; 0x09
    1a9c:	28 87       	std	Y+8, r18	; 0x08
    1a9e:	88 85       	ldd	r24, Y+8	; 0x08
    1aa0:	99 85       	ldd	r25, Y+9	; 0x09
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	51 f0       	breq	.+20     	; 0x1abc <DIO_u8SetPortDirection+0xd6>
    1aa8:	28 85       	ldd	r18, Y+8	; 0x08
    1aaa:	39 85       	ldd	r19, Y+9	; 0x09
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	71 f0       	breq	.+28     	; 0x1ace <DIO_u8SetPortDirection+0xe8>
    1ab2:	88 85       	ldd	r24, Y+8	; 0x08
    1ab4:	99 85       	ldd	r25, Y+9	; 0x09
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <DIO_u8SetPortDirection+0xe0>
    1aba:	11 c0       	rjmp	.+34     	; 0x1ade <DIO_u8SetPortDirection+0xf8>
			case DIO_u8_OUTPUT:
				DIO_u8_DDRB_REG=0xff;
    1abc:	e7 e3       	ldi	r30, 0x37	; 55
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	80 83       	st	Z, r24
    1ac4:	5d c0       	rjmp	.+186    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
				break;
			case DIO_u8_INPUT_FLOATING:
				DIO_u8_DDRB_REG=0x00;
    1ac6:	e7 e3       	ldi	r30, 0x37	; 55
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	10 82       	st	Z, r1
    1acc:	59 c0       	rjmp	.+178    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
				break;
			case DIO_u8_INPUT_UP:
				DIO_u8_DDRB_REG=0x00;
    1ace:	e7 e3       	ldi	r30, 0x37	; 55
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	10 82       	st	Z, r1
				DIO_u8_PORTB_REG=0xff;
    1ad4:	e8 e3       	ldi	r30, 0x38	; 56
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	8f ef       	ldi	r24, 0xFF	; 255
    1ada:	80 83       	st	Z, r24
    1adc:	51 c0       	rjmp	.+162    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1ade:	19 82       	std	Y+1, r1	; 0x01
    1ae0:	4f c0       	rjmp	.+158    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
			}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection){
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	3f 83       	std	Y+7, r19	; 0x07
    1aea:	2e 83       	std	Y+6, r18	; 0x06
    1aec:	8e 81       	ldd	r24, Y+6	; 0x06
    1aee:	9f 81       	ldd	r25, Y+7	; 0x07
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	91 05       	cpc	r25, r1
    1af4:	51 f0       	breq	.+20     	; 0x1b0a <DIO_u8SetPortDirection+0x124>
    1af6:	2e 81       	ldd	r18, Y+6	; 0x06
    1af8:	3f 81       	ldd	r19, Y+7	; 0x07
    1afa:	22 30       	cpi	r18, 0x02	; 2
    1afc:	31 05       	cpc	r19, r1
    1afe:	71 f0       	breq	.+28     	; 0x1b1c <DIO_u8SetPortDirection+0x136>
    1b00:	8e 81       	ldd	r24, Y+6	; 0x06
    1b02:	9f 81       	ldd	r25, Y+7	; 0x07
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	31 f0       	breq	.+12     	; 0x1b14 <DIO_u8SetPortDirection+0x12e>
    1b08:	11 c0       	rjmp	.+34     	; 0x1b2c <DIO_u8SetPortDirection+0x146>
				case DIO_u8_OUTPUT:
					DIO_u8_DDRC_REG=0xff;
    1b0a:	e4 e3       	ldi	r30, 0x34	; 52
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255
    1b10:	80 83       	st	Z, r24
    1b12:	36 c0       	rjmp	.+108    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
					break;
				case DIO_u8_INPUT_FLOATING:
					DIO_u8_DDRC_REG=0x00;
    1b14:	e4 e3       	ldi	r30, 0x34	; 52
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	10 82       	st	Z, r1
    1b1a:	32 c0       	rjmp	.+100    	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
					break;
				case DIO_u8_INPUT_UP:
					DIO_u8_DDRC_REG=0x00;
    1b1c:	e4 e3       	ldi	r30, 0x34	; 52
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	10 82       	st	Z, r1
					DIO_u8_PORTC_REG=0xff;
    1b22:	e5 e3       	ldi	r30, 0x35	; 53
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	8f ef       	ldi	r24, 0xFF	; 255
    1b28:	80 83       	st	Z, r24
    1b2a:	2a c0       	rjmp	.+84     	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
					break;
				default:
					Local_u8ErrorState = STD_TYPES_NOK;
    1b2c:	19 82       	std	Y+1, r1	; 0x01
    1b2e:	28 c0       	rjmp	.+80     	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
				}
				break;
				case DIO_u8_PORTD:
					switch(Copy_u8PortDirection){
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	3d 83       	std	Y+5, r19	; 0x05
    1b38:	2c 83       	std	Y+4, r18	; 0x04
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	91 05       	cpc	r25, r1
    1b42:	51 f0       	breq	.+20     	; 0x1b58 <DIO_u8SetPortDirection+0x172>
    1b44:	2c 81       	ldd	r18, Y+4	; 0x04
    1b46:	3d 81       	ldd	r19, Y+5	; 0x05
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	71 f0       	breq	.+28     	; 0x1b6a <DIO_u8SetPortDirection+0x184>
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <DIO_u8SetPortDirection+0x17c>
    1b56:	11 c0       	rjmp	.+34     	; 0x1b7a <DIO_u8SetPortDirection+0x194>
					case DIO_u8_OUTPUT:
						DIO_u8_DDRD_REG=0xff;
    1b58:	e1 e3       	ldi	r30, 0x31	; 49
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	80 83       	st	Z, r24
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
						break;
					case DIO_u8_INPUT_FLOATING:
						DIO_u8_DDRD_REG=0x00;
    1b62:	e1 e3       	ldi	r30, 0x31	; 49
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	10 82       	st	Z, r1
    1b68:	0b c0       	rjmp	.+22     	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
						break;
					case DIO_u8_INPUT_UP:
						DIO_u8_DDRD_REG=0x00;
    1b6a:	e1 e3       	ldi	r30, 0x31	; 49
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	10 82       	st	Z, r1
						DIO_u8_PORTD_REG=0xff;
    1b70:	e2 e3       	ldi	r30, 0x32	; 50
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	80 83       	st	Z, r24
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
						break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
    1b7a:	19 82       	std	Y+1, r1	; 0x01
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <DIO_u8SetPortDirection+0x19a>
					}
					break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
    1b7e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b82:	2d 96       	adiw	r28, 0x0d	; 13
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue) {
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <DIO_u8SetPortValue+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <DIO_u8SetPortValue+0x8>
    1b9c:	0f 92       	push	r0
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
    1ba4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortId){
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3d 83       	std	Y+5, r19	; 0x05
    1bb2:	2c 83       	std	Y+4, r18	; 0x04
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	d1 f0       	breq	.+52     	; 0x1bf2 <DIO_u8SetPortValue+0x5e>
    1bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <DIO_u8SetPortValue+0x3e>
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bca:	9d 81       	ldd	r25, Y+5	; 0x05
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <DIO_u8SetPortValue+0x54>
    1bd0:	1f c0       	rjmp	.+62     	; 0x1c10 <DIO_u8SetPortValue+0x7c>
    1bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	81 f0       	breq	.+32     	; 0x1bfc <DIO_u8SetPortValue+0x68>
    1bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bde:	9d 81       	ldd	r25, Y+5	; 0x05
    1be0:	83 30       	cpi	r24, 0x03	; 3
    1be2:	91 05       	cpc	r25, r1
    1be4:	81 f0       	breq	.+32     	; 0x1c06 <DIO_u8SetPortValue+0x72>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <DIO_u8SetPortValue+0x7c>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG=Copy_u8PortValue;
    1be8:	eb e3       	ldi	r30, 0x3B	; 59
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	80 83       	st	Z, r24
    1bf0:	10 c0       	rjmp	.+32     	; 0x1c12 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG=Copy_u8PortValue;
    1bf2:	e8 e3       	ldi	r30, 0x38	; 56
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	80 83       	st	Z, r24
    1bfa:	0b c0       	rjmp	.+22     	; 0x1c12 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG=Copy_u8PortValue;
    1bfc:	e5 e3       	ldi	r30, 0x35	; 53
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	80 83       	st	Z, r24
    1c04:	06 c0       	rjmp	.+12     	; 0x1c12 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG=Copy_u8PortValue;
    1c06:	e2 e3       	ldi	r30, 0x32	; 50
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	80 83       	st	Z, r24
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <DIO_u8SetPortValue+0x7e>
		break;
	default:
		Local_u8ErrorState = STD_TYPES_NOK;
    1c10:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_Pu8ReturnedPortValue) {
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <DIO_u8GetPortValue+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <DIO_u8GetPortValue+0x8>
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <DIO_u8GetPortValue+0xa>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	8a 83       	std	Y+2, r24	; 0x02
    1c34:	7c 83       	std	Y+4, r23	; 0x04
    1c36:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8ReturnedPortValue!=NULL){
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	e9 f1       	breq	.+122    	; 0x1cbe <DIO_u8GetPortValue+0x9a>
		switch (Copy_u8PortId){
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3e 83       	std	Y+6, r19	; 0x06
    1c4c:	2d 83       	std	Y+5, r18	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	91 05       	cpc	r25, r1
    1c56:	e1 f0       	breq	.+56     	; 0x1c90 <DIO_u8GetPortValue+0x6c>
    1c58:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <DIO_u8GetPortValue+0x48>
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <DIO_u8GetPortValue+0x5e>
    1c6a:	27 c0       	rjmp	.+78     	; 0x1cba <DIO_u8GetPortValue+0x96>
    1c6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	31 05       	cpc	r19, r1
    1c74:	a1 f0       	breq	.+40     	; 0x1c9e <DIO_u8GetPortValue+0x7a>
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	83 30       	cpi	r24, 0x03	; 3
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	b1 f0       	breq	.+44     	; 0x1cac <DIO_u8GetPortValue+0x88>
    1c80:	1c c0       	rjmp	.+56     	; 0x1cba <DIO_u8GetPortValue+0x96>
		case DIO_u8_PORTA:
			*Copy_Pu8ReturnedPortValue=DIO_u8_PINA_REG;
    1c82:	e9 e3       	ldi	r30, 0x39	; 57
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8c:	80 83       	st	Z, r24
    1c8e:	18 c0       	rjmp	.+48     	; 0x1cc0 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTB:
			*Copy_Pu8ReturnedPortValue=DIO_u8_PINB_REG;
    1c90:	e6 e3       	ldi	r30, 0x36	; 54
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	eb 81       	ldd	r30, Y+3	; 0x03
    1c98:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9a:	80 83       	st	Z, r24
    1c9c:	11 c0       	rjmp	.+34     	; 0x1cc0 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTC:
			*Copy_Pu8ReturnedPortValue=DIO_u8_PINC_REG;
    1c9e:	e3 e3       	ldi	r30, 0x33	; 51
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca8:	80 83       	st	Z, r24
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTD:
			*Copy_Pu8ReturnedPortValue=DIO_u8_PIND_REG;
    1cac:	e0 e3       	ldi	r30, 0x30	; 48
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb6:	80 83       	st	Z, r24
    1cb8:	03 c0       	rjmp	.+6      	; 0x1cc0 <DIO_u8GetPortValue+0x9c>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1cba:	19 82       	std	Y+1, r1	; 0x01
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <DIO_u8GetPortValue+0x9c>
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1cbe:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc2:	26 96       	adiw	r28, 0x06	; 6
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <DIO_u8TogPinValue>:

u8 DIO_u8TogPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId) {
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <DIO_u8TogPinValue+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <DIO_u8TogPinValue+0x8>
    1cdc:	0f 92       	push	r0
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	8a 83       	std	Y+2, r24	; 0x02
    1ce4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 30       	cpi	r24, 0x08	; 8
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <DIO_u8TogPinValue+0x1c>
    1cee:	72 c0       	rjmp	.+228    	; 0x1dd4 <DIO_u8TogPinValue+0x100>
		Local_u8ErrorState = STD_TYPES_OK;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortId){
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	3d 83       	std	Y+5, r19	; 0x05
    1cfc:	2c 83       	std	Y+4, r18	; 0x04
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	91 05       	cpc	r25, r1
    1d06:	49 f1       	breq	.+82     	; 0x1d5a <DIO_u8TogPinValue+0x86>
    1d08:	2c 81       	ldd	r18, Y+4	; 0x04
    1d0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d0c:	22 30       	cpi	r18, 0x02	; 2
    1d0e:	31 05       	cpc	r19, r1
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <DIO_u8TogPinValue+0x48>
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	9d 81       	ldd	r25, Y+5	; 0x05
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	61 f0       	breq	.+24     	; 0x1d32 <DIO_u8TogPinValue+0x5e>
    1d1a:	5b c0       	rjmp	.+182    	; 0x1dd2 <DIO_u8TogPinValue+0xfe>
    1d1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d20:	22 30       	cpi	r18, 0x02	; 2
    1d22:	31 05       	cpc	r19, r1
    1d24:	71 f1       	breq	.+92     	; 0x1d82 <DIO_u8TogPinValue+0xae>
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2a:	83 30       	cpi	r24, 0x03	; 3
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	e9 f1       	breq	.+122    	; 0x1daa <DIO_u8TogPinValue+0xd6>
    1d30:	50 c0       	rjmp	.+160    	; 0x1dd2 <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTA:
			TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    1d32:	ab e3       	ldi	r26, 0x3B	; 59
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	eb e3       	ldi	r30, 0x3B	; 59
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <DIO_u8TogPinValue+0x7c>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <DIO_u8TogPinValue+0x78>
    1d54:	84 27       	eor	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	3d c0       	rjmp	.+122    	; 0x1dd4 <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTB:
			TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    1d5a:	a8 e3       	ldi	r26, 0x38	; 56
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e8 e3       	ldi	r30, 0x38	; 56
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <DIO_u8TogPinValue+0xa4>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <DIO_u8TogPinValue+0xa0>
    1d7c:	84 27       	eor	r24, r20
    1d7e:	8c 93       	st	X, r24
    1d80:	29 c0       	rjmp	.+82     	; 0x1dd4 <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTC:
			TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    1d82:	a5 e3       	ldi	r26, 0x35	; 53
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e3       	ldi	r30, 0x35	; 53
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <DIO_u8TogPinValue+0xcc>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <DIO_u8TogPinValue+0xc8>
    1da4:	84 27       	eor	r24, r20
    1da6:	8c 93       	st	X, r24
    1da8:	15 c0       	rjmp	.+42     	; 0x1dd4 <DIO_u8TogPinValue+0x100>
			break;
		case DIO_u8_PORTD:
			TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    1daa:	a2 e3       	ldi	r26, 0x32	; 50
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e2 e3       	ldi	r30, 0x32	; 50
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	48 2f       	mov	r20, r24
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 2e       	mov	r0, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <DIO_u8TogPinValue+0xf4>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	0a 94       	dec	r0
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <DIO_u8TogPinValue+0xf0>
    1dcc:	84 27       	eor	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <DIO_u8TogPinValue+0x100>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1dd2:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <TWI_voidInit>:

#include "I2C_interface.h"
#include "I2C_private.h"
#include "I2C_config.h"

void TWI_voidInit(u8 Copy_u8SlaveAddress){
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	0f 92       	push	r0
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	89 83       	std	Y+1, r24	; 0x01

	/* Enable TWI and Enable ACK */
	SET_BIT(TWI_u8_TWCR_REG,2);
    1df2:	a6 e5       	ldi	r26, 0x56	; 86
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e6 e5       	ldi	r30, 0x56	; 86
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	84 60       	ori	r24, 0x04	; 4
    1dfe:	8c 93       	st	X, r24
	SET_BIT(TWI_u8_TWCR_REG,6);
    1e00:	a6 e5       	ldi	r26, 0x56	; 86
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e5       	ldi	r30, 0x56	; 86
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 64       	ori	r24, 0x40	; 64
    1e0c:	8c 93       	st	X, r24
	/* Set Clk 100KHz with no Prescaler */
	CLR_BIT(TWI_u8_TWSR_REG,1);
    1e0e:	a1 e2       	ldi	r26, 0x21	; 33
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e1 e2       	ldi	r30, 0x21	; 33
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8d 7f       	andi	r24, 0xFD	; 253
    1e1a:	8c 93       	st	X, r24
	CLR_BIT(TWI_u8_TWSR_REG,0);
    1e1c:	a1 e2       	ldi	r26, 0x21	; 33
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e1 e2       	ldi	r30, 0x21	; 33
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8e 7f       	andi	r24, 0xFE	; 254
    1e28:	8c 93       	st	X, r24

	TWI_u8_TWBR_REG = 32;
    1e2a:	e0 e2       	ldi	r30, 0x20	; 32
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 e2       	ldi	r24, 0x20	; 32
    1e30:	80 83       	st	Z, r24
	/* Assign my Own Address => TWAR */
	TWI_u8_TWAR_REG = Copy_u8SlaveAddress<<1;
    1e32:	e2 e2       	ldi	r30, 0x22	; 34
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	88 0f       	add	r24, r24
    1e3a:	80 83       	st	Z, r24
}
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <TWI_EnuSendStartCondition>:

TWI_ERR_STATE TWI_EnuSendStartCondition(void){
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
	TWI_ERR_STATE Local_EnuErrorState = TWI_OK;
    1e4e:	19 82       	std	Y+1, r1	; 0x01
	//	/* Send Start Condition */
	SET_BIT(TWI_u8_TWCR_REG,5);
    1e50:	a6 e5       	ldi	r26, 0x56	; 86
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e6 e5       	ldi	r30, 0x56	; 86
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 62       	ori	r24, 0x20	; 32
    1e5c:	8c 93       	st	X, r24
	//	/* Clear Flag to Start the new job */
	SET_BIT(TWI_u8_TWCR_REG,7);
    1e5e:	a6 e5       	ldi	r26, 0x56	; 86
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e6 e5       	ldi	r30, 0x56	; 86
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	80 68       	ori	r24, 0x80	; 128
    1e6a:	8c 93       	st	X, r24
	/* Wait for The Flag */
	while(!GET_BIT(TWI_u8_TWCR_REG,7));
    1e6c:	e6 e5       	ldi	r30, 0x56	; 86
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	88 23       	and	r24, r24
    1e74:	dc f7       	brge	.-10     	; 0x1e6c <TWI_EnuSendStartCondition+0x28>
	/* Check Status Code (ACK) */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x08){
    1e76:	e1 e2       	ldi	r30, 0x21	; 33
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	88 7f       	andi	r24, 0xF8	; 248
    1e82:	90 70       	andi	r25, 0x00	; 0
    1e84:	88 30       	cpi	r24, 0x08	; 8
    1e86:	91 05       	cpc	r25, r1
    1e88:	31 f0       	breq	.+12     	; 0x1e96 <TWI_EnuSendStartCondition+0x52>
		USART_voidSendString("Start Problem");
    1e8a:	80 e6       	ldi	r24, 0x60	; 96
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
		Local_EnuErrorState = TWI_SC_ERROR;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		/* Clear Start Condition Bit */
		//CLR_BIT(TWI_u8_TWCR_REG,5);
	}
	return Local_EnuErrorState;
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <TWI_EnuSendRepStartCondition>:

TWI_ERR_STATE TWI_EnuSendRepStartCondition(void){
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	TWI_ERR_STATE Local_EnuErrorState = TWI_OK;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
	/* Send Start Condition */
	SET_BIT(TWI_u8_TWCR_REG,5);
    1eac:	a6 e5       	ldi	r26, 0x56	; 86
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e6 e5       	ldi	r30, 0x56	; 86
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	80 62       	ori	r24, 0x20	; 32
    1eb8:	8c 93       	st	X, r24
	/* Clear Flag to Start the new job */
	SET_BIT(TWI_u8_TWCR_REG,7);
    1eba:	a6 e5       	ldi	r26, 0x56	; 86
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e6 e5       	ldi	r30, 0x56	; 86
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	80 68       	ori	r24, 0x80	; 128
    1ec6:	8c 93       	st	X, r24
	/* Wait for The Flag */
	while(!GET_BIT(TWI_u8_TWCR_REG,7));
    1ec8:	e6 e5       	ldi	r30, 0x56	; 86
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 23       	and	r24, r24
    1ed0:	dc f7       	brge	.-10     	; 0x1ec8 <TWI_EnuSendRepStartCondition+0x28>
	/* Check Status Code (ACK) */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x10){
    1ed2:	e1 e2       	ldi	r30, 0x21	; 33
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	88 7f       	andi	r24, 0xF8	; 248
    1ede:	90 70       	andi	r25, 0x00	; 0
    1ee0:	80 31       	cpi	r24, 0x10	; 16
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	31 f0       	breq	.+12     	; 0x1ef2 <TWI_EnuSendRepStartCondition+0x52>
		USART_voidSendString("REPStart Problem");
    1ee6:	8e e6       	ldi	r24, 0x6E	; 110
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
		Local_EnuErrorState = TWI_RSC_ERROR;
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		/* Clear Start Condition Bit */
		//CLR_BIT(TWI_u8_TWCR_REG,5);
	}
	return Local_EnuErrorState;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <TWI_EnuSendSlaveAddressWrite>:

TWI_ERR_STATE TWI_EnuSendSlaveAddressWrite(u8 Copy_u8SlaveAddress){
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <TWI_EnuSendSlaveAddressWrite+0x6>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERR_STATE Local_EnuErrorState= TWI_OK;
    1f08:	19 82       	std	Y+1, r1	; 0x01
	/* Write Slave Address into TWDR Reg + 0(Write) */
	TWI_u8_TWDR_REG = Copy_u8SlaveAddress<<1 ;
    1f0a:	e3 e2       	ldi	r30, 0x23	; 35
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	88 0f       	add	r24, r24
    1f12:	80 83       	st	Z, r24
	/* Select Write Operation */
	CLR_BIT(TWI_u8_TWDR_REG,0);
    1f14:	a3 e2       	ldi	r26, 0x23	; 35
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e3 e2       	ldi	r30, 0x23	; 35
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8e 7f       	andi	r24, 0xFE	; 254
    1f20:	8c 93       	st	X, r24
	/* Clear Start Condition Bit */
	CLR_BIT(TWI_u8_TWCR_REG,5);
    1f22:	a6 e5       	ldi	r26, 0x56	; 86
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e6 e5       	ldi	r30, 0x56	; 86
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8f 7d       	andi	r24, 0xDF	; 223
    1f2e:	8c 93       	st	X, r24
	/* Clear Flag to Start New Job*/
	SET_BIT(TWI_u8_TWCR_REG,7);
    1f30:	a6 e5       	ldi	r26, 0x56	; 86
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e6 e5       	ldi	r30, 0x56	; 86
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 68       	ori	r24, 0x80	; 128
    1f3c:	8c 93       	st	X, r24
	/* Wait for The Flag */
	while(!GET_BIT(TWI_u8_TWCR_REG,7));
    1f3e:	e6 e5       	ldi	r30, 0x56	; 86
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	88 23       	and	r24, r24
    1f46:	dc f7       	brge	.-10     	; 0x1f3e <TWI_EnuSendSlaveAddressWrite+0x42>
	/* Check Status Code (ACK) */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x18){
    1f48:	e1 e2       	ldi	r30, 0x21	; 33
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	88 7f       	andi	r24, 0xF8	; 248
    1f54:	90 70       	andi	r25, 0x00	; 0
    1f56:	88 31       	cpi	r24, 0x18	; 24
    1f58:	91 05       	cpc	r25, r1
    1f5a:	31 f0       	breq	.+12     	; 0x1f68 <TWI_EnuSendSlaveAddressWrite+0x6c>
		USART_voidSendString("Write address Problem");
    1f5c:	8f e7       	ldi	r24, 0x7F	; 127
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
		Local_EnuErrorState = TWI_SLA_W_ERROR;
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_EnuErrorState;
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <TWI_EnuSendDataByte>:

TWI_ERR_STATE TWI_EnuSendDataByte(u8 Copy_u8Byte){
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <TWI_EnuSendDataByte+0x6>
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERR_STATE Local_EnuErrorState= TWI_OK;
    1f80:	19 82       	std	Y+1, r1	; 0x01
	/* Write Byte TWDR Reg */
	TWI_u8_TWDR_REG = Copy_u8Byte;
    1f82:	e3 e2       	ldi	r30, 0x23	; 35
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	80 83       	st	Z, r24
	/* Clear Flag to Start New Job*/
	SET_BIT(TWI_u8_TWCR_REG,7);
    1f8a:	a6 e5       	ldi	r26, 0x56	; 86
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e6 e5       	ldi	r30, 0x56	; 86
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	80 68       	ori	r24, 0x80	; 128
    1f96:	8c 93       	st	X, r24
	/* Wait for The Flag*/
	while(!GET_BIT(TWI_u8_TWCR_REG,7));
    1f98:	e6 e5       	ldi	r30, 0x56	; 86
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 23       	and	r24, r24
    1fa0:	dc f7       	brge	.-10     	; 0x1f98 <TWI_EnuSendDataByte+0x24>
	/* Check Status Code (ACK) */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x28){
    1fa2:	e1 e2       	ldi	r30, 0x21	; 33
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	88 7f       	andi	r24, 0xF8	; 248
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	88 32       	cpi	r24, 0x28	; 40
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	31 f0       	breq	.+12     	; 0x1fc2 <TWI_EnuSendDataByte+0x4e>
		USART_voidSendString("send data Problem");
    1fb6:	85 e9       	ldi	r24, 0x95	; 149
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
		Local_EnuErrorState = TWI_DATA_T_ERROR;
    1fbe:	85 e0       	ldi	r24, 0x05	; 5
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_EnuErrorState;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <TWI_EnuSendSlaveAddressRead>:

TWI_ERR_STATE TWI_EnuSendSlaveAddressRead (u8 Copy_u8SlaveAddress){
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <TWI_EnuSendSlaveAddressRead+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERR_STATE Local_EnuErrorState= TWI_OK;
    1fda:	19 82       	std	Y+1, r1	; 0x01
	/* Write Slave Address into TWDR Reg + 0(Write) */
	TWI_u8_TWDR_REG = Copy_u8SlaveAddress<<1 ;
    1fdc:	e3 e2       	ldi	r30, 0x23	; 35
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	88 0f       	add	r24, r24
    1fe4:	80 83       	st	Z, r24
	/* Select Write Operation */
	SET_BIT(TWI_u8_TWDR_REG,0);
    1fe6:	a3 e2       	ldi	r26, 0x23	; 35
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e3 e2       	ldi	r30, 0x23	; 35
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	81 60       	ori	r24, 0x01	; 1
    1ff2:	8c 93       	st	X, r24
	/* Clear Start Condition Bit */
	CLR_BIT(TWI_u8_TWCR_REG,5);
    1ff4:	a6 e5       	ldi	r26, 0x56	; 86
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e6 e5       	ldi	r30, 0x56	; 86
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 7d       	andi	r24, 0xDF	; 223
    2000:	8c 93       	st	X, r24
	/* Clear Flag to Start New Job*/
	SET_BIT(TWI_u8_TWCR_REG,7);
    2002:	a6 e5       	ldi	r26, 0x56	; 86
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e6 e5       	ldi	r30, 0x56	; 86
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	80 68       	ori	r24, 0x80	; 128
    200e:	8c 93       	st	X, r24
	/* Wait for The Flag */
		while(!GET_BIT(TWI_u8_TWCR_REG,7));
    2010:	e6 e5       	ldi	r30, 0x56	; 86
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	88 23       	and	r24, r24
    2018:	dc f7       	brge	.-10     	; 0x2010 <TWI_EnuSendSlaveAddressRead+0x42>
	/* Check Status Code (ACK) */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x40){
    201a:	e1 e2       	ldi	r30, 0x21	; 33
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	88 7f       	andi	r24, 0xF8	; 248
    2026:	90 70       	andi	r25, 0x00	; 0
    2028:	80 34       	cpi	r24, 0x40	; 64
    202a:	91 05       	cpc	r25, r1
    202c:	31 f0       	breq	.+12     	; 0x203a <TWI_EnuSendSlaveAddressRead+0x6c>
		USART_voidSendString("Read Address Problem");
    202e:	87 ea       	ldi	r24, 0xA7	; 167
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
		Local_EnuErrorState = TWI_SLA_R_ERROR;
    2036:	84 e0       	ldi	r24, 0x04	; 4
    2038:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_EnuErrorState;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <TWI_EnuReadDataByte>:

TWI_ERR_STATE TWI_EnuReadDataByte(u8* Copy_Pu8RecByte){
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <TWI_EnuReadDataByte+0x6>
    204c:	0f 92       	push	r0
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	9b 83       	std	Y+3, r25	; 0x03
    2054:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERR_STATE Local_EnuErrorState= TWI_OK;
    2056:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8RecByte != NULL){
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	9b 81       	ldd	r25, Y+3	; 0x03
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	21 f1       	breq	.+72     	; 0x20a8 <TWI_EnuReadDataByte+0x62>
		/* Start Job Of Reading */
		SET_BIT(TWI_u8_TWCR_REG,7);
    2060:	a6 e5       	ldi	r26, 0x56	; 86
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e6 e5       	ldi	r30, 0x56	; 86
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	80 68       	ori	r24, 0x80	; 128
    206c:	8c 93       	st	X, r24
		/* Wait for The Flag*/
		while(!GET_BIT(TWI_u8_TWCR_REG,7));
    206e:	e6 e5       	ldi	r30, 0x56	; 86
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	88 23       	and	r24, r24
    2076:	dc f7       	brge	.-10     	; 0x206e <TWI_EnuReadDataByte+0x28>
		/* Check Status Code (ACK) */
		if((TWI_u8_TWSR_REG & 0xF8) != 0x50){
    2078:	e1 e2       	ldi	r30, 0x21	; 33
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	88 7f       	andi	r24, 0xF8	; 248
    2084:	90 70       	andi	r25, 0x00	; 0
    2086:	80 35       	cpi	r24, 0x50	; 80
    2088:	91 05       	cpc	r25, r1
    208a:	39 f0       	breq	.+14     	; 0x209a <TWI_EnuReadDataByte+0x54>
			USART_voidSendString("Read Data Problem");
    208c:	8c eb       	ldi	r24, 0xBC	; 188
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
			Local_EnuErrorState = TWI_DATA_R_ERROR;
    2094:	87 e0       	ldi	r24, 0x07	; 7
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	09 c0       	rjmp	.+18     	; 0x20ac <TWI_EnuReadDataByte+0x66>
		}
		else{ /* Valid Data */
			*Copy_Pu8RecByte = TWI_u8_TWDR_REG;
    209a:	e3 e2       	ldi	r30, 0x23	; 35
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	ea 81       	ldd	r30, Y+2	; 0x02
    20a2:	fb 81       	ldd	r31, Y+3	; 0x03
    20a4:	80 83       	st	Z, r24
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <TWI_EnuReadDataByte+0x66>
		}
	}
	else{
		Local_EnuErrorState = TWI_NULL_POINTER;
    20a8:	86 e0       	ldi	r24, 0x06	; 6
    20aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_EnuErrorState;
    20ac:	89 81       	ldd	r24, Y+1	; 0x01

}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <TWI_EnuSendStopCondition>:

TWI_ERR_STATE TWI_EnuSendStopCondition(void){
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
	TWI_ERR_STATE Local_EnuErrorState= TWI_OK;
    20c4:	19 82       	std	Y+1, r1	; 0x01
	/* Send Stop Condition */
	SET_BIT(TWI_u8_TWCR_REG,4);
    20c6:	a6 e5       	ldi	r26, 0x56	; 86
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e6 e5       	ldi	r30, 0x56	; 86
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	80 61       	ori	r24, 0x10	; 16
    20d2:	8c 93       	st	X, r24
	/* Clear Flag to Start the new job */
	SET_BIT(TWI_u8_TWCR_REG,7);
    20d4:	a6 e5       	ldi	r26, 0x56	; 86
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e6 e5       	ldi	r30, 0x56	; 86
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 68       	ori	r24, 0x80	; 128
    20e0:	8c 93       	st	X, r24

	return Local_EnuErrorState;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <INA219_voidInit>:
u8 ina219_powerMultiplier_mW = 2;




void INA219_voidInit(void){
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
	TWI_voidInit(0x50);
    20f4:	80 e5       	ldi	r24, 0x50	; 80
    20f6:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <TWI_voidInit>
	//setCalibration_16V_400mA();
}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <INA219_u8Write2Bytes>:


u8   INA219_u8Write2Bytes(u16 Copy_u16Byte,u8 Copy_u8ByteAddress){
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	00 d0       	rcall	.+0      	; 0x2106 <INA219_u8Write2Bytes+0x6>
    2106:	00 d0       	rcall	.+0      	; 0x2108 <INA219_u8Write2Bytes+0x8>
    2108:	00 d0       	rcall	.+0      	; 0x210a <INA219_u8Write2Bytes+0xa>
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	9c 83       	std	Y+4, r25	; 0x04
    2110:	8b 83       	std	Y+3, r24	; 0x03
    2112:	6d 83       	std	Y+5, r22	; 0x05
	u8            Local_u8ErrorState = STD_TYPES_OK;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERR_STATE Local_EnuTWIErrorsState = TWI_OK;
    2118:	19 82       	std	Y+1, r1	; 0x01

	/* Send Start Condition  (Step 1) */
	Local_EnuTWIErrorsState = TWI_EnuSendStartCondition();
    211a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <TWI_EnuSendStartCondition>
    211e:	89 83       	std	Y+1, r24	; 0x01
	if(Local_EnuTWIErrorsState != TWI_OK){
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	88 23       	and	r24, r24
    2124:	21 f0       	breq	.+8      	; 0x212e <INA219_u8Write2Bytes+0x2e>
		Local_u8ErrorState = STD_TYPES_NOK;
    2126:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8ErrorState;
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	8e 83       	std	Y+6, r24	; 0x06
    212c:	3b c0       	rjmp	.+118    	; 0x21a4 <INA219_u8Write2Bytes+0xa4>
	}
	/* Send Slave Address + Write operation (Step 2) */
	Local_EnuTWIErrorsState = TWI_EnuSendSlaveAddressWrite(0x40);
    212e:	80 e4       	ldi	r24, 0x40	; 64
    2130:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <TWI_EnuSendSlaveAddressWrite>
    2134:	89 83       	std	Y+1, r24	; 0x01
	if(Local_EnuTWIErrorsState != TWI_OK){
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	88 23       	and	r24, r24
    213a:	21 f0       	breq	.+8      	; 0x2144 <INA219_u8Write2Bytes+0x44>
		Local_u8ErrorState = STD_TYPES_NOK;
    213c:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8ErrorState;
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	8e 83       	std	Y+6, r24	; 0x06
    2142:	30 c0       	rjmp	.+96     	; 0x21a4 <INA219_u8Write2Bytes+0xa4>
	}

	/* Send Register Address (Step 3)*/
	Local_EnuTWIErrorsState = TWI_EnuSendDataByte(Copy_u8ByteAddress);
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <TWI_EnuSendDataByte>
    214a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_EnuTWIErrorsState != TWI_OK){
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	88 23       	and	r24, r24
    2150:	21 f0       	breq	.+8      	; 0x215a <INA219_u8Write2Bytes+0x5a>
		Local_u8ErrorState = STD_TYPES_NOK;
    2152:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8ErrorState;
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	8e 83       	std	Y+6, r24	; 0x06
    2158:	25 c0       	rjmp	.+74     	; 0x21a4 <INA219_u8Write2Bytes+0xa4>
	}


	/* (Step 4) Send Data */
	Local_EnuTWIErrorsState = TWI_EnuSendDataByte((u8)(Copy_u16Byte>>8));
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	89 2f       	mov	r24, r25
    2160:	99 27       	eor	r25, r25
    2162:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <TWI_EnuSendDataByte>
    2166:	89 83       	std	Y+1, r24	; 0x01
	if(Local_EnuTWIErrorsState != TWI_OK){
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	88 23       	and	r24, r24
    216c:	21 f0       	breq	.+8      	; 0x2176 <INA219_u8Write2Bytes+0x76>
		Local_u8ErrorState = STD_TYPES_NOK;
    216e:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8ErrorState;
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	8e 83       	std	Y+6, r24	; 0x06
    2174:	17 c0       	rjmp	.+46     	; 0x21a4 <INA219_u8Write2Bytes+0xa4>
	}

	/* (Step 5) Send rest of Data */
	Local_EnuTWIErrorsState = TWI_EnuSendDataByte((u8)Copy_u16Byte);
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <TWI_EnuSendDataByte>
    217c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_EnuTWIErrorsState != TWI_OK){
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	88 23       	and	r24, r24
    2182:	21 f0       	breq	.+8      	; 0x218c <INA219_u8Write2Bytes+0x8c>
		Local_u8ErrorState = STD_TYPES_NOK;
    2184:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8ErrorState;
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	8e 83       	std	Y+6, r24	; 0x06
    218a:	0c c0       	rjmp	.+24     	; 0x21a4 <INA219_u8Write2Bytes+0xa4>
	}
	/* (Step 6) Send Stop Condition */
	Local_EnuTWIErrorsState = TWI_EnuSendStopCondition();
    218c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <TWI_EnuSendStopCondition>
    2190:	89 83       	std	Y+1, r24	; 0x01
	if(Local_EnuTWIErrorsState != TWI_OK){
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	88 23       	and	r24, r24
    2196:	21 f0       	breq	.+8      	; 0x21a0 <INA219_u8Write2Bytes+0xa0>
		Local_u8ErrorState = STD_TYPES_NOK;
    2198:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8ErrorState;
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	8e 83       	std	Y+6, r24	; 0x06
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <INA219_u8Write2Bytes+0xa4>
	}
	return Local_u8ErrorState;
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	8e 83       	std	Y+6, r24	; 0x06
    21a4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    21a6:	26 96       	adiw	r28, 0x06	; 6
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <INA219_u8Read2Bytes>:

u8   INA219_u8Read2Bytes (u16 *Copy_pu16RecByte, u8 Copy_u8ByteAddress){
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	29 97       	sbiw	r28, 0x09	; 9
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	9f 83       	std	Y+7, r25	; 0x07
    21ce:	8e 83       	std	Y+6, r24	; 0x06
    21d0:	68 87       	std	Y+8, r22	; 0x08
	u8            Local_u8ErrorState = STD_TYPES_OK;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERR_STATE Local_EnuTWIErrorsState = TWI_OK;
    21d6:	19 82       	std	Y+1, r1	; 0x01
	u16 MSB = 0;
    21d8:	1c 82       	std	Y+4, r1	; 0x04
    21da:	1b 82       	std	Y+3, r1	; 0x03
	u8 LSB = 0;
    21dc:	1d 82       	std	Y+5, r1	; 0x05

	if(Copy_pu16RecByte != NULL){
    21de:	8e 81       	ldd	r24, Y+6	; 0x06
    21e0:	9f 81       	ldd	r25, Y+7	; 0x07
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <INA219_u8Read2Bytes+0x30>
    21e6:	64 c0       	rjmp	.+200    	; 0x22b0 <INA219_u8Read2Bytes+0xf8>
		/* (step 1) Send Start Condition  */
		Local_EnuTWIErrorsState = TWI_EnuSendStartCondition();
    21e8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <TWI_EnuSendStartCondition>
    21ec:	89 83       	std	Y+1, r24	; 0x01
		if(Local_EnuTWIErrorsState != TWI_OK){
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	88 23       	and	r24, r24
    21f2:	21 f0       	breq	.+8      	; 0x21fc <INA219_u8Read2Bytes+0x44>
			Local_u8ErrorState = STD_TYPES_NOK;
    21f4:	1a 82       	std	Y+2, r1	; 0x02
			return Local_u8ErrorState;
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	89 87       	std	Y+9, r24	; 0x09
    21fa:	5d c0       	rjmp	.+186    	; 0x22b6 <INA219_u8Read2Bytes+0xfe>
		}
		/* Send Slave Address + Write operation (Step 2) */
		Local_EnuTWIErrorsState = TWI_EnuSendSlaveAddressWrite(INA219_ADDRESS);
    21fc:	80 e4       	ldi	r24, 0x40	; 64
    21fe:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <TWI_EnuSendSlaveAddressWrite>
    2202:	89 83       	std	Y+1, r24	; 0x01
		if(Local_EnuTWIErrorsState != TWI_OK){
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	88 23       	and	r24, r24
    2208:	21 f0       	breq	.+8      	; 0x2212 <INA219_u8Read2Bytes+0x5a>
			Local_u8ErrorState = STD_TYPES_NOK;
    220a:	1a 82       	std	Y+2, r1	; 0x02
			return Local_u8ErrorState;
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	89 87       	std	Y+9, r24	; 0x09
    2210:	52 c0       	rjmp	.+164    	; 0x22b6 <INA219_u8Read2Bytes+0xfe>
		}
		/* Send The rest of Byte Address (step 3)*/
		Local_EnuTWIErrorsState = TWI_EnuSendDataByte(Copy_u8ByteAddress);
    2212:	88 85       	ldd	r24, Y+8	; 0x08
    2214:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <TWI_EnuSendDataByte>
    2218:	89 83       	std	Y+1, r24	; 0x01
		if(Local_EnuTWIErrorsState != TWI_OK){
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	88 23       	and	r24, r24
    221e:	21 f0       	breq	.+8      	; 0x2228 <INA219_u8Read2Bytes+0x70>
			Local_u8ErrorState = STD_TYPES_NOK;
    2220:	1a 82       	std	Y+2, r1	; 0x02
			return Local_u8ErrorState;
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	89 87       	std	Y+9, r24	; 0x09
    2226:	47 c0       	rjmp	.+142    	; 0x22b6 <INA219_u8Read2Bytes+0xfe>
		}
		/* (Step 4) Repeated Start Condition */
		Local_EnuTWIErrorsState = TWI_EnuSendRepStartCondition();
    2228:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <TWI_EnuSendRepStartCondition>
    222c:	89 83       	std	Y+1, r24	; 0x01
		if(Local_EnuTWIErrorsState != TWI_OK){
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	88 23       	and	r24, r24
    2232:	21 f0       	breq	.+8      	; 0x223c <INA219_u8Read2Bytes+0x84>
			Local_u8ErrorState = STD_TYPES_NOK;
    2234:	1a 82       	std	Y+2, r1	; 0x02
			return Local_u8ErrorState;
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	89 87       	std	Y+9, r24	; 0x09
    223a:	3d c0       	rjmp	.+122    	; 0x22b6 <INA219_u8Read2Bytes+0xfe>
		}
		/* Step 5 => Send Slave Address + Read Operation */
		Local_EnuTWIErrorsState = TWI_EnuSendSlaveAddressRead(INA219_ADDRESS);
    223c:	80 e4       	ldi	r24, 0x40	; 64
    223e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <TWI_EnuSendSlaveAddressRead>
    2242:	89 83       	std	Y+1, r24	; 0x01
		if(Local_EnuTWIErrorsState != TWI_OK){
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	88 23       	and	r24, r24
    2248:	21 f0       	breq	.+8      	; 0x2252 <INA219_u8Read2Bytes+0x9a>
			Local_u8ErrorState = STD_TYPES_NOK;
    224a:	1a 82       	std	Y+2, r1	; 0x02
			return Local_u8ErrorState;
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	89 87       	std	Y+9, r24	; 0x09
    2250:	32 c0       	rjmp	.+100    	; 0x22b6 <INA219_u8Read2Bytes+0xfe>
		}
		/* Step 6 => Read Data */
		Local_EnuTWIErrorsState = TWI_EnuReadDataByte(&MSB);
    2252:	ce 01       	movw	r24, r28
    2254:	03 96       	adiw	r24, 0x03	; 3
    2256:	0e 94 23 10 	call	0x2046	; 0x2046 <TWI_EnuReadDataByte>
    225a:	89 83       	std	Y+1, r24	; 0x01
		if(Local_EnuTWIErrorsState != TWI_OK){
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	88 23       	and	r24, r24
    2260:	21 f0       	breq	.+8      	; 0x226a <INA219_u8Read2Bytes+0xb2>
			Local_u8ErrorState = STD_TYPES_NOK;
    2262:	1a 82       	std	Y+2, r1	; 0x02
			return Local_u8ErrorState;
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	89 87       	std	Y+9, r24	; 0x09
    2268:	26 c0       	rjmp	.+76     	; 0x22b6 <INA219_u8Read2Bytes+0xfe>
		}
		/* Step 7 => Read rest of Data */
		Local_EnuTWIErrorsState = TWI_EnuReadDataByte(&LSB);
    226a:	ce 01       	movw	r24, r28
    226c:	05 96       	adiw	r24, 0x05	; 5
    226e:	0e 94 23 10 	call	0x2046	; 0x2046 <TWI_EnuReadDataByte>
    2272:	89 83       	std	Y+1, r24	; 0x01
		*Copy_pu16RecByte = ( (u16)MSB<<8 | LSB );
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	9c 81       	ldd	r25, Y+4	; 0x04
    2278:	38 2f       	mov	r19, r24
    227a:	22 27       	eor	r18, r18
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	82 2b       	or	r24, r18
    2284:	93 2b       	or	r25, r19
    2286:	ee 81       	ldd	r30, Y+6	; 0x06
    2288:	ff 81       	ldd	r31, Y+7	; 0x07
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
		if(Local_EnuTWIErrorsState != TWI_OK){
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	88 23       	and	r24, r24
    2292:	21 f0       	breq	.+8      	; 0x229c <INA219_u8Read2Bytes+0xe4>
			Local_u8ErrorState = STD_TYPES_NOK;
    2294:	1a 82       	std	Y+2, r1	; 0x02
			return Local_u8ErrorState;
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	89 87       	std	Y+9, r24	; 0x09
    229a:	0d c0       	rjmp	.+26     	; 0x22b6 <INA219_u8Read2Bytes+0xfe>
		}
		/* (Step 8) Send Stop Condition */
		Local_EnuTWIErrorsState = TWI_EnuSendStopCondition();
    229c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <TWI_EnuSendStopCondition>
    22a0:	89 83       	std	Y+1, r24	; 0x01
		if(Local_EnuTWIErrorsState != TWI_OK){
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	88 23       	and	r24, r24
    22a6:	29 f0       	breq	.+10     	; 0x22b2 <INA219_u8Read2Bytes+0xfa>
			Local_u8ErrorState = STD_TYPES_NOK;
    22a8:	1a 82       	std	Y+2, r1	; 0x02
			return Local_u8ErrorState;
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	89 87       	std	Y+9, r24	; 0x09
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <INA219_u8Read2Bytes+0xfe>
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    22b0:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	89 87       	std	Y+9, r24	; 0x09
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
}
    22b8:	29 96       	adiw	r28, 0x09	; 9
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <setCalibration_16V_400mA>:

u8 setCalibration_16V_400mA(void){
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <setCalibration_16V_400mA+0x6>
    22d0:	0f 92       	push	r0
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = STD_TYPES_OK;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	8b 83       	std	Y+3, r24	; 0x03

	INA219_u8Write2Bytes(ina219_calibrationValue,INA219_REG_CALIBRATION);
    22da:	80 91 07 02 	lds	r24, 0x0207
    22de:	90 91 08 02 	lds	r25, 0x0208
    22e2:	65 e0       	ldi	r22, 0x05	; 5
    22e4:	0e 94 80 10 	call	0x2100	; 0x2100 <INA219_u8Write2Bytes>

	u16 config = (INA219_CONFIG_BVOLTAGERANGE_16V |
			INA219_CONFIG_GAIN_1_40MV |
			INA219_CONFIG_BADCRES_12BIT |
			INA219_CONFIG_SADCRES_12BIT_1S_532US |
			INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS);
    22e8:	8f e9       	ldi	r24, 0x9F	; 159
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01

	INA219_u8Write2Bytes(config,INA219_REG_CONFIG);
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	0e 94 80 10 	call	0x2100	; 0x2100 <INA219_u8Write2Bytes>


	return Local_u8ErrorState;
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <INA219_GetBusVoltage_V>:



f64 INA219_GetBusVoltage_V(void){
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <INA219_GetBusVoltage_V+0x6>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <INA219_GetBusVoltage_V+0x8>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <INA219_GetBusVoltage_V+0xa>
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
	u16 value = 0;
    2316:	1e 82       	std	Y+6, r1	; 0x06
    2318:	1d 82       	std	Y+5, r1	; 0x05

	INA219_u8Read2Bytes(&value,INA219_REG_BUSVOLTAGE);
    231a:	ce 01       	movw	r24, r28
    231c:	05 96       	adiw	r24, 0x05	; 5
    231e:	62 e0       	ldi	r22, 0x02	; 2
    2320:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <INA219_u8Read2Bytes>

	f64  ActualValue = ((value >> 3) * 4) * 0.001;
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	96 95       	lsr	r25
    232a:	87 95       	ror	r24
    232c:	96 95       	lsr	r25
    232e:	87 95       	ror	r24
    2330:	96 95       	lsr	r25
    2332:	87 95       	ror	r24
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	cc 01       	movw	r24, r24
    233e:	a0 e0       	ldi	r26, 0x00	; 0
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	2f e6       	ldi	r18, 0x6F	; 111
    2354:	32 e1       	ldi	r19, 0x12	; 18
    2356:	43 e8       	ldi	r20, 0x83	; 131
    2358:	5a e3       	ldi	r21, 0x3A	; 58
    235a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	ab 83       	std	Y+3, r26	; 0x03
    2368:	bc 83       	std	Y+4, r27	; 0x04

	return ActualValue;
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	ab 81       	ldd	r26, Y+3	; 0x03
    2370:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	26 96       	adiw	r28, 0x06	; 6
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <INA219_GetShuntVoltage_mV>:


f64 INA219_GetShuntVoltage_mV(void){
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <INA219_GetShuntVoltage_mV+0x6>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <INA219_GetShuntVoltage_mV+0x8>
    2390:	00 d0       	rcall	.+0      	; 0x2392 <INA219_GetShuntVoltage_mV+0xa>
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
	u16 value = 0;
    2396:	1e 82       	std	Y+6, r1	; 0x06
    2398:	1d 82       	std	Y+5, r1	; 0x05

	INA219_u8Read2Bytes(&value,INA219_REG_SHUNTVOLTAGE);
    239a:	ce 01       	movw	r24, r28
    239c:	05 96       	adiw	r24, 0x05	; 5
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <INA219_u8Read2Bytes>

	f64  ActualValue = value * 0.01;
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	cc 01       	movw	r24, r24
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	2a e0       	ldi	r18, 0x0A	; 10
    23c0:	37 ed       	ldi	r19, 0xD7	; 215
    23c2:	43 e2       	ldi	r20, 0x23	; 35
    23c4:	5c e3       	ldi	r21, 0x3C	; 60
    23c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	ab 83       	std	Y+3, r26	; 0x03
    23d4:	bc 83       	std	Y+4, r27	; 0x04

	return ActualValue;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	ab 81       	ldd	r26, Y+3	; 0x03
    23dc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	26 96       	adiw	r28, 0x06	; 6
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <INA219_GetLoadVoltage_mV>:


f64 INA219_GetLoadVoltage_mV(void){
    23f4:	ef 92       	push	r14
    23f6:	ff 92       	push	r15
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	28 97       	sbiw	r28, 0x08	; 8
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
	u16 BusValue = 0;
    2410:	1e 82       	std	Y+6, r1	; 0x06
    2412:	1d 82       	std	Y+5, r1	; 0x05
	u16 ShuntValue = 0;
    2414:	18 86       	std	Y+8, r1	; 0x08
    2416:	1f 82       	std	Y+7, r1	; 0x07
	INA219_u8Read2Bytes(&BusValue,INA219_REG_BUSVOLTAGE);
    2418:	ce 01       	movw	r24, r28
    241a:	05 96       	adiw	r24, 0x05	; 5
    241c:	62 e0       	ldi	r22, 0x02	; 2
    241e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <INA219_u8Read2Bytes>
	INA219_u8Read2Bytes(&ShuntValue,INA219_REG_SHUNTVOLTAGE);
    2422:	ce 01       	movw	r24, r28
    2424:	07 96       	adiw	r24, 0x07	; 7
    2426:	61 e0       	ldi	r22, 0x01	; 1
    2428:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <INA219_u8Read2Bytes>

	f64  ActualValue = ((BusValue >> 3) * 4) + (ShuntValue * 0.01) ;
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	96 95       	lsr	r25
    2432:	87 95       	ror	r24
    2434:	96 95       	lsr	r25
    2436:	87 95       	ror	r24
    2438:	96 95       	lsr	r25
    243a:	87 95       	ror	r24
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	cc 01       	movw	r24, r24
    2446:	a0 e0       	ldi	r26, 0x00	; 0
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    2452:	7b 01       	movw	r14, r22
    2454:	8c 01       	movw	r16, r24
    2456:	8f 81       	ldd	r24, Y+7	; 0x07
    2458:	98 85       	ldd	r25, Y+8	; 0x08
    245a:	cc 01       	movw	r24, r24
    245c:	a0 e0       	ldi	r26, 0x00	; 0
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	2a e0       	ldi	r18, 0x0A	; 10
    2472:	37 ed       	ldi	r19, 0xD7	; 215
    2474:	43 e2       	ldi	r20, 0x23	; 35
    2476:	5c e3       	ldi	r21, 0x3C	; 60
    2478:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9c 01       	movw	r18, r24
    2482:	ad 01       	movw	r20, r26
    2484:	c8 01       	movw	r24, r16
    2486:	b7 01       	movw	r22, r14
    2488:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	ab 83       	std	Y+3, r26	; 0x03
    2496:	bc 83       	std	Y+4, r27	; 0x04

	return ActualValue;
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	ab 81       	ldd	r26, Y+3	; 0x03
    249e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	28 96       	adiw	r28, 0x08	; 8
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	08 95       	ret

000024be <INA219_GetLoadVoltage_V>:


f64 INA219_GetLoadVoltage_V(void){
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	28 97       	sbiw	r28, 0x08	; 8
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
	u16 BusValue = 0;
    24da:	1e 82       	std	Y+6, r1	; 0x06
    24dc:	1d 82       	std	Y+5, r1	; 0x05
	u16 ShuntValue = 0;
    24de:	18 86       	std	Y+8, r1	; 0x08
    24e0:	1f 82       	std	Y+7, r1	; 0x07
	INA219_u8Read2Bytes(&BusValue,INA219_REG_BUSVOLTAGE);
    24e2:	ce 01       	movw	r24, r28
    24e4:	05 96       	adiw	r24, 0x05	; 5
    24e6:	62 e0       	ldi	r22, 0x02	; 2
    24e8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <INA219_u8Read2Bytes>
	INA219_u8Read2Bytes(&ShuntValue,INA219_REG_SHUNTVOLTAGE);
    24ec:	ce 01       	movw	r24, r28
    24ee:	07 96       	adiw	r24, 0x07	; 7
    24f0:	61 e0       	ldi	r22, 0x01	; 1
    24f2:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <INA219_u8Read2Bytes>

	f64  ActualValue = (((BusValue >> 3) * 4) + (ShuntValue * 0.01))/1000 ;
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	96 95       	lsr	r25
    24fc:	87 95       	ror	r24
    24fe:	96 95       	lsr	r25
    2500:	87 95       	ror	r24
    2502:	96 95       	lsr	r25
    2504:	87 95       	ror	r24
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	cc 01       	movw	r24, r24
    2510:	a0 e0       	ldi	r26, 0x00	; 0
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    251c:	7b 01       	movw	r14, r22
    251e:	8c 01       	movw	r16, r24
    2520:	8f 81       	ldd	r24, Y+7	; 0x07
    2522:	98 85       	ldd	r25, Y+8	; 0x08
    2524:	cc 01       	movw	r24, r24
    2526:	a0 e0       	ldi	r26, 0x00	; 0
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	bc 01       	movw	r22, r24
    2538:	cd 01       	movw	r24, r26
    253a:	2a e0       	ldi	r18, 0x0A	; 10
    253c:	37 ed       	ldi	r19, 0xD7	; 215
    253e:	43 e2       	ldi	r20, 0x23	; 35
    2540:	5c e3       	ldi	r21, 0x3C	; 60
    2542:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9c 01       	movw	r18, r24
    254c:	ad 01       	movw	r20, r26
    254e:	c8 01       	movw	r24, r16
    2550:	b7 01       	movw	r22, r14
    2552:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	bc 01       	movw	r22, r24
    255c:	cd 01       	movw	r24, r26
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4a e7       	ldi	r20, 0x7A	; 122
    2564:	54 e4       	ldi	r21, 0x44	; 68
    2566:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	ab 83       	std	Y+3, r26	; 0x03
    2574:	bc 83       	std	Y+4, r27	; 0x04

	return ActualValue;
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	ab 81       	ldd	r26, Y+3	; 0x03
    257c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	28 96       	adiw	r28, 0x08	; 8
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	08 95       	ret

0000259c <INA219_GetCurrent_mA>:


f64 INA219_GetCurrent_mA(void) {
    259c:	ef 92       	push	r14
    259e:	ff 92       	push	r15
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <INA219_GetCurrent_mA+0xe>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <INA219_GetCurrent_mA+0x10>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <INA219_GetCurrent_mA+0x12>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
	u16 value = 0;
    25b2:	1e 82       	std	Y+6, r1	; 0x06
    25b4:	1d 82       	std	Y+5, r1	; 0x05


	/* Sometimes a sharp load will reset the INA219, which will
	reset the cal register, meaning CURRENT and POWER will not be available avoid this by always setting a cal value */

	INA219_u8Write2Bytes(ina219_calibrationValue,INA219_REG_CALIBRATION);
    25b6:	80 91 07 02 	lds	r24, 0x0207
    25ba:	90 91 08 02 	lds	r25, 0x0208
    25be:	65 e0       	ldi	r22, 0x05	; 5
    25c0:	0e 94 80 10 	call	0x2100	; 0x2100 <INA219_u8Write2Bytes>

	INA219_u8Read2Bytes(&value,INA219_REG_CURRENT);
    25c4:	ce 01       	movw	r24, r28
    25c6:	05 96       	adiw	r24, 0x05	; 5
    25c8:	64 e0       	ldi	r22, 0x04	; 4
    25ca:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <INA219_u8Read2Bytes>

	f64  ActualValue = (f64)value / ina219_currentDivider_mA;
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	cc 01       	movw	r24, r24
    25d4:	a0 e0       	ldi	r26, 0x00	; 0
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	bc 01       	movw	r22, r24
    25da:	cd 01       	movw	r24, r26
    25dc:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    25e0:	7b 01       	movw	r14, r22
    25e2:	8c 01       	movw	r16, r24
    25e4:	80 91 09 02 	lds	r24, 0x0209
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	aa 27       	eor	r26, r26
    25ee:	97 fd       	sbrc	r25, 7
    25f0:	a0 95       	com	r26
    25f2:	ba 2f       	mov	r27, r26
    25f4:	bc 01       	movw	r22, r24
    25f6:	cd 01       	movw	r24, r26
    25f8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    25fc:	9b 01       	movw	r18, r22
    25fe:	ac 01       	movw	r20, r24
    2600:	c8 01       	movw	r24, r16
    2602:	b7 01       	movw	r22, r14
    2604:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	ab 83       	std	Y+3, r26	; 0x03
    2612:	bc 83       	std	Y+4, r27	; 0x04

	return ActualValue;
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	ab 81       	ldd	r26, Y+3	; 0x03
    261a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	26 96       	adiw	r28, 0x06	; 6
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	08 95       	ret

0000263a <INA219_GetLoadPower_mW>:

f64 INA219_GetLoadPower_mW(void){
    263a:	ef 92       	push	r14
    263c:	ff 92       	push	r15
    263e:	0f 93       	push	r16
    2640:	1f 93       	push	r17
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	00 d0       	rcall	.+0      	; 0x2648 <INA219_GetLoadPower_mW+0xe>
    2648:	00 d0       	rcall	.+0      	; 0x264a <INA219_GetLoadPower_mW+0x10>
    264a:	00 d0       	rcall	.+0      	; 0x264c <INA219_GetLoadPower_mW+0x12>
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
	u16 value = 0;
    2650:	1e 82       	std	Y+6, r1	; 0x06
    2652:	1d 82       	std	Y+5, r1	; 0x05

	/* Sometimes a sharp load will reset the INA219, which will
	reset the cal register, meaning CURRENT and POWER will not be available avoid this by always setting a cal value */

	INA219_u8Write2Bytes(ina219_calibrationValue,INA219_REG_CALIBRATION);
    2654:	80 91 07 02 	lds	r24, 0x0207
    2658:	90 91 08 02 	lds	r25, 0x0208
    265c:	65 e0       	ldi	r22, 0x05	; 5
    265e:	0e 94 80 10 	call	0x2100	; 0x2100 <INA219_u8Write2Bytes>

	INA219_u8Read2Bytes(&value,INA219_REG_POWER);
    2662:	ce 01       	movw	r24, r28
    2664:	05 96       	adiw	r24, 0x05	; 5
    2666:	63 e0       	ldi	r22, 0x03	; 3
    2668:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <INA219_u8Read2Bytes>

	f64  ActualValue = (f64)value * ina219_powerMultiplier_mW;
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	cc 01       	movw	r24, r24
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    267e:	7b 01       	movw	r14, r22
    2680:	8c 01       	movw	r16, r24
    2682:	80 91 0a 02 	lds	r24, 0x020A
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	aa 27       	eor	r26, r26
    268c:	97 fd       	sbrc	r25, 7
    268e:	a0 95       	com	r26
    2690:	ba 2f       	mov	r27, r26
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    269a:	9b 01       	movw	r18, r22
    269c:	ac 01       	movw	r20, r24
    269e:	c8 01       	movw	r24, r16
    26a0:	b7 01       	movw	r22, r14
    26a2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	ab 83       	std	Y+3, r26	; 0x03
    26b0:	bc 83       	std	Y+4, r27	; 0x04

	return ActualValue;
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	9a 81       	ldd	r25, Y+2	; 0x02
    26b6:	ab 81       	ldd	r26, Y+3	; 0x03
    26b8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	26 96       	adiw	r28, 0x06	; 6
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	1f 91       	pop	r17
    26d0:	0f 91       	pop	r16
    26d2:	ff 90       	pop	r15
    26d4:	ef 90       	pop	r14
    26d6:	08 95       	ret

000026d8 <USART_voidInit>:
#include "USART_interface.h"
#include "USART_private.h"
#include "USART_config.h"


void USART_voidInit(void){
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	00 d0       	rcall	.+0      	; 0x26de <USART_voidInit+0x6>
    26de:	0f 92       	push	r0
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRCValue = 0x80;
    26e4:	80 e8       	ldi	r24, 0x80	; 128
    26e6:	8b 83       	std	Y+3, r24	; 0x03

	/* No Double Speed */
	CLR_BIT(USART_u8_UCSRA_REG,1);
    26e8:	ab e2       	ldi	r26, 0x2B	; 43
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	eb e2       	ldi	r30, 0x2B	; 43
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	8d 7f       	andi	r24, 0xFD	; 253
    26f4:	8c 93       	st	X, r24
	/* Enable RX Circuit */
	SET_BIT(USART_u8_UCSRB_REG,4);
    26f6:	aa e2       	ldi	r26, 0x2A	; 42
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	ea e2       	ldi	r30, 0x2A	; 42
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	80 61       	ori	r24, 0x10	; 16
    2702:	8c 93       	st	X, r24
	/* Enable TX Circuit */
	SET_BIT(USART_u8_UCSRB_REG,3);
    2704:	aa e2       	ldi	r26, 0x2A	; 42
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	ea e2       	ldi	r30, 0x2A	; 42
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	88 60       	ori	r24, 0x08	; 8
    2710:	8c 93       	st	X, r24
	/* Select 8 Bits Data */
	CLR_BIT(USART_u8_UCSRB_REG,2);
    2712:	aa e2       	ldi	r26, 0x2A	; 42
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	ea e2       	ldi	r30, 0x2A	; 42
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	8b 7f       	andi	r24, 0xFB	; 251
    271e:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue,2);
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	84 60       	ori	r24, 0x04	; 4
    2724:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue,1);
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	82 60       	ori	r24, 0x02	; 2
    272a:	8b 83       	std	Y+3, r24	; 0x03

	/* Asynchronous Mode */
	CLR_BIT(Local_u8UCSRCValue,6);
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	8f 7b       	andi	r24, 0xBF	; 191
    2730:	8b 83       	std	Y+3, r24	; 0x03

	/* No Parity Mode */
	CLR_BIT(Local_u8UCSRCValue,5);
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	8f 7d       	andi	r24, 0xDF	; 223
    2736:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRCValue,4);
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	8f 7e       	andi	r24, 0xEF	; 239
    273c:	8b 83       	std	Y+3, r24	; 0x03

    /* Stop Bits = 2 */
	SET_BIT(Local_u8UCSRCValue,3);
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	88 60       	ori	r24, 0x08	; 8
    2742:	8b 83       	std	Y+3, r24	; 0x03

	/* Update USCRC REG with The Value of Variable */
	USART_u8_UCSRC_REG = Local_u8UCSRCValue;
    2744:	e0 e4       	ldi	r30, 0x40	; 64
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	80 83       	st	Z, r24

	/* Baud Rate = 9600 */
	u16 Local_u8UBRRValue = 51;
    274c:	83 e3       	ldi	r24, 0x33	; 51
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	89 83       	std	Y+1, r24	; 0x01

	USART_u8_UBRRL_REG = (u8)Local_u8UBRRValue ;
    2754:	e9 e2       	ldi	r30, 0x29	; 41
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	80 83       	st	Z, r24
	USART_u8_UBRRH_REG = (u8)(Local_u8UBRRValue>>8) ;
    275c:	e0 e4       	ldi	r30, 0x40	; 64
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	9a 81       	ldd	r25, Y+2	; 0x02
    2764:	89 2f       	mov	r24, r25
    2766:	99 27       	eor	r25, r25
    2768:	80 83       	st	Z, r24
}
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <USART_voidSendByte>:

void USART_voidSendByte(u8 Copy_u8TxByte){
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	0f 92       	push	r0
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	89 83       	std	Y+1, r24	; 0x01
    /* Wait For Tx Register to Be Empty */
	while(!GET_BIT(USART_u8_UCSRA_REG,5));
    2782:	eb e2       	ldi	r30, 0x2B	; 43
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	82 95       	swap	r24
    278a:	86 95       	lsr	r24
    278c:	87 70       	andi	r24, 0x07	; 7
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	81 70       	andi	r24, 0x01	; 1
    2794:	90 70       	andi	r25, 0x00	; 0
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	a1 f3       	breq	.-24     	; 0x2782 <USART_voidSendByte+0xc>
	/* Send Byte */
	USART_u8_UDR_REG = Copy_u8TxByte ;
    279a:	ec e2       	ldi	r30, 0x2C	; 44
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	80 83       	st	Z, r24
}
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <USART_u8ReceiveByte>:

u8 USART_u8ReceiveByte(void){
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
while (!GET_BIT(USART_u8_UCSRA_REG,7));
    27b2:	eb e2       	ldi	r30, 0x2B	; 43
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	88 23       	and	r24, r24
    27ba:	dc f7       	brge	.-10     	; 0x27b2 <USART_u8ReceiveByte+0x8>
/* Read Data */
return USART_u8_UDR_REG;
    27bc:	ec e2       	ldi	r30, 0x2C	; 44
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
}
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <USART_voidSendString>:

void USART_voidSendString(u8 *Copy_pu8String)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <USART_voidSendString+0x6>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	9a 83       	std	Y+2, r25	; 0x02
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	0a c0       	rjmp	.+20     	; 0x27ec <USART_voidSendString+0x24>
	while(*Copy_pu8String != '\0')
	{
		USART_voidSendByte(*Copy_pu8String);
    27d8:	e9 81       	ldd	r30, Y+1	; 0x01
    27da:	fa 81       	ldd	r31, Y+2	; 0x02
    27dc:	80 81       	ld	r24, Z
    27de:	0e 94 bb 13 	call	0x2776	; 0x2776 <USART_voidSendByte>
		Copy_pu8String++;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
return USART_u8_UDR_REG;
}

void USART_voidSendString(u8 *Copy_pu8String)
{
	while(*Copy_pu8String != '\0')
    27ec:	e9 81       	ldd	r30, Y+1	; 0x01
    27ee:	fa 81       	ldd	r31, Y+2	; 0x02
    27f0:	80 81       	ld	r24, Z
    27f2:	88 23       	and	r24, r24
    27f4:	89 f7       	brne	.-30     	; 0x27d8 <USART_voidSendString+0x10>
	{
		USART_voidSendByte(*Copy_pu8String);
		Copy_pu8String++;
	}
}
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <USART_voidReceiveString>:

void USART_voidReceiveString(u8 *Copy_pu8String)
{
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	00 d0       	rcall	.+0      	; 0x280a <USART_voidReceiveString+0xa>
    280a:	0f 92       	push	r0
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	9b 83       	std	Y+3, r25	; 0x03
    2812:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2814:	19 82       	std	Y+1, r1	; 0x01
	Copy_pu8String[i] = USART_u8ReceiveByte();
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	9b 81       	ldd	r25, Y+3	; 0x03
    2820:	8c 01       	movw	r16, r24
    2822:	02 0f       	add	r16, r18
    2824:	13 1f       	adc	r17, r19
    2826:	0e 94 d5 13 	call	0x27aa	; 0x27aa <USART_u8ReceiveByte>
    282a:	f8 01       	movw	r30, r16
    282c:	80 83       	st	Z, r24
    282e:	0f c0       	rjmp	.+30     	; 0x284e <USART_voidReceiveString+0x4e>
	while(Copy_pu8String[i] != '.')
	{
		i++;
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	89 83       	std	Y+1, r24	; 0x01
		Copy_pu8String[i] = USART_u8ReceiveByte();
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	9b 81       	ldd	r25, Y+3	; 0x03
    2840:	8c 01       	movw	r16, r24
    2842:	02 0f       	add	r16, r18
    2844:	13 1f       	adc	r17, r19
    2846:	0e 94 d5 13 	call	0x27aa	; 0x27aa <USART_u8ReceiveByte>
    284a:	f8 01       	movw	r30, r16
    284c:	80 83       	st	Z, r24

void USART_voidReceiveString(u8 *Copy_pu8String)
{
	u8 i = 0;
	Copy_pu8String[i] = USART_u8ReceiveByte();
	while(Copy_pu8String[i] != '.')
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	9b 81       	ldd	r25, Y+3	; 0x03
    2858:	fc 01       	movw	r30, r24
    285a:	e2 0f       	add	r30, r18
    285c:	f3 1f       	adc	r31, r19
    285e:	80 81       	ld	r24, Z
    2860:	8e 32       	cpi	r24, 0x2E	; 46
    2862:	31 f7       	brne	.-52     	; 0x2830 <USART_voidReceiveString+0x30>
	{
		i++;
		Copy_pu8String[i] = USART_u8ReceiveByte();
	}
	Copy_pu8String[i] = '\0';
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	28 2f       	mov	r18, r24
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	9b 81       	ldd	r25, Y+3	; 0x03
    286e:	fc 01       	movw	r30, r24
    2870:	e2 0f       	add	r30, r18
    2872:	f3 1f       	adc	r31, r19
    2874:	10 82       	st	Z, r1
}
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	08 95       	ret

00002886 <main>:
#include "DIO_interface.h"
#include "INA219_interface.h"
#include "USART_interface.h"


int main(void){
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	c7 55       	subi	r28, 0x57	; 87
    2894:	d0 40       	sbci	r29, 0x00	; 0
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    28a0:	0e 94 35 09 	call	0x126a	; 0x126a <DIO_voidInit>
	USART_voidInit();
    28a4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <USART_voidInit>
	INA219_voidInit();
    28a8:	0e 94 76 10 	call	0x20ec	; 0x20ec <INA219_voidInit>

	f64 num = 0;
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e0       	ldi	r26, 0x00	; 0
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	8f 87       	std	Y+15, r24	; 0x0f
    28b6:	98 8b       	std	Y+16, r25	; 0x10
    28b8:	a9 8b       	std	Y+17, r26	; 0x11
    28ba:	ba 8b       	std	Y+18, r27	; 0x12
	u8 Label[32] = "INA219 Readings\r";
    28bc:	ce 01       	movw	r24, r28
    28be:	43 96       	adiw	r24, 0x13	; 19
    28c0:	65 96       	adiw	r28, 0x15	; 21
    28c2:	9f af       	std	Y+63, r25	; 0x3f
    28c4:	8e af       	std	Y+62, r24	; 0x3e
    28c6:	65 97       	sbiw	r28, 0x15	; 21
    28c8:	af ed       	ldi	r26, 0xDF	; 223
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	67 96       	adiw	r28, 0x17	; 23
    28ce:	bf af       	std	Y+63, r27	; 0x3f
    28d0:	ae af       	std	Y+62, r26	; 0x3e
    28d2:	67 97       	sbiw	r28, 0x17	; 23
    28d4:	b1 e1       	ldi	r27, 0x11	; 17
    28d6:	68 96       	adiw	r28, 0x18	; 24
    28d8:	bf af       	std	Y+63, r27	; 0x3f
    28da:	68 97       	sbiw	r28, 0x18	; 24
    28dc:	67 96       	adiw	r28, 0x17	; 23
    28de:	ee ad       	ldd	r30, Y+62	; 0x3e
    28e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    28e2:	67 97       	sbiw	r28, 0x17	; 23
    28e4:	00 80       	ld	r0, Z
    28e6:	67 96       	adiw	r28, 0x17	; 23
    28e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    28ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ec:	67 97       	sbiw	r28, 0x17	; 23
    28ee:	01 96       	adiw	r24, 0x01	; 1
    28f0:	67 96       	adiw	r28, 0x17	; 23
    28f2:	9f af       	std	Y+63, r25	; 0x3f
    28f4:	8e af       	std	Y+62, r24	; 0x3e
    28f6:	67 97       	sbiw	r28, 0x17	; 23
    28f8:	65 96       	adiw	r28, 0x15	; 21
    28fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    28fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    28fe:	65 97       	sbiw	r28, 0x15	; 21
    2900:	0c 92       	st	X, r0
    2902:	65 96       	adiw	r28, 0x15	; 21
    2904:	ee ad       	ldd	r30, Y+62	; 0x3e
    2906:	ff ad       	ldd	r31, Y+63	; 0x3f
    2908:	65 97       	sbiw	r28, 0x15	; 21
    290a:	31 96       	adiw	r30, 0x01	; 1
    290c:	65 96       	adiw	r28, 0x15	; 21
    290e:	ff af       	std	Y+63, r31	; 0x3f
    2910:	ee af       	std	Y+62, r30	; 0x3e
    2912:	65 97       	sbiw	r28, 0x15	; 21
    2914:	68 96       	adiw	r28, 0x18	; 24
    2916:	ff ad       	ldd	r31, Y+63	; 0x3f
    2918:	68 97       	sbiw	r28, 0x18	; 24
    291a:	f1 50       	subi	r31, 0x01	; 1
    291c:	68 96       	adiw	r28, 0x18	; 24
    291e:	ff af       	std	Y+63, r31	; 0x3f
    2920:	68 97       	sbiw	r28, 0x18	; 24
    2922:	68 96       	adiw	r28, 0x18	; 24
    2924:	8f ad       	ldd	r24, Y+63	; 0x3f
    2926:	68 97       	sbiw	r28, 0x18	; 24
    2928:	88 23       	and	r24, r24
    292a:	c1 f6       	brne	.-80     	; 0x28dc <main+0x56>
    292c:	8f e0       	ldi	r24, 0x0F	; 15
    292e:	fe 01       	movw	r30, r28
    2930:	b4 96       	adiw	r30, 0x24	; 36
    2932:	df 01       	movw	r26, r30
    2934:	98 2f       	mov	r25, r24
    2936:	1d 92       	st	X+, r1
    2938:	9a 95       	dec	r25
    293a:	e9 f7       	brne	.-6      	; 0x2936 <main+0xb0>
	USART_voidSendString(Label);
    293c:	ce 01       	movw	r24, r28
    293e:	43 96       	adiw	r24, 0x13	; 19
    2940:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
		USART_voidSendString(Label);
		num = (INA219_GetLoadVoltage_mV());
		dtostrf(num,-6,6,ValueStr);
		USART_voidSendString(ValueStr);*/

		strcpy(Label,"\rCurrent (mA) = ");
    2944:	ce 01       	movw	r24, r28
    2946:	43 96       	adiw	r24, 0x13	; 19
    2948:	2e ec       	ldi	r18, 0xCE	; 206
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	b9 01       	movw	r22, r18
    294e:	41 e1       	ldi	r20, 0x11	; 17
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	0e 94 93 15 	call	0x2b26	; 0x2b26 <memcpy>
		USART_voidSendString(Label);
    2956:	ce 01       	movw	r24, r28
    2958:	43 96       	adiw	r24, 0x13	; 19
    295a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
		num = (INA219_GetCurrent_mA());
    295e:	0e 94 ce 12 	call	0x259c	; 0x259c <INA219_GetCurrent_mA>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8f 87       	std	Y+15, r24	; 0x0f
    2968:	98 8b       	std	Y+16, r25	; 0x10
    296a:	a9 8b       	std	Y+17, r26	; 0x11
    296c:	ba 8b       	std	Y+18, r27	; 0x12
		dtostrf(num,-6,6,ValueStr);
    296e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2970:	98 89       	ldd	r25, Y+16	; 0x10
    2972:	a9 89       	ldd	r26, Y+17	; 0x11
    2974:	ba 89       	ldd	r27, Y+18	; 0x12
    2976:	fe 01       	movw	r30, r28
    2978:	f3 96       	adiw	r30, 0x33	; 51
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	4a ef       	ldi	r20, 0xFA	; 250
    2980:	26 e0       	ldi	r18, 0x06	; 6
    2982:	8f 01       	movw	r16, r30
    2984:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <dtostrf>
		USART_voidSendString(ValueStr);
    2988:	ce 01       	movw	r24, r28
    298a:	c3 96       	adiw	r24, 0x33	; 51
    298c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_voidSendString>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	aa ef       	ldi	r26, 0xFA	; 250
    2996:	b4 e4       	ldi	r27, 0x44	; 68
    2998:	8b 87       	std	Y+11, r24	; 0x0b
    299a:	9c 87       	std	Y+12, r25	; 0x0c
    299c:	ad 87       	std	Y+13, r26	; 0x0d
    299e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	4a ef       	ldi	r20, 0xFA	; 250
    29ae:	54 e4       	ldi	r21, 0x44	; 68
    29b0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	8f 83       	std	Y+7, r24	; 0x07
    29ba:	98 87       	std	Y+8, r25	; 0x08
    29bc:	a9 87       	std	Y+9, r26	; 0x09
    29be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c0:	6f 81       	ldd	r22, Y+7	; 0x07
    29c2:	78 85       	ldd	r23, Y+8	; 0x08
    29c4:	89 85       	ldd	r24, Y+9	; 0x09
    29c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <main+0x15c>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9e 83       	std	Y+6, r25	; 0x06
    29de:	8d 83       	std	Y+5, r24	; 0x05
    29e0:	3f c0       	rjmp	.+126    	; 0x2a60 <main+0x1da>
	else if (__tmp > 65535)
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	4c f5       	brge	.+82     	; 0x2a4c <main+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <main+0x1bc>
    2a24:	88 ec       	ldi	r24, 0xC8	; 200
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9c 83       	std	Y+4, r25	; 0x04
    2a2a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <main+0x1aa>
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	9e 83       	std	Y+6, r25	; 0x06
    2a40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <main+0x19e>
    2a4a:	7c cf       	rjmp	.-264    	; 0x2944 <main+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9e 83       	std	Y+6, r25	; 0x06
    2a5e:	8d 83       	std	Y+5, r24	; 0x05
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	9a 83       	std	Y+2, r25	; 0x02
    2a66:	89 83       	std	Y+1, r24	; 0x01
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <main+0x1e6>
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	67 cf       	rjmp	.-306    	; 0x2944 <main+0xbe>

00002a76 <__prologue_saves__>:
    2a76:	2f 92       	push	r2
    2a78:	3f 92       	push	r3
    2a7a:	4f 92       	push	r4
    2a7c:	5f 92       	push	r5
    2a7e:	6f 92       	push	r6
    2a80:	7f 92       	push	r7
    2a82:	8f 92       	push	r8
    2a84:	9f 92       	push	r9
    2a86:	af 92       	push	r10
    2a88:	bf 92       	push	r11
    2a8a:	cf 92       	push	r12
    2a8c:	df 92       	push	r13
    2a8e:	ef 92       	push	r14
    2a90:	ff 92       	push	r15
    2a92:	0f 93       	push	r16
    2a94:	1f 93       	push	r17
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	ca 1b       	sub	r28, r26
    2aa0:	db 0b       	sbc	r29, r27
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	09 94       	ijmp

00002aae <__epilogue_restores__>:
    2aae:	2a 88       	ldd	r2, Y+18	; 0x12
    2ab0:	39 88       	ldd	r3, Y+17	; 0x11
    2ab2:	48 88       	ldd	r4, Y+16	; 0x10
    2ab4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aba:	8c 84       	ldd	r8, Y+12	; 0x0c
    2abc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2abe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ac0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ac2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ac4:	df 80       	ldd	r13, Y+7	; 0x07
    2ac6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac8:	fd 80       	ldd	r15, Y+5	; 0x05
    2aca:	0c 81       	ldd	r16, Y+4	; 0x04
    2acc:	1b 81       	ldd	r17, Y+3	; 0x03
    2ace:	aa 81       	ldd	r26, Y+2	; 0x02
    2ad0:	b9 81       	ldd	r27, Y+1	; 0x01
    2ad2:	ce 0f       	add	r28, r30
    2ad4:	d1 1d       	adc	r29, r1
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	ed 01       	movw	r28, r26
    2ae2:	08 95       	ret

00002ae4 <dtostrf>:
    2ae4:	ef 92       	push	r14
    2ae6:	ff 92       	push	r15
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	f2 2f       	mov	r31, r18
    2aee:	f0 2e       	mov	r15, r16
    2af0:	47 fd       	sbrc	r20, 7
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <dtostrf+0x14>
    2af4:	e4 e0       	ldi	r30, 0x04	; 4
    2af6:	01 c0       	rjmp	.+2      	; 0x2afa <dtostrf+0x16>
    2af8:	e4 e1       	ldi	r30, 0x14	; 20
    2afa:	24 2f       	mov	r18, r20
    2afc:	33 27       	eor	r19, r19
    2afe:	27 fd       	sbrc	r18, 7
    2b00:	30 95       	com	r19
    2b02:	37 ff       	sbrs	r19, 7
    2b04:	03 c0       	rjmp	.+6      	; 0x2b0c <dtostrf+0x28>
    2b06:	30 95       	com	r19
    2b08:	21 95       	neg	r18
    2b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0c:	4f 2d       	mov	r20, r15
    2b0e:	51 2f       	mov	r21, r17
    2b10:	0f 2f       	mov	r16, r31
    2b12:	ee 2e       	mov	r14, r30
    2b14:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <dtoa_prf>
    2b18:	8f 2d       	mov	r24, r15
    2b1a:	91 2f       	mov	r25, r17
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	ff 90       	pop	r15
    2b22:	ef 90       	pop	r14
    2b24:	08 95       	ret

00002b26 <memcpy>:
    2b26:	fb 01       	movw	r30, r22
    2b28:	dc 01       	movw	r26, r24
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <memcpy+0xa>
    2b2c:	01 90       	ld	r0, Z+
    2b2e:	0d 92       	st	X+, r0
    2b30:	41 50       	subi	r20, 0x01	; 1
    2b32:	50 40       	sbci	r21, 0x00	; 0
    2b34:	d8 f7       	brcc	.-10     	; 0x2b2c <memcpy+0x6>
    2b36:	08 95       	ret

00002b38 <dtoa_prf>:
    2b38:	a9 e0       	ldi	r26, 0x09	; 9
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e2 ea       	ldi	r30, 0xA2	; 162
    2b3e:	f5 e1       	ldi	r31, 0x15	; 21
    2b40:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__prologue_saves__+0x8>
    2b44:	6a 01       	movw	r12, r20
    2b46:	12 2f       	mov	r17, r18
    2b48:	a0 2e       	mov	r10, r16
    2b4a:	be 2c       	mov	r11, r14
    2b4c:	2b e3       	ldi	r18, 0x3B	; 59
    2b4e:	20 17       	cp	r18, r16
    2b50:	18 f4       	brcc	.+6      	; 0x2b58 <dtoa_prf+0x20>
    2b52:	2c e3       	ldi	r18, 0x3C	; 60
    2b54:	92 2e       	mov	r9, r18
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <dtoa_prf+0x24>
    2b58:	90 2e       	mov	r9, r16
    2b5a:	93 94       	inc	r9
    2b5c:	ae 01       	movw	r20, r28
    2b5e:	4f 5f       	subi	r20, 0xFF	; 255
    2b60:	5f 4f       	sbci	r21, 0xFF	; 255
    2b62:	27 e0       	ldi	r18, 0x07	; 7
    2b64:	09 2d       	mov	r16, r9
    2b66:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__ftoa_engine>
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	e8 2e       	mov	r14, r24
    2b70:	ff 24       	eor	r15, r15
    2b72:	c7 01       	movw	r24, r14
    2b74:	89 70       	andi	r24, 0x09	; 9
    2b76:	90 70       	andi	r25, 0x00	; 0
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	11 f4       	brne	.+4      	; 0x2b80 <dtoa_prf+0x48>
    2b7c:	ad e2       	ldi	r26, 0x2D	; 45
    2b7e:	09 c0       	rjmp	.+18     	; 0x2b92 <dtoa_prf+0x5a>
    2b80:	b1 fe       	sbrs	r11, 1
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <dtoa_prf+0x50>
    2b84:	ab e2       	ldi	r26, 0x2B	; 43
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <dtoa_prf+0x5a>
    2b88:	b0 fc       	sbrc	r11, 0
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <dtoa_prf+0x58>
    2b8c:	a0 e0       	ldi	r26, 0x00	; 0
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <dtoa_prf+0x5a>
    2b90:	a0 e2       	ldi	r26, 0x20	; 32
    2b92:	e3 fe       	sbrs	r14, 3
    2b94:	3b c0       	rjmp	.+118    	; 0x2c0c <dtoa_prf+0xd4>
    2b96:	aa 23       	and	r26, r26
    2b98:	11 f4       	brne	.+4      	; 0x2b9e <dtoa_prf+0x66>
    2b9a:	23 e0       	ldi	r18, 0x03	; 3
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <dtoa_prf+0x68>
    2b9e:	24 e0       	ldi	r18, 0x04	; 4
    2ba0:	21 17       	cp	r18, r17
    2ba2:	10 f0       	brcs	.+4      	; 0x2ba8 <dtoa_prf+0x70>
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <dtoa_prf+0x74>
    2ba8:	12 1b       	sub	r17, r18
    2baa:	21 2f       	mov	r18, r17
    2bac:	eb 2c       	mov	r14, r11
    2bae:	b4 fe       	sbrs	r11, 4
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <dtoa_prf+0x7e>
    2bb2:	32 2f       	mov	r19, r18
    2bb4:	0a c0       	rjmp	.+20     	; 0x2bca <dtoa_prf+0x92>
    2bb6:	f6 01       	movw	r30, r12
    2bb8:	32 2f       	mov	r19, r18
    2bba:	80 e2       	ldi	r24, 0x20	; 32
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <dtoa_prf+0x8a>
    2bbe:	81 93       	st	Z+, r24
    2bc0:	31 50       	subi	r19, 0x01	; 1
    2bc2:	33 23       	and	r19, r19
    2bc4:	e1 f7       	brne	.-8      	; 0x2bbe <dtoa_prf+0x86>
    2bc6:	c2 0e       	add	r12, r18
    2bc8:	d1 1c       	adc	r13, r1
    2bca:	aa 23       	and	r26, r26
    2bcc:	19 f0       	breq	.+6      	; 0x2bd4 <dtoa_prf+0x9c>
    2bce:	f6 01       	movw	r30, r12
    2bd0:	a1 93       	st	Z+, r26
    2bd2:	6f 01       	movw	r12, r30
    2bd4:	f6 01       	movw	r30, r12
    2bd6:	31 96       	adiw	r30, 0x01	; 1
    2bd8:	e2 fe       	sbrs	r14, 2
    2bda:	05 c0       	rjmp	.+10     	; 0x2be6 <dtoa_prf+0xae>
    2bdc:	9e e4       	ldi	r25, 0x4E	; 78
    2bde:	d6 01       	movw	r26, r12
    2be0:	9c 93       	st	X, r25
    2be2:	81 e4       	ldi	r24, 0x41	; 65
    2be4:	04 c0       	rjmp	.+8      	; 0x2bee <dtoa_prf+0xb6>
    2be6:	9e e6       	ldi	r25, 0x6E	; 110
    2be8:	d6 01       	movw	r26, r12
    2bea:	9c 93       	st	X, r25
    2bec:	81 e6       	ldi	r24, 0x61	; 97
    2bee:	11 96       	adiw	r26, 0x01	; 1
    2bf0:	8c 93       	st	X, r24
    2bf2:	91 83       	std	Z+1, r25	; 0x01
    2bf4:	32 96       	adiw	r30, 0x02	; 2
    2bf6:	df 01       	movw	r26, r30
    2bf8:	83 2f       	mov	r24, r19
    2bfa:	90 e2       	ldi	r25, 0x20	; 32
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <dtoa_prf+0xca>
    2bfe:	9d 93       	st	X+, r25
    2c00:	81 50       	subi	r24, 0x01	; 1
    2c02:	88 23       	and	r24, r24
    2c04:	e1 f7       	brne	.-8      	; 0x2bfe <dtoa_prf+0xc6>
    2c06:	e3 0f       	add	r30, r19
    2c08:	f1 1d       	adc	r31, r1
    2c0a:	40 c0       	rjmp	.+128    	; 0x2c8c <dtoa_prf+0x154>
    2c0c:	e2 fe       	sbrs	r14, 2
    2c0e:	42 c0       	rjmp	.+132    	; 0x2c94 <dtoa_prf+0x15c>
    2c10:	aa 23       	and	r26, r26
    2c12:	11 f4       	brne	.+4      	; 0x2c18 <dtoa_prf+0xe0>
    2c14:	23 e0       	ldi	r18, 0x03	; 3
    2c16:	01 c0       	rjmp	.+2      	; 0x2c1a <dtoa_prf+0xe2>
    2c18:	24 e0       	ldi	r18, 0x04	; 4
    2c1a:	21 17       	cp	r18, r17
    2c1c:	10 f0       	brcs	.+4      	; 0x2c22 <dtoa_prf+0xea>
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <dtoa_prf+0xee>
    2c22:	12 1b       	sub	r17, r18
    2c24:	21 2f       	mov	r18, r17
    2c26:	eb 2c       	mov	r14, r11
    2c28:	b4 fe       	sbrs	r11, 4
    2c2a:	02 c0       	rjmp	.+4      	; 0x2c30 <dtoa_prf+0xf8>
    2c2c:	92 2f       	mov	r25, r18
    2c2e:	0a c0       	rjmp	.+20     	; 0x2c44 <dtoa_prf+0x10c>
    2c30:	f6 01       	movw	r30, r12
    2c32:	92 2f       	mov	r25, r18
    2c34:	80 e2       	ldi	r24, 0x20	; 32
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <dtoa_prf+0x104>
    2c38:	81 93       	st	Z+, r24
    2c3a:	91 50       	subi	r25, 0x01	; 1
    2c3c:	99 23       	and	r25, r25
    2c3e:	e1 f7       	brne	.-8      	; 0x2c38 <dtoa_prf+0x100>
    2c40:	c2 0e       	add	r12, r18
    2c42:	d1 1c       	adc	r13, r1
    2c44:	aa 23       	and	r26, r26
    2c46:	19 f0       	breq	.+6      	; 0x2c4e <dtoa_prf+0x116>
    2c48:	f6 01       	movw	r30, r12
    2c4a:	a1 93       	st	Z+, r26
    2c4c:	6f 01       	movw	r12, r30
    2c4e:	f6 01       	movw	r30, r12
    2c50:	31 96       	adiw	r30, 0x01	; 1
    2c52:	e2 fe       	sbrs	r14, 2
    2c54:	08 c0       	rjmp	.+16     	; 0x2c66 <dtoa_prf+0x12e>
    2c56:	89 e4       	ldi	r24, 0x49	; 73
    2c58:	d6 01       	movw	r26, r12
    2c5a:	8c 93       	st	X, r24
    2c5c:	8e e4       	ldi	r24, 0x4E	; 78
    2c5e:	11 96       	adiw	r26, 0x01	; 1
    2c60:	8c 93       	st	X, r24
    2c62:	86 e4       	ldi	r24, 0x46	; 70
    2c64:	07 c0       	rjmp	.+14     	; 0x2c74 <dtoa_prf+0x13c>
    2c66:	89 e6       	ldi	r24, 0x69	; 105
    2c68:	d6 01       	movw	r26, r12
    2c6a:	8c 93       	st	X, r24
    2c6c:	8e e6       	ldi	r24, 0x6E	; 110
    2c6e:	11 96       	adiw	r26, 0x01	; 1
    2c70:	8c 93       	st	X, r24
    2c72:	86 e6       	ldi	r24, 0x66	; 102
    2c74:	81 83       	std	Z+1, r24	; 0x01
    2c76:	32 96       	adiw	r30, 0x02	; 2
    2c78:	df 01       	movw	r26, r30
    2c7a:	89 2f       	mov	r24, r25
    2c7c:	20 e2       	ldi	r18, 0x20	; 32
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <dtoa_prf+0x14c>
    2c80:	2d 93       	st	X+, r18
    2c82:	81 50       	subi	r24, 0x01	; 1
    2c84:	88 23       	and	r24, r24
    2c86:	e1 f7       	brne	.-8      	; 0x2c80 <dtoa_prf+0x148>
    2c88:	e9 0f       	add	r30, r25
    2c8a:	f1 1d       	adc	r31, r1
    2c8c:	10 82       	st	Z, r1
    2c8e:	2e ef       	ldi	r18, 0xFE	; 254
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	af c0       	rjmp	.+350    	; 0x2df2 <dtoa_prf+0x2ba>
    2c94:	16 16       	cp	r1, r22
    2c96:	17 06       	cpc	r1, r23
    2c98:	1c f0       	brlt	.+6      	; 0x2ca0 <dtoa_prf+0x168>
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	50 e0       	ldi	r21, 0x00	; 0
    2c9e:	03 c0       	rjmp	.+6      	; 0x2ca6 <dtoa_prf+0x16e>
    2ca0:	ab 01       	movw	r20, r22
    2ca2:	4f 5f       	subi	r20, 0xFF	; 255
    2ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca6:	aa 20       	and	r10, r10
    2ca8:	19 f4       	brne	.+6      	; 0x2cb0 <dtoa_prf+0x178>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	03 c0       	rjmp	.+6      	; 0x2cb6 <dtoa_prf+0x17e>
    2cb0:	8a 2d       	mov	r24, r10
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	01 96       	adiw	r24, 0x01	; 1
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	aa 23       	and	r26, r26
    2cbc:	11 f0       	breq	.+4      	; 0x2cc2 <dtoa_prf+0x18a>
    2cbe:	21 e0       	ldi	r18, 0x01	; 1
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	24 0f       	add	r18, r20
    2cc4:	35 1f       	adc	r19, r21
    2cc6:	28 0f       	add	r18, r24
    2cc8:	39 1f       	adc	r19, r25
    2cca:	81 2f       	mov	r24, r17
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	28 17       	cp	r18, r24
    2cd0:	39 07       	cpc	r19, r25
    2cd2:	14 f0       	brlt	.+4      	; 0x2cd8 <dtoa_prf+0x1a0>
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <dtoa_prf+0x1a4>
    2cd8:	12 1b       	sub	r17, r18
    2cda:	21 2f       	mov	r18, r17
    2cdc:	4b 2d       	mov	r20, r11
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	ca 01       	movw	r24, r20
    2ce2:	80 71       	andi	r24, 0x10	; 16
    2ce4:	90 70       	andi	r25, 0x00	; 0
    2ce6:	b4 fc       	sbrc	r11, 4
    2ce8:	0d c0       	rjmp	.+26     	; 0x2d04 <dtoa_prf+0x1cc>
    2cea:	b3 fc       	sbrc	r11, 3
    2cec:	0b c0       	rjmp	.+22     	; 0x2d04 <dtoa_prf+0x1cc>
    2cee:	f6 01       	movw	r30, r12
    2cf0:	32 2f       	mov	r19, r18
    2cf2:	40 e2       	ldi	r20, 0x20	; 32
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <dtoa_prf+0x1c2>
    2cf6:	41 93       	st	Z+, r20
    2cf8:	31 50       	subi	r19, 0x01	; 1
    2cfa:	33 23       	and	r19, r19
    2cfc:	e1 f7       	brne	.-8      	; 0x2cf6 <dtoa_prf+0x1be>
    2cfe:	c2 0e       	add	r12, r18
    2d00:	d1 1c       	adc	r13, r1
    2d02:	01 c0       	rjmp	.+2      	; 0x2d06 <dtoa_prf+0x1ce>
    2d04:	32 2f       	mov	r19, r18
    2d06:	aa 23       	and	r26, r26
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <dtoa_prf+0x1d8>
    2d0a:	f6 01       	movw	r30, r12
    2d0c:	a1 93       	st	Z+, r26
    2d0e:	6f 01       	movw	r12, r30
    2d10:	89 2b       	or	r24, r25
    2d12:	11 f0       	breq	.+4      	; 0x2d18 <dtoa_prf+0x1e0>
    2d14:	13 2f       	mov	r17, r19
    2d16:	0a c0       	rjmp	.+20     	; 0x2d2c <dtoa_prf+0x1f4>
    2d18:	f6 01       	movw	r30, r12
    2d1a:	13 2f       	mov	r17, r19
    2d1c:	80 e3       	ldi	r24, 0x30	; 48
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <dtoa_prf+0x1ec>
    2d20:	81 93       	st	Z+, r24
    2d22:	11 50       	subi	r17, 0x01	; 1
    2d24:	11 23       	and	r17, r17
    2d26:	e1 f7       	brne	.-8      	; 0x2d20 <dtoa_prf+0x1e8>
    2d28:	c3 0e       	add	r12, r19
    2d2a:	d1 1c       	adc	r13, r1
    2d2c:	09 2d       	mov	r16, r9
    2d2e:	06 0f       	add	r16, r22
    2d30:	ba 80       	ldd	r11, Y+2	; 0x02
    2d32:	90 e1       	ldi	r25, 0x10	; 16
    2d34:	89 2e       	mov	r8, r25
    2d36:	91 2c       	mov	r9, r1
    2d38:	8e 20       	and	r8, r14
    2d3a:	9f 20       	and	r9, r15
    2d3c:	e4 fe       	sbrs	r14, 4
    2d3e:	04 c0       	rjmp	.+8      	; 0x2d48 <dtoa_prf+0x210>
    2d40:	f1 e3       	ldi	r31, 0x31	; 49
    2d42:	bf 16       	cp	r11, r31
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <dtoa_prf+0x210>
    2d46:	01 50       	subi	r16, 0x01	; 1
    2d48:	10 16       	cp	r1, r16
    2d4a:	14 f0       	brlt	.+4      	; 0x2d50 <dtoa_prf+0x218>
    2d4c:	01 e0       	ldi	r16, 0x01	; 1
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <dtoa_prf+0x21e>
    2d50:	09 30       	cpi	r16, 0x09	; 9
    2d52:	08 f0       	brcs	.+2      	; 0x2d56 <dtoa_prf+0x21e>
    2d54:	08 e0       	ldi	r16, 0x08	; 8
    2d56:	9b 01       	movw	r18, r22
    2d58:	77 ff       	sbrs	r23, 7
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <dtoa_prf+0x228>
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	cb 01       	movw	r24, r22
    2d62:	01 96       	adiw	r24, 0x01	; 1
    2d64:	82 1b       	sub	r24, r18
    2d66:	93 0b       	sbc	r25, r19
    2d68:	fe 01       	movw	r30, r28
    2d6a:	31 96       	adiw	r30, 0x01	; 1
    2d6c:	e8 0f       	add	r30, r24
    2d6e:	f9 1f       	adc	r31, r25
    2d70:	8e e2       	ldi	r24, 0x2E	; 46
    2d72:	f8 2e       	mov	r15, r24
    2d74:	3b 01       	movw	r6, r22
    2d76:	60 1a       	sub	r6, r16
    2d78:	71 08       	sbc	r7, r1
    2d7a:	8a 2d       	mov	r24, r10
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	44 27       	eor	r20, r20
    2d80:	55 27       	eor	r21, r21
    2d82:	48 1b       	sub	r20, r24
    2d84:	59 0b       	sbc	r21, r25
    2d86:	8f ef       	ldi	r24, 0xFF	; 255
    2d88:	2f 3f       	cpi	r18, 0xFF	; 255
    2d8a:	38 07       	cpc	r19, r24
    2d8c:	19 f4       	brne	.+6      	; 0x2d94 <dtoa_prf+0x25c>
    2d8e:	d6 01       	movw	r26, r12
    2d90:	fd 92       	st	X+, r15
    2d92:	6d 01       	movw	r12, r26
    2d94:	62 17       	cp	r22, r18
    2d96:	73 07       	cpc	r23, r19
    2d98:	2c f0       	brlt	.+10     	; 0x2da4 <dtoa_prf+0x26c>
    2d9a:	62 16       	cp	r6, r18
    2d9c:	73 06       	cpc	r7, r19
    2d9e:	14 f4       	brge	.+4      	; 0x2da4 <dtoa_prf+0x26c>
    2da0:	80 81       	ld	r24, Z
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <dtoa_prf+0x26e>
    2da4:	80 e3       	ldi	r24, 0x30	; 48
    2da6:	21 50       	subi	r18, 0x01	; 1
    2da8:	30 40       	sbci	r19, 0x00	; 0
    2daa:	31 96       	adiw	r30, 0x01	; 1
    2dac:	24 17       	cp	r18, r20
    2dae:	35 07       	cpc	r19, r21
    2db0:	24 f0       	brlt	.+8      	; 0x2dba <dtoa_prf+0x282>
    2db2:	d6 01       	movw	r26, r12
    2db4:	8d 93       	st	X+, r24
    2db6:	6d 01       	movw	r12, r26
    2db8:	e6 cf       	rjmp	.-52     	; 0x2d86 <dtoa_prf+0x24e>
    2dba:	26 17       	cp	r18, r22
    2dbc:	37 07       	cpc	r19, r23
    2dbe:	49 f4       	brne	.+18     	; 0x2dd2 <dtoa_prf+0x29a>
    2dc0:	b5 e3       	ldi	r27, 0x35	; 53
    2dc2:	bb 15       	cp	r27, r11
    2dc4:	28 f0       	brcs	.+10     	; 0x2dd0 <dtoa_prf+0x298>
    2dc6:	bb 16       	cp	r11, r27
    2dc8:	21 f4       	brne	.+8      	; 0x2dd2 <dtoa_prf+0x29a>
    2dca:	81 14       	cp	r8, r1
    2dcc:	91 04       	cpc	r9, r1
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <dtoa_prf+0x29a>
    2dd0:	81 e3       	ldi	r24, 0x31	; 49
    2dd2:	f6 01       	movw	r30, r12
    2dd4:	81 93       	st	Z+, r24
    2dd6:	d6 01       	movw	r26, r12
    2dd8:	81 2f       	mov	r24, r17
    2dda:	90 e2       	ldi	r25, 0x20	; 32
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <dtoa_prf+0x2aa>
    2dde:	9c 93       	st	X, r25
    2de0:	81 50       	subi	r24, 0x01	; 1
    2de2:	11 96       	adiw	r26, 0x01	; 1
    2de4:	88 23       	and	r24, r24
    2de6:	d9 f7       	brne	.-10     	; 0x2dde <dtoa_prf+0x2a6>
    2de8:	e1 0f       	add	r30, r17
    2dea:	f1 1d       	adc	r31, r1
    2dec:	10 82       	st	Z, r1
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	c9 01       	movw	r24, r18
    2df4:	29 96       	adiw	r28, 0x09	; 9
    2df6:	ee e0       	ldi	r30, 0x0E	; 14
    2df8:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__epilogue_restores__+0x8>

00002dfc <__ftoa_engine>:
    2dfc:	28 30       	cpi	r18, 0x08	; 8
    2dfe:	08 f0       	brcs	.+2      	; 0x2e02 <__ftoa_engine+0x6>
    2e00:	27 e0       	ldi	r18, 0x07	; 7
    2e02:	33 27       	eor	r19, r19
    2e04:	da 01       	movw	r26, r20
    2e06:	99 0f       	add	r25, r25
    2e08:	31 1d       	adc	r19, r1
    2e0a:	87 fd       	sbrc	r24, 7
    2e0c:	91 60       	ori	r25, 0x01	; 1
    2e0e:	00 96       	adiw	r24, 0x00	; 0
    2e10:	61 05       	cpc	r22, r1
    2e12:	71 05       	cpc	r23, r1
    2e14:	39 f4       	brne	.+14     	; 0x2e24 <__ftoa_engine+0x28>
    2e16:	32 60       	ori	r19, 0x02	; 2
    2e18:	2e 5f       	subi	r18, 0xFE	; 254
    2e1a:	3d 93       	st	X+, r19
    2e1c:	30 e3       	ldi	r19, 0x30	; 48
    2e1e:	2a 95       	dec	r18
    2e20:	e1 f7       	brne	.-8      	; 0x2e1a <__ftoa_engine+0x1e>
    2e22:	08 95       	ret
    2e24:	9f 3f       	cpi	r25, 0xFF	; 255
    2e26:	30 f0       	brcs	.+12     	; 0x2e34 <__ftoa_engine+0x38>
    2e28:	80 38       	cpi	r24, 0x80	; 128
    2e2a:	71 05       	cpc	r23, r1
    2e2c:	61 05       	cpc	r22, r1
    2e2e:	09 f0       	breq	.+2      	; 0x2e32 <__ftoa_engine+0x36>
    2e30:	3c 5f       	subi	r19, 0xFC	; 252
    2e32:	3c 5f       	subi	r19, 0xFC	; 252
    2e34:	3d 93       	st	X+, r19
    2e36:	91 30       	cpi	r25, 0x01	; 1
    2e38:	08 f0       	brcs	.+2      	; 0x2e3c <__ftoa_engine+0x40>
    2e3a:	80 68       	ori	r24, 0x80	; 128
    2e3c:	91 1d       	adc	r25, r1
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	1f 93       	push	r17
    2e44:	0f 93       	push	r16
    2e46:	ff 92       	push	r15
    2e48:	ef 92       	push	r14
    2e4a:	19 2f       	mov	r17, r25
    2e4c:	98 7f       	andi	r25, 0xF8	; 248
    2e4e:	96 95       	lsr	r25
    2e50:	e9 2f       	mov	r30, r25
    2e52:	96 95       	lsr	r25
    2e54:	96 95       	lsr	r25
    2e56:	e9 0f       	add	r30, r25
    2e58:	ff 27       	eor	r31, r31
    2e5a:	e2 55       	subi	r30, 0x52	; 82
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	99 27       	eor	r25, r25
    2e60:	33 27       	eor	r19, r19
    2e62:	ee 24       	eor	r14, r14
    2e64:	ff 24       	eor	r15, r15
    2e66:	a7 01       	movw	r20, r14
    2e68:	e7 01       	movw	r28, r14
    2e6a:	05 90       	lpm	r0, Z+
    2e6c:	08 94       	sec
    2e6e:	07 94       	ror	r0
    2e70:	28 f4       	brcc	.+10     	; 0x2e7c <__ftoa_engine+0x80>
    2e72:	36 0f       	add	r19, r22
    2e74:	e7 1e       	adc	r14, r23
    2e76:	f8 1e       	adc	r15, r24
    2e78:	49 1f       	adc	r20, r25
    2e7a:	51 1d       	adc	r21, r1
    2e7c:	66 0f       	add	r22, r22
    2e7e:	77 1f       	adc	r23, r23
    2e80:	88 1f       	adc	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	06 94       	lsr	r0
    2e86:	a1 f7       	brne	.-24     	; 0x2e70 <__ftoa_engine+0x74>
    2e88:	05 90       	lpm	r0, Z+
    2e8a:	07 94       	ror	r0
    2e8c:	28 f4       	brcc	.+10     	; 0x2e98 <__ftoa_engine+0x9c>
    2e8e:	e7 0e       	add	r14, r23
    2e90:	f8 1e       	adc	r15, r24
    2e92:	49 1f       	adc	r20, r25
    2e94:	56 1f       	adc	r21, r22
    2e96:	c1 1d       	adc	r28, r1
    2e98:	77 0f       	add	r23, r23
    2e9a:	88 1f       	adc	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	66 1f       	adc	r22, r22
    2ea0:	06 94       	lsr	r0
    2ea2:	a1 f7       	brne	.-24     	; 0x2e8c <__ftoa_engine+0x90>
    2ea4:	05 90       	lpm	r0, Z+
    2ea6:	07 94       	ror	r0
    2ea8:	28 f4       	brcc	.+10     	; 0x2eb4 <__ftoa_engine+0xb8>
    2eaa:	f8 0e       	add	r15, r24
    2eac:	49 1f       	adc	r20, r25
    2eae:	56 1f       	adc	r21, r22
    2eb0:	c7 1f       	adc	r28, r23
    2eb2:	d1 1d       	adc	r29, r1
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	66 1f       	adc	r22, r22
    2eba:	77 1f       	adc	r23, r23
    2ebc:	06 94       	lsr	r0
    2ebe:	a1 f7       	brne	.-24     	; 0x2ea8 <__ftoa_engine+0xac>
    2ec0:	05 90       	lpm	r0, Z+
    2ec2:	07 94       	ror	r0
    2ec4:	20 f4       	brcc	.+8      	; 0x2ece <__ftoa_engine+0xd2>
    2ec6:	49 0f       	add	r20, r25
    2ec8:	56 1f       	adc	r21, r22
    2eca:	c7 1f       	adc	r28, r23
    2ecc:	d8 1f       	adc	r29, r24
    2ece:	99 0f       	add	r25, r25
    2ed0:	66 1f       	adc	r22, r22
    2ed2:	77 1f       	adc	r23, r23
    2ed4:	88 1f       	adc	r24, r24
    2ed6:	06 94       	lsr	r0
    2ed8:	a9 f7       	brne	.-22     	; 0x2ec4 <__ftoa_engine+0xc8>
    2eda:	84 91       	lpm	r24, Z+
    2edc:	10 95       	com	r17
    2ede:	17 70       	andi	r17, 0x07	; 7
    2ee0:	41 f0       	breq	.+16     	; 0x2ef2 <__ftoa_engine+0xf6>
    2ee2:	d6 95       	lsr	r29
    2ee4:	c7 95       	ror	r28
    2ee6:	57 95       	ror	r21
    2ee8:	47 95       	ror	r20
    2eea:	f7 94       	ror	r15
    2eec:	e7 94       	ror	r14
    2eee:	1a 95       	dec	r17
    2ef0:	c1 f7       	brne	.-16     	; 0x2ee2 <__ftoa_engine+0xe6>
    2ef2:	e4 e5       	ldi	r30, 0x54	; 84
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	68 94       	set
    2ef8:	15 90       	lpm	r1, Z+
    2efa:	15 91       	lpm	r17, Z+
    2efc:	35 91       	lpm	r19, Z+
    2efe:	65 91       	lpm	r22, Z+
    2f00:	95 91       	lpm	r25, Z+
    2f02:	05 90       	lpm	r0, Z+
    2f04:	7f e2       	ldi	r23, 0x2F	; 47
    2f06:	73 95       	inc	r23
    2f08:	e1 18       	sub	r14, r1
    2f0a:	f1 0a       	sbc	r15, r17
    2f0c:	43 0b       	sbc	r20, r19
    2f0e:	56 0b       	sbc	r21, r22
    2f10:	c9 0b       	sbc	r28, r25
    2f12:	d0 09       	sbc	r29, r0
    2f14:	c0 f7       	brcc	.-16     	; 0x2f06 <__ftoa_engine+0x10a>
    2f16:	e1 0c       	add	r14, r1
    2f18:	f1 1e       	adc	r15, r17
    2f1a:	43 1f       	adc	r20, r19
    2f1c:	56 1f       	adc	r21, r22
    2f1e:	c9 1f       	adc	r28, r25
    2f20:	d0 1d       	adc	r29, r0
    2f22:	7e f4       	brtc	.+30     	; 0x2f42 <__ftoa_engine+0x146>
    2f24:	70 33       	cpi	r23, 0x30	; 48
    2f26:	11 f4       	brne	.+4      	; 0x2f2c <__ftoa_engine+0x130>
    2f28:	8a 95       	dec	r24
    2f2a:	e6 cf       	rjmp	.-52     	; 0x2ef8 <__ftoa_engine+0xfc>
    2f2c:	e8 94       	clt
    2f2e:	01 50       	subi	r16, 0x01	; 1
    2f30:	30 f0       	brcs	.+12     	; 0x2f3e <__ftoa_engine+0x142>
    2f32:	08 0f       	add	r16, r24
    2f34:	0a f4       	brpl	.+2      	; 0x2f38 <__ftoa_engine+0x13c>
    2f36:	00 27       	eor	r16, r16
    2f38:	02 17       	cp	r16, r18
    2f3a:	08 f4       	brcc	.+2      	; 0x2f3e <__ftoa_engine+0x142>
    2f3c:	20 2f       	mov	r18, r16
    2f3e:	23 95       	inc	r18
    2f40:	02 2f       	mov	r16, r18
    2f42:	7a 33       	cpi	r23, 0x3A	; 58
    2f44:	28 f0       	brcs	.+10     	; 0x2f50 <__ftoa_engine+0x154>
    2f46:	79 e3       	ldi	r23, 0x39	; 57
    2f48:	7d 93       	st	X+, r23
    2f4a:	2a 95       	dec	r18
    2f4c:	e9 f7       	brne	.-6      	; 0x2f48 <__ftoa_engine+0x14c>
    2f4e:	10 c0       	rjmp	.+32     	; 0x2f70 <__ftoa_engine+0x174>
    2f50:	7d 93       	st	X+, r23
    2f52:	2a 95       	dec	r18
    2f54:	89 f6       	brne	.-94     	; 0x2ef8 <__ftoa_engine+0xfc>
    2f56:	06 94       	lsr	r0
    2f58:	97 95       	ror	r25
    2f5a:	67 95       	ror	r22
    2f5c:	37 95       	ror	r19
    2f5e:	17 95       	ror	r17
    2f60:	17 94       	ror	r1
    2f62:	e1 18       	sub	r14, r1
    2f64:	f1 0a       	sbc	r15, r17
    2f66:	43 0b       	sbc	r20, r19
    2f68:	56 0b       	sbc	r21, r22
    2f6a:	c9 0b       	sbc	r28, r25
    2f6c:	d0 09       	sbc	r29, r0
    2f6e:	98 f0       	brcs	.+38     	; 0x2f96 <__ftoa_engine+0x19a>
    2f70:	23 95       	inc	r18
    2f72:	7e 91       	ld	r23, -X
    2f74:	73 95       	inc	r23
    2f76:	7a 33       	cpi	r23, 0x3A	; 58
    2f78:	08 f0       	brcs	.+2      	; 0x2f7c <__ftoa_engine+0x180>
    2f7a:	70 e3       	ldi	r23, 0x30	; 48
    2f7c:	7c 93       	st	X, r23
    2f7e:	20 13       	cpse	r18, r16
    2f80:	b8 f7       	brcc	.-18     	; 0x2f70 <__ftoa_engine+0x174>
    2f82:	7e 91       	ld	r23, -X
    2f84:	70 61       	ori	r23, 0x10	; 16
    2f86:	7d 93       	st	X+, r23
    2f88:	30 f0       	brcs	.+12     	; 0x2f96 <__ftoa_engine+0x19a>
    2f8a:	83 95       	inc	r24
    2f8c:	71 e3       	ldi	r23, 0x31	; 49
    2f8e:	7d 93       	st	X+, r23
    2f90:	70 e3       	ldi	r23, 0x30	; 48
    2f92:	2a 95       	dec	r18
    2f94:	e1 f7       	brne	.-8      	; 0x2f8e <__ftoa_engine+0x192>
    2f96:	11 24       	eor	r1, r1
    2f98:	ef 90       	pop	r14
    2f9a:	ff 90       	pop	r15
    2f9c:	0f 91       	pop	r16
    2f9e:	1f 91       	pop	r17
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	99 27       	eor	r25, r25
    2fa6:	87 fd       	sbrc	r24, 7
    2fa8:	90 95       	com	r25
    2faa:	08 95       	ret

00002fac <_exit>:
    2fac:	f8 94       	cli

00002fae <__stop_program>:
    2fae:	ff cf       	rjmp	.-2      	; 0x2fae <__stop_program>
